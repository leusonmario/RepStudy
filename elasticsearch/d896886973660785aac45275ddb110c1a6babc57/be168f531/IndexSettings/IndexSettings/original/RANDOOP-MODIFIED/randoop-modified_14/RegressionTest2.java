import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings3.getGroups("state-", false);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.internalMap();
        java.lang.String str14 = builder11.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.loadFromSource("index.uuid");
        java.lang.String str24 = builder20.get("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder20.internalMap();
        java.lang.String str27 = builder20.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getAsGroups();
        java.lang.String[] strArray37 = settings31.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings31.getAsGroups(false);
        java.lang.String[] strArray41 = settings31.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder28.extendArray("index.blocks.write", strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder28.put("index.number_of_replicas", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        java.lang.String str49 = builder46.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("primary_terms", false);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder52.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder28.put(strMap56);
        boolean boolean59 = indexScopedSettings0.updateSettings(settings3, builder20, builder57, "index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder57.normalizePrefix("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("index.uuid", true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "false" + "'", str24, "false");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings17 = builder16.build();
        java.lang.String str19 = builder16.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        boolean boolean26 = indexScopedSettings0.updateDynamicSettings(settings15, builder22, builder23, "_na_");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put(objDictionary27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        int int79 = 0; // flaky: indexSettings72.getNumberOfReplicas();
        boolean boolean80 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean81 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray6 = settings0.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings0.filter(strPredicate7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String[] strArray12 = settings8.getAsArray("hi!");
        java.util.Set<java.lang.String> strSet13 = settings8.names();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings8.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings17 = builder16.build();
        org.elasticsearch.common.settings.Settings settings19 = settings17.getByPrefix("state-");
        org.elasticsearch.common.settings.Settings settings21 = settings17.getByPrefix("index.shared_filesystem");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!" };
        java.lang.String[] strArray27 = settings21.getAsArray("index.blocks.write", strArray26);
        java.lang.String[] strArray29 = settings8.getAsArray("", strArray26, (java.lang.Boolean) true);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings8, streamOutput30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = settings2.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getAsGroups();
        java.lang.String[] strArray13 = settings7.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings7.filter(strPredicate14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings6.applySettings(settings15);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings6.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        indexScopedSettings6.validate(builder18);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        boolean boolean32 = indexScopedSettings6.updateDynamicSettings(settings21, builder28, builder29, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings41 = builder40.build();
        java.lang.String str43 = builder40.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder49.putProperties(strMap55, strPredicate57, strFunction58);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putProperties(strMap38, strPredicate57, strFunction60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings5, strPredicate57, indexScopedSettings62);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap77 = indexMetaData1.getActiveAllocationIds();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet79 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 1, indexMetaData1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap77);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        int int76 = 0; // flaky: indexMetaData74.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder77 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings78 = builder77.build();
        java.lang.String str80 = builder77.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder77.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder86.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder89.put("index.creation_date", true);
        java.util.Map<java.lang.String, java.lang.String> strMap93 = builder92.internalMap();
        boolean boolean94 = false; // flaky: indexMetaData74.equals((java.lang.Object) builder92);
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder92.put("index.version.minimum_compatible", "0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        int int22 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder30.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder27.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet39);
        int int43 = builder42.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.removeAlias("primary_terms");
        java.lang.String[] strArray49 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder45.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder21.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder61.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet70);
        int int73 = builder61.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder61.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder61.state(state76);
        byte byte78 = state76.id();
        byte byte79 = state76.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder59.state(state76);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder57.state(state76);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder53.state(state76);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + byte78 + "' != '" + (byte) 1 + "'", byte78 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte79 + "' != '" + (byte) 1 + "'", byte79 == (byte) 1);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxResultWindow();
        org.elasticsearch.common.settings.Settings settings79 = null; // flaky: indexSettings72.getSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap80 = null; // flaky: settings79.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
// flaky:         org.junit.Assert.assertNotNull(settings79);
// flaky:         org.junit.Assert.assertNotNull(strMap80);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings15 = builder14.build();
        java.lang.String str17 = builder14.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("index.auto_expand_replicas", (long) (byte) 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.creation_date_string", "index.version.minimum_compatible", "index.version.created_string", "_na_", "index.shared_filesystem", "index.creation_date_string", "index.version.upgraded", "_na_", "index.data_path", "index.shadow_replicas", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "index.blocks.write", "index.priority", "index.blocks.metadata", "index.version.created", "index.auto_expand_replicas", "index.data_path", "index.data_path", "primary_terms", "index.uuid" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder14.putArray("archived.", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder9.putArray("", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder9.putNull("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder9.loadFromSource("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings17 = builder16.build();
        java.lang.String str19 = builder16.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        boolean boolean26 = indexScopedSettings0.updateDynamicSettings(settings15, builder22, builder23, "_na_");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting28 = indexScopedSettings0.get("hi!");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings29.getAsGroups();
        java.lang.String[] strArray35 = settings29.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings29.filter(strPredicate36);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        org.elasticsearch.common.unit.TimeValue timeValue41 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue42 = settings37.getAsTime("index.auto_expand_replicas", timeValue41);
        indexScopedSettings0.validate(settings37);
        java.lang.String str44 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder3.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet12);
        int int15 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder3.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.state(state18);
        byte byte20 = state18.id();
        byte byte21 = state18.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.state(state18);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        java.lang.String str26 = builder23.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction41 = null;
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder32.putProperties(strMap38, strPredicate40, strFunction41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder42.putNull("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings46.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings46.getAsGroups();
        java.lang.String[] strArray52 = settings46.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings46.filter(strPredicate53);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings45.applySettings(settings54);
        java.lang.String[] strArray57 = settings54.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder44.put((java.lang.Object[]) strArray57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder22.settings(builder44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = builder59.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [_na_]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 1 + "'", byte20 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 1 + "'", byte21 == (byte) 1);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        java.lang.String[] strArray24 = settings21.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.diff(settings11, settings21);
        org.elasticsearch.common.settings.Setting.Property property26 = indexScopedSettings0.getScope();
        boolean boolean28 = indexScopedSettings0.hasDynamicSetting("index.");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting30 = indexScopedSettings0.get("index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + property26 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property26.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardSetting30);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        org.elasticsearch.Version version77 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings78 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(version77);
        org.junit.Assert.assertNotNull(settings78);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putCustom("index.data_path", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings2.getAsGroups();
        java.lang.String[] strArray8 = settings2.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings2.filter(strPredicate9);
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings10.filter(strPredicate11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getAsGroups();
        java.lang.String[] strArray21 = settings15.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings15.filter(strPredicate22);
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings14.applySettings(settings23);
        java.lang.String[] strArray26 = settings23.getAsArray("state-");
        java.lang.Boolean boolean29 = settings23.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings23);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params32 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = settings23.toXContent(xContentBuilder31, params32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings12.toXContent(xContentBuilder13, params32);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder1, params32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + false + "'", boolean29, false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(params32);
        org.junit.Assert.assertNull(xContentBuilder33);
        org.junit.Assert.assertNull(xContentBuilder34);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap74 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.common.unit.TimeValue timeValue93 = indexSettings92.getTranslogSyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig94 = indexSettings92.getMergeSchedulerConfig();
        int int95 = indexSettings92.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue93);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10000 + "'", int95 == 10000);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("index.shared_filesystem.recover_on_any_node", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder12.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet21);
        int int24 = builder12.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder12.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder33.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet42);
        int int46 = builder45.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.removeAlias("primary_terms");
        java.lang.String[] strArray52 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder48.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder25.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder9.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder1.putActiveAllocationIds(52, (java.util.Set<java.lang.String>) strSet53);
        int int59 = builder58.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int77 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput78 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        int int22 = builder21.numberOfShards();
        int int23 = builder21.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        java.lang.String str9 = builder6.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.settings(builder6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder3.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version((long) (byte) 1);
        java.lang.String str20 = builder17.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.uuid" + "'", str20, "index.uuid");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        boolean boolean5 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings1);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getAsGroups();
        org.elasticsearch.common.settings.Settings settings8 = settings1.getByPrefix("index.number_of_shards");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.requireFilters();
        int int74 = indexMetaData0.getRoutingNumShards();
        int int75 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput76 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        boolean boolean77 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.settings.Settings settings78 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap84 = settings80.getAsGroups();
        java.lang.String[] strArray86 = settings80.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate87 = null;
        org.elasticsearch.common.settings.Settings settings88 = settings80.filter(strPredicate87);
        org.elasticsearch.common.settings.Settings settings89 = indexScopedSettings79.applySettings(settings88);
        java.lang.String[] strArray91 = settings88.getAsArray("state-");
        java.lang.Boolean boolean94 = settings88.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean95 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings88);
        boolean boolean96 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings88);
        org.elasticsearch.index.IndexSettings indexSettings97 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings88);
        java.lang.String str98 = indexSettings97.getUUID();
        boolean boolean99 = indexSettings97.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertEquals("'" + boolean94 + "' != '" + false + "'", boolean94, false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "_na_" + "'", str98, "_na_");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.Boolean boolean92 = settings86.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean93 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings86);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params95 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = settings86.toXContent(xContentBuilder94, params95);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder97 = indexMetaData0.toXContent(xContentBuilder76, params95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertEquals("'" + boolean92 + "' != '" + false + "'", boolean92, false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(params95);
        org.junit.Assert.assertNull(xContentBuilder96);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        java.lang.String str9 = builder6.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.settings(builder6);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder6.put("_na_", (double) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder6.put("10.0", (double) (-1.0f));
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("", (long) (short) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = settings2.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getAsGroups();
        java.lang.String[] strArray13 = settings7.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings7.filter(strPredicate14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings6.applySettings(settings15);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings6.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        indexScopedSettings6.validate(builder18);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        boolean boolean32 = indexScopedSettings6.updateDynamicSettings(settings21, builder28, builder29, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings41 = builder40.build();
        java.lang.String str43 = builder40.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder49.putProperties(strMap55, strPredicate57, strFunction58);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putProperties(strMap38, strPredicate57, strFunction60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings5, strPredicate57, indexScopedSettings62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        java.util.Set<java.lang.String> strSet76 = null; // flaky: indexMetaData1.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings77 = indexMetaData1.getSettings();
        java.util.Set<java.lang.String> strSet79 = indexMetaData1.activeAllocationIds(0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet81 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 10, indexMetaData1, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strSet79);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxResultWindow();
        java.lang.String str79 = null; // flaky: indexSettings72.getNodeName();
        java.lang.String str80 = null; // flaky: indexSettings72.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) (byte) 1, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        boolean boolean78 = false; // flaky: indexSettings72.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.auto_expand_replicas");
        int int4 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.setRoutingNumShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.removeAlias("archived.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.putMapping(mappingMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfReplicas((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getAsGroups();
        java.lang.String[] strArray25 = settings19.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings19.filter(strPredicate26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings18.applySettings(settings27);
        java.lang.String str30 = settings27.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings33 = builder32.build();
        java.lang.String str35 = builder32.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder32.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("", 10L);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings46.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings46.getAsGroups();
        java.lang.String[] strArray53 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray55 = settings46.getAsArray("index.creation_date_string", strArray53, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder44.putArray("state-", strArray55);
        java.lang.String[] strArray58 = settings27.getAsArray("false", strArray55, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder16.putArray("index.priority", strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder16.loadFromSource("index.number_of_replicas");
        java.lang.String str63 = builder61.get("index.creation_date");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        org.elasticsearch.Version version75 = null; // flaky: indexSettings72.getIndexVersionCreated();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamInput streamInput77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = indexMetaData76.readFrom(streamInput77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertNotNull(version75);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData76);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig73 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        java.lang.Boolean boolean76 = null; // flaky: indexSettings72.getValue(booleanSetting75);
        int int77 = 0; // flaky: indexSettings72.getMaxRescoreWindow();
        boolean boolean78 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig73);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertNotNull(booleanSetting75);
// flaky:         org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + false + "'", boolean76, false);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10000 + "'", int77 == 10000);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder25.removeAllAliases();
        long long27 = builder26.version();
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder26.settings(builder37);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = builder38.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder77.index("index.version.created");
        long long83 = builder77.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(builder2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder5.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet14);
        int int17 = builder5.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder5.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder5.state(state20);
        byte byte22 = state20.id();
        byte byte23 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.state(state20);
        java.lang.String str26 = builder1.index();
        java.lang.String str27 = builder1.index();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 1 + "'", byte22 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 1 + "'", byte23 == (byte) 1);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index.priority" + "'", str26, "index.priority");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "index.priority" + "'", str27, "index.priority");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        java.lang.String[] strArray15 = settings9.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings9.getAsGroups(false);
        java.lang.String[] strArray19 = settings9.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder6.extendArray("index.blocks.write", strArray19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.settings(builder20);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder20.put("index.version.upgraded", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.version.upgraded", 100L);
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.put("index.creation_date", (long) '4', timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        java.lang.String[] strArray15 = settings9.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings9.getAsGroups(false);
        java.lang.String[] strArray19 = settings9.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder6.extendArray("index.blocks.write", strArray19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.settings(builder20);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder20.put("index.version.upgraded", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.version.upgraded", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("primary_terms", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.version.upgraded", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put("index.version.created_string", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.version.upgraded", (float) '#');
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        java.lang.String[] strArray15 = settings9.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings9.getAsGroups(false);
        java.lang.String[] strArray19 = settings9.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder6.extendArray("index.blocks.write", strArray19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.settings(builder20);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder20.put("index.version.upgraded", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.version.upgraded", 100L);
        java.io.InputStream inputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.loadFromStream("archived.", inputStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters94 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData96 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData98 = indexMetaData0.mapping("");
        org.apache.lucene.util.Version version99 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(discoveryNodeFilters94);
        org.junit.Assert.assertNull(mappingMetaData96);
        org.junit.Assert.assertNull(mappingMetaData98);
        org.junit.Assert.assertNull(version99);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = null; // flaky: indexSettings72.getFlushThresholdSize();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        boolean boolean78 = false; // flaky: indexSettings72.matchesIndexName("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put(strMap8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("active_allocations", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder6.put("index.data_path", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings18 = builder17.build();
        java.lang.String str20 = builder17.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        java.lang.String str30 = builder27.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder31.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put(strMap32);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction35 = null;
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder26.putProperties(strMap32, strPredicate34, strFunction35);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("state-");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = settings39.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder38.put(settings39);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        boolean boolean45 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings44);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder38.put(settings44);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings49 = builder48.build();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = settings49.getAsMap();
        java.lang.Class<?> wildcardClass51 = strMap50.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("index.", (java.lang.Class) wildcardClass51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings55 = builder54.build();
        java.util.Map<java.lang.String, java.lang.String> strMap56 = settings55.getAsMap();
        java.lang.Class<?> wildcardClass57 = strMap56.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.put("index.", (java.lang.Class) wildcardClass57);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder6.put("index.version.created_string", (java.lang.Class) wildcardClass57);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("state-");
        org.elasticsearch.common.settings.Settings settings5 = settings1.getByPrefix("index.shared_filesystem");
        boolean boolean6 = settings1.isEmpty();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.state(state9);
        boolean boolean11 = settings1.equals((java.lang.Object) builder10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean74 = indexMetaData0.isSameUUID("index.blocks.metadata");
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long77 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.Settings.Builder builder79 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap80 = builder79.internalMap();
        java.lang.String str82 = builder79.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder79.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder85.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder89 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings90 = builder89.build();
        org.elasticsearch.common.settings.Settings settings92 = settings90.getByPrefix("state-");
        java.lang.String[] strArray94 = settings90.getAsArray("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder85.putArray("index.blocks.metadata", strArray94);
        org.elasticsearch.common.settings.Settings settings96 = builder85.build();
        org.elasticsearch.index.IndexSettings indexSettings97 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings96);
        java.util.Set<java.lang.String> strSet98 = settings96.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap99 = settings96.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(settings96);
        org.junit.Assert.assertNotNull(strSet98);
        org.junit.Assert.assertNotNull(strMap99);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = null; // flaky: indexSettings72.getIndexMetaData();
        java.lang.String str78 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.settings.Settings settings79 = null; // flaky: indexSettings72.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_all" + "'", str78, "_all");
// flaky:         org.junit.Assert.assertNotNull(settings79);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        java.lang.String str9 = builder6.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.settings(builder6);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder6.put("_na_", (double) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        java.lang.String str20 = builder17.get("hi!");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = settings22.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        java.lang.String str28 = settings22.get("index.blocks.write", "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getAsGroups();
        java.lang.String[] strArray38 = settings32.getAsArray("index.data_path");
        java.lang.String[] strArray40 = settings30.getAsArray("index.version.minimum_compatible", strArray38, (java.lang.Boolean) true);
        java.lang.String[] strArray42 = settings22.getAsArray("index.version.created_string", strArray38, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder17.extendArray("", strArray42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder6.put((java.lang.Object[]) strArray42);
        java.lang.String str46 = builder6.get("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "index.blocks.read_only" + "'", str28, "index.blocks.read_only");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        java.lang.String[] strArray15 = settings9.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings9.getAsGroups(false);
        java.lang.String[] strArray19 = settings9.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder6.extendArray("index.blocks.write", strArray19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.settings(builder20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder3.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder3.removeAlias("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder27.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = builder27.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.state(state36);
        byte byte38 = state36.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder27.state(state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder25.state(state36);
        int int41 = builder40.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 1 + "'", byte38 == (byte) 1);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version94 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet96 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters97 = indexMetaData0.includeFilters();
        int int98 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(version94);
        org.junit.Assert.assertNull(strSet96);
        org.junit.Assert.assertNull(discoveryNodeFilters97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability77 = null; // flaky: indexSettings72.getTranslogDurability();
        int int78 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean79 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability77 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability77.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10.0");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings3 = builder2.build();
        java.lang.String str5 = builder2.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        java.lang.String str15 = builder12.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.put(strMap17);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction20 = null;
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder11.putProperties(strMap17, strPredicate19, strFunction20);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.internalMap();
        java.lang.String str25 = builder22.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.internalMap();
        java.lang.String str29 = builder26.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder26.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put(strMap34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings37 = builder36.build();
        java.lang.String str39 = builder36.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder36.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder36.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        java.lang.String str49 = builder46.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put(strMap51);
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction54 = null;
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder45.putProperties(strMap51, strPredicate53, strFunction54);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction56 = null;
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder22.putProperties(strMap34, strPredicate53, strFunction56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder58.internalMap();
        java.lang.String str61 = builder58.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.internalMap();
        java.lang.String str65 = builder62.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap67 = builder66.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder62.put(strMap67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap70 = builder69.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put(strMap70);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings73 = builder72.build();
        java.lang.String str75 = builder72.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder72.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder72.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder82 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap83 = builder82.internalMap();
        java.lang.String str85 = builder82.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder86 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap87 = builder86.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder82.put(strMap87);
        java.util.function.Predicate<java.lang.String> strPredicate89 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction90 = null;
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder81.putProperties(strMap87, strPredicate89, strFunction90);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction92 = null;
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder58.putProperties(strMap70, strPredicate89, strFunction92);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction94 = null;
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder11.putProperties(strMap34, strPredicate89, strFunction94);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder95.put("index.creation_date", (long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder99 = builder1.settings(builder98);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(strPredicate89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings7 = settings5.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.String str11 = settings5.get("index.blocks.write", "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getAsGroups();
        java.lang.String[] strArray21 = settings15.getAsArray("index.data_path");
        java.lang.String[] strArray23 = settings13.getAsArray("index.version.minimum_compatible", strArray21, (java.lang.Boolean) true);
        java.lang.String[] strArray25 = settings5.getAsArray("index.version.created_string", strArray21, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder0.extendArray("", strArray25);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.replacePropertyPlaceholders();
        java.lang.String str29 = builder0.remove("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.blocks.read_only" + "'", str11, "index.blocks.read_only");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.creation_date", true);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.putNull("");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder15.put(objDictionary18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings74 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = indexMetaData0.getState();
        byte byte77 = state76.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte77 + "' != '" + (byte) 0 + "'", byte77 == (byte) 0);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxResultWindow();
        java.lang.String str79 = null; // flaky: indexSettings72.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability80 = null; // flaky: indexSettings72.getTranslogDurability();
        java.lang.String str81 = null; // flaky: indexSettings72.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
// flaky:         org.junit.Assert.assertTrue("'" + durability80 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability80.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "_all" + "'", str81, "_all");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability77 = null; // flaky: indexSettings72.getTranslogDurability();
        int int78 = 0; // flaky: indexSettings72.getMaxRefreshListeners();
        boolean boolean79 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher80 = null; // flaky: indexSettings72.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability77 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability77.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1000 + "'", int78 == 1000);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher80);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings14 = builder13.build();
        java.lang.String str16 = builder13.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder13.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.internalMap();
        java.lang.String str28 = builder25.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put(strMap30);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder13.put(strMap30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getGroups("index.auto_expand_replicas", true);
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings41 = settings34.filter(strPredicate40);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder12.putProperties(strMap30, strPredicate40, strFunction42);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings45.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings45.getAsGroups();
        java.lang.String[] strArray51 = settings45.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.Settings settings53 = settings45.filter(strPredicate52);
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings44.applySettings(settings53);
        java.lang.String[] strArray56 = settings53.getAsArray("state-");
        java.lang.Boolean boolean59 = settings53.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean60 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings53);
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings53);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder12.put(settings53);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder12.put("index.version.upgraded_string", (int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap76 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        java.util.function.Predicate<java.lang.String> strPredicate87 = null;
        org.elasticsearch.common.settings.Settings settings88 = settings86.filter(strPredicate87);
        java.lang.String[] strArray90 = settings86.getAsArray("hi!");
        org.elasticsearch.index.IndexSettings indexSettings91 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput92 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strArray90);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData0.includeFilters();
        boolean boolean77 = indexMetaData0.isSameUUID("index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.creation_date", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.blocks.metadata", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings21 = builder20.build();
        java.lang.String str23 = builder20.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder20.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder20.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        java.lang.String str33 = builder30.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put(strMap35);
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction38 = null;
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder29.putProperties(strMap35, strPredicate37, strFunction38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.putNull("state-");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings43 = builder42.build();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = settings43.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction46 = null;
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder39.putProperties(strMap44, strPredicate45, strFunction46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings50.getAsGroups();
        java.lang.String[] strArray56 = settings50.getAsArray("index.data_path");
        java.lang.String[] strArray58 = settings48.getAsArray("index.version.minimum_compatible", strArray56, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder39.put((java.lang.Object[]) strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder18.extendArray("index.number_of_shards", strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder18.putNull("false");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap76 = indexMetaData0.getAliases();
        int int77 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.Version version78 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(version78);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput76 = null;
        // The following exception was thrown during execution in test generation
        try {
            mappingMetaData75.writeTo(streamOutput76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder0.replacePropertyPlaceholders();
        java.lang.Class<?> wildcardClass11 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder0.put("_na_", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings14 = builder13.build();
        java.lang.String str16 = builder13.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder13.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        java.lang.String str26 = builder23.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.put(strMap28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder22.putProperties(strMap28, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getAsGroups();
        java.lang.String[] strArray40 = settings34.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings34.filter(strPredicate41);
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings33.applySettings(settings42);
        java.lang.String[] strArray45 = settings42.getAsArray("state-");
        java.lang.Boolean boolean48 = settings42.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings49.getGroups("index.auto_expand_replicas", true);
        boolean boolean53 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings49);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings56 = settings49.filter(strPredicate55);
        org.elasticsearch.common.settings.Settings settings57 = settings42.filter(strPredicate55);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder0.putProperties(strMap28, strPredicate55, strFunction58);
        java.nio.file.Path path60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder61 = builder0.loadFromPath(path60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + false + "'", boolean48, false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = settings10.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = settings14.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getAsGroups();
        java.lang.String[] strArray25 = settings19.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings19.filter(strPredicate26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings18.applySettings(settings27);
        org.elasticsearch.common.settings.Setting.Property property29 = indexScopedSettings18.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        indexScopedSettings18.validate(builder30);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings35 = builder34.build();
        java.lang.String str37 = builder34.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        boolean boolean44 = indexScopedSettings18.updateDynamicSettings(settings33, builder40, builder41, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        java.lang.String str48 = builder45.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder45.put(strMap50);
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings53 = builder52.build();
        java.lang.String str55 = builder52.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.internalMap();
        java.lang.String str65 = builder62.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap67 = builder66.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder62.put(strMap67);
        java.util.function.Predicate<java.lang.String> strPredicate69 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder61.putProperties(strMap67, strPredicate69, strFunction70);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction72 = null;
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder41.putProperties(strMap50, strPredicate69, strFunction72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings75.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings75.getAsGroups();
        java.lang.String[] strArray81 = settings75.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.Settings settings83 = settings75.filter(strPredicate82);
        org.elasticsearch.common.settings.Settings settings84 = indexScopedSettings74.applySettings(settings83);
        org.elasticsearch.index.IndexSettings indexSettings85 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData13, settings17, strPredicate69, indexScopedSettings74);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters86 = indexMetaData13.getInitialRecoveryFilters();
        org.elasticsearch.Version version87 = indexMetaData13.getCreationVersion();
        org.elasticsearch.Version version88 = settings10.getAsVersion("index.shared_filesystem.recover_on_any_node", version87);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue91 = settings10.getAsMemory("index.blocks.read", "false");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.read] with value [false] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + property29 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property29.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strPredicate69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNull(discoveryNodeFilters86);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertNotNull(version88);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("0", custom5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.primaryTerm((int) (byte) 100, (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        int int22 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.setRoutingNumShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder21.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings30.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder29.settings(settings30);
        org.elasticsearch.common.settings.Settings settings37 = settings30.getByPrefix("index.blocks.write");
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings37);
        java.util.Set<java.lang.String> strSet39 = settings37.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder26.putActiveAllocationIds(52, strSet39);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getAsGroups();
        java.lang.String[] strArray47 = settings41.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings41.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings40.applySettings(settings49);
        java.lang.String[] strArray52 = settings49.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings54 = builder53.build();
        java.lang.String str56 = builder53.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        org.elasticsearch.common.settings.Setting.Property property71 = indexScopedSettings60.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder72.internalMap();
        indexScopedSettings60.validate(builder72);
        boolean boolean76 = indexScopedSettings0.updateSettings(settings49, builder59, builder72, "");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder77.put("false", (double) 10000);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("archived.", false);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder80.loadFromSource("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + property71 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property71.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.version((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder18.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = builder18.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = settings2.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getAsGroups();
        java.lang.String[] strArray13 = settings7.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings7.filter(strPredicate14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings6.applySettings(settings15);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings6.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        indexScopedSettings6.validate(builder18);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        boolean boolean32 = indexScopedSettings6.updateDynamicSettings(settings21, builder28, builder29, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings41 = builder40.build();
        java.lang.String str43 = builder40.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder49.putProperties(strMap55, strPredicate57, strFunction58);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putProperties(strMap38, strPredicate57, strFunction60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings5, strPredicate57, indexScopedSettings62);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData1.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData1.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData80 = indexMetaData1.mappingOrDefault("index.priority");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet82 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(100, indexMetaData1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (0) must be greater than the shard id: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertNull(mappingMetaData80);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) (short) 1);
        int int4 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("archived.");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.priority", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "archived.", "index.shared_filesystem", "index.shadow_replicas", "index.data_path" };
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder9.putArray("index.data_path", strArray15);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.put("index.version.upgraded", true);
        java.io.InputStream inputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.loadFromStream("state-", inputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        java.lang.String str20 = builder17.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder21.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.put(strMap22);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put(strMap25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getAsGroups();
        java.lang.String[] strArray33 = settings27.getAsArray("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.internalMap();
        java.lang.String str37 = builder34.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        java.lang.String str41 = builder38.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder42.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder38.put(strMap43);
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put(strMap46);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings49 = builder48.build();
        java.lang.String str51 = builder48.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder48.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder58.internalMap();
        java.lang.String str61 = builder58.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder58.put(strMap63);
        java.util.function.Predicate<java.lang.String> strPredicate65 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction66 = null;
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder57.putProperties(strMap63, strPredicate65, strFunction66);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder34.putProperties(strMap46, strPredicate65, strFunction68);
        org.elasticsearch.common.settings.Settings settings70 = settings27.filter(strPredicate65);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction71 = null;
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder12.putProperties(strMap25, strPredicate65, strFunction71);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder72.putNull("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strPredicate65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean74 = indexMetaData0.isSameUUID("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings78 = settings76.getByPrefix("active_allocations");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings78.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap79);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.creation_date", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.blocks.metadata", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings21 = builder20.build();
        java.lang.String str23 = builder20.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder20.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder20.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        java.lang.String str33 = builder30.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put(strMap35);
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction38 = null;
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder29.putProperties(strMap35, strPredicate37, strFunction38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.putNull("state-");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings43 = builder42.build();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = settings43.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction46 = null;
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder39.putProperties(strMap44, strPredicate45, strFunction46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings50.getAsGroups();
        java.lang.String[] strArray56 = settings50.getAsArray("index.data_path");
        java.lang.String[] strArray58 = settings48.getAsArray("index.version.minimum_compatible", strArray56, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder39.put((java.lang.Object[]) strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder18.extendArray("index.number_of_shards", strArray58);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = builder18.internalMap();
        java.lang.String str63 = builder18.remove("index.number_of_shards");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder67 = builder18.put("index.blocks.read_only", (long) 1, byteSizeUnit66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap88 = settings79.getGroups("index.blocks.write");
        java.util.Map<java.lang.String, java.lang.String> strMap89 = settings79.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNotNull(strMap89);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings75 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int77 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder78, params79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        int int76 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = settings2.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getAsGroups();
        java.lang.String[] strArray13 = settings7.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings7.filter(strPredicate14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings6.applySettings(settings15);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings6.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        indexScopedSettings6.validate(builder18);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        boolean boolean32 = indexScopedSettings6.updateDynamicSettings(settings21, builder28, builder29, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings41 = builder40.build();
        java.lang.String str43 = builder40.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder49.putProperties(strMap55, strPredicate57, strFunction58);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putProperties(strMap38, strPredicate57, strFunction60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings5, strPredicate57, indexScopedSettings62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.common.settings.Settings settings75 = indexMetaData1.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet78 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 1, indexMetaData1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings75);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.index("");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings0.get("primary_terms");
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting16 = indexScopedSettings0.get("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(wildcardSetting16);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap76 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.putAlias(aliasMetaData78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap76);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.internalMap();
        java.lang.String str5 = builder2.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put(strMap7);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put(strMap7);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.auto_expand_replicas", true);
        java.lang.String str16 = settings10.get("index.version.created_string", "index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        java.lang.String str20 = builder17.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder21.internalMap();
        java.lang.String str24 = builder21.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put(strMap26);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put(strMap29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings32 = builder31.build();
        java.lang.String str34 = builder31.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder31.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        java.lang.String str44 = builder41.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder41.put(strMap46);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction49 = null;
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder40.putProperties(strMap46, strPredicate48, strFunction49);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction51 = null;
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder17.putProperties(strMap29, strPredicate48, strFunction51);
        org.elasticsearch.common.settings.Settings settings53 = settings10.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder0.put(settings53);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder54.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.normalizePrefix("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder55.put("index.priority", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.creation_date_string" + "'", str16, "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings73.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings73.getAsGroups();
        java.lang.String[] strArray79 = settings73.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.Settings settings81 = settings73.filter(strPredicate80);
        java.util.Map<java.lang.String, java.lang.String> strMap82 = settings81.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters86 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput87 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNull(discoveryNodeFilters86);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.blocks.metadata", custom5);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder1.index("primary_terms");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.putMapping("index.shared_filesystem.recover_on_any_node", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings75 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput77 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue79 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(timeValue79);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet80 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long82 = builder81.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.");
        long long4 = builder1.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("index.shared_filesystem.recover_on_any_node", custom5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.putMapping("index.shared_filesystem", "index.version.minimum_compatible");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings11.getAsGroups();
        java.lang.String[] strArray17 = settings11.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings11.filter(strPredicate18);
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings10.applySettings(settings19);
        java.lang.String[] strArray22 = settings19.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings24.getAsGroups();
        java.lang.String[] strArray30 = settings24.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings24.filter(strPredicate31);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        org.elasticsearch.common.unit.TimeValue timeValue36 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue37 = settings32.getAsTime("index.auto_expand_replicas", timeValue36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = settings19.getAsTime("index.auto_expand_replicas", timeValue37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder0.put(settings19);
        org.elasticsearch.common.settings.Settings settings41 = settings19.getByPrefix("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue44 = settings19.getAsMemory("index.blocks.read", "index.creation_date_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [index.creation_date_string]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings41);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean75 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig76 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig76);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.lang.String str6 = settings0.get("index.version.created_string", "index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings8.getAsGroups();
        java.lang.String[] strArray14 = settings8.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings8.filter(strPredicate15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String[] strArray20 = settings16.getAsArray("hi!");
        java.util.Set<java.lang.String> strSet21 = settings16.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings24.getAsGroups();
        java.lang.String[] strArray30 = settings24.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings24.filter(strPredicate31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings23.applySettings(settings32);
        java.lang.String[] strArray35 = settings32.getAsArray("state-");
        java.lang.Boolean boolean38 = settings32.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params41 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = settings32.toXContent(xContentBuilder40, params41);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = settings16.toXContent(xContentBuilder22, params41);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings0.toXContent(xContentBuilder7, params41);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.creation_date_string" + "'", str6, "index.creation_date_string");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + false + "'", boolean38, false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(params41);
        org.junit.Assert.assertNull(xContentBuilder42);
        org.junit.Assert.assertNull(xContentBuilder43);
        org.junit.Assert.assertNull(xContentBuilder44);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        java.lang.String str75 = null; // flaky: indexSettings72.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "_all" + "'", str75, "_all");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getAsGroups();
        java.lang.String[] strArray47 = settings41.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings41.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings40.applySettings(settings49);
        java.lang.String[] strArray52 = settings49.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings54 = builder53.build();
        java.lang.String str56 = builder53.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        org.elasticsearch.common.settings.Setting.Property property71 = indexScopedSettings60.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder72.internalMap();
        indexScopedSettings60.validate(builder72);
        boolean boolean76 = indexScopedSettings0.updateSettings(settings49, builder59, builder72, "");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder77.put("false", (double) 10000);
        java.io.InputStream inputStream82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.loadFromStream("index.creation_date_string", inputStream82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + property71 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property71.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap76 = indexMetaData0.getAliases();
        java.lang.String str77 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap78 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder81.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder81.version((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder94.numberOfShards((int) (short) 0);
        boolean boolean97 = indexMetaData0.equals((java.lang.Object) (short) 0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap98 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "_na_" + "'", str77, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap98);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getAsGroups();
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        java.lang.String str10 = settings0.get("index.priority", "archived.");
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "archived." + "'", str10, "archived.");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", false);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder6.put("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a", (float) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.Version version79 = null; // flaky: indexSettings72.getIndexVersionCreated();
        org.elasticsearch.index.translog.Translog.Durability durability80 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue81 = null; // flaky: indexSettings72.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(version79);
// flaky:         org.junit.Assert.assertTrue("'" + durability80 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability80.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue81);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getAsGroups();
        java.lang.String[] strArray23 = settings17.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings16.applySettings(settings25);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = settings26.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder15.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getAsGroups();
        java.lang.String[] strArray38 = settings32.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings32.filter(strPredicate39);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings31.applySettings(settings40);
        java.lang.String[] strArray43 = settings40.getAsArray("state-");
        java.lang.Boolean boolean46 = settings40.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getGroups("index.auto_expand_replicas", true);
        boolean boolean51 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings54 = settings47.filter(strPredicate53);
        org.elasticsearch.common.settings.Settings settings55 = settings40.filter(strPredicate53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder30.settings(settings40);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings40.getGroups("_all", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings40.getAsGroups(false);
        java.lang.String str63 = settings40.get("index.data_path");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + boolean46 + "' != '" + false + "'", boolean46, false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.hasCustomDataPath();
        java.lang.String str75 = null; // flaky: indexSettings72.customDataPath();
        boolean boolean76 = false; // flaky: indexSettings72.hasCustomDataPath();
        long long77 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        boolean boolean78 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 60000L + "'", long77 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings2.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings2);
        org.elasticsearch.common.settings.Settings settings9 = settings2.getByPrefix("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings11 = settings9.getAsSettings("index.creation_date");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("hi!", false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getAsGroups();
        java.lang.String[] strArray22 = settings16.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings16.filter(strPredicate23);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.Settings settings26 = settings24.filter(strPredicate25);
        java.lang.String str29 = settings26.get("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getAsGroups();
        java.lang.String[] strArray37 = settings31.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings31.filter(strPredicate38);
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings39.filter(strPredicate40);
        java.lang.String[] strArray43 = settings39.getAsArray("hi!");
        java.util.Set<java.lang.String> strSet44 = settings39.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings47.getAsGroups();
        java.lang.String[] strArray53 = settings47.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings47.filter(strPredicate54);
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings46.applySettings(settings55);
        java.lang.String[] strArray58 = settings55.getAsArray("state-");
        java.lang.Boolean boolean61 = settings55.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean62 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings55);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings55.toXContent(xContentBuilder63, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings39.toXContent(xContentBuilder45, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings26.toXContent(xContentBuilder30, params64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = settings11.toXContent(xContentBuilder15, params64);
        java.util.Set<java.lang.String> strSet69 = settings11.names();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings11, streamOutput70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "index.shared_filesystem" + "'", str29, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertEquals("'" + boolean61 + "' != '" + false + "'", boolean61, false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNull(xContentBuilder68);
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.internalMap();
        java.lang.String str5 = builder2.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("_na_", 1.0d);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.putArray("_na_", strArray10);
        indexScopedSettings1.validate(builder11);
        indexScopedSettings0.validate(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings16 = builder15.build();
        java.lang.String str18 = builder15.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder15.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        java.lang.String str30 = builder27.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder31.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put(strMap32);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder25.put(strMap32);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder15.put(strMap32);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder15.put("index.shadow_replicas", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        java.lang.String str43 = builder40.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put(strMap48);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("active_allocations", 0.0f);
        java.lang.String[] strArray81 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read", "false", "index.version.upgraded", "index.uuid", "index.version.created_string", "index.creation_date_string", "index.", "index.version.created", "index.uuid", "index.number_of_replicas", "index.auto_expand_replicas", "active_allocations", "index.priority", "index.blocks.metadata", "_na_", "index.blocks.read_only", "index.priority", "index.version.created_string", "index.auto_expand_replicas", "hi!", "index.version.minimum_compatible", "index.blocks.write", "index.version.created_string", "index.shared_filesystem.recover_on_any_node", "index.creation_date", "index.blocks.read" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder52.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList82);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder38.putArray("index.version.created_string", (java.util.List<java.lang.String>) strList82);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder11.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList82);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version76 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version76);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        java.lang.String[] strArray12 = settings9.getAsArray("state-");
        java.lang.Boolean boolean15 = settings9.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.settings.Settings settings18 = settings9.getByPrefix("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings9.getAsGroups(false);
        java.util.Set<java.lang.String> strSet21 = settings9.names();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue24 = settings9.getAsRatio("primary_terms", "index.uuid");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.uuid]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getAsGroups();
        java.lang.String[] strArray23 = settings17.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings16.applySettings(settings25);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = settings26.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder15.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getAsGroups();
        java.lang.String[] strArray38 = settings32.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings32.filter(strPredicate39);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings31.applySettings(settings40);
        java.lang.String[] strArray43 = settings40.getAsArray("state-");
        java.lang.Boolean boolean46 = settings40.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getGroups("index.auto_expand_replicas", true);
        boolean boolean51 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings54 = settings47.filter(strPredicate53);
        org.elasticsearch.common.settings.Settings settings55 = settings40.filter(strPredicate53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder30.settings(settings40);
        java.lang.String str57 = builder56.index();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + boolean46 + "' != '" + false + "'", boolean46, false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        java.lang.String str9 = builder6.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.settings(builder6);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder6.put("_na_", (double) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder6.put("index.shared_filesystem.recover_on_any_node", (float) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = settings22.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings27.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getAsGroups();
        java.lang.String[] strArray33 = settings27.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.common.settings.Settings settings35 = settings27.filter(strPredicate34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings26.applySettings(settings35);
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings26.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        indexScopedSettings26.validate(builder38);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings43 = builder42.build();
        java.lang.String str45 = builder42.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        boolean boolean52 = indexScopedSettings26.updateDynamicSettings(settings41, builder48, builder49, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        java.lang.String str56 = builder53.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap58 = builder57.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put(strMap58);
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings61 = builder60.build();
        java.lang.String str63 = builder60.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder60.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder60.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder70 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap71 = builder70.internalMap();
        java.lang.String str73 = builder70.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder74 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap75 = builder74.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder70.put(strMap75);
        java.util.function.Predicate<java.lang.String> strPredicate77 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction78 = null;
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder69.putProperties(strMap75, strPredicate77, strFunction78);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder49.putProperties(strMap58, strPredicate77, strFunction80);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap86 = settings83.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap87 = settings83.getAsGroups();
        java.lang.String[] strArray89 = settings83.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate90 = null;
        org.elasticsearch.common.settings.Settings settings91 = settings83.filter(strPredicate90);
        org.elasticsearch.common.settings.Settings settings92 = indexScopedSettings82.applySettings(settings91);
        org.elasticsearch.index.IndexSettings indexSettings93 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings25, strPredicate77, indexScopedSettings82);
        boolean boolean94 = false; // flaky: indexSettings93.isQueryStringAnalyzeWildcard();
        java.lang.String str95 = null; // flaky: indexSettings93.getNodeName();
        org.elasticsearch.Version version96 = null; // flaky: indexSettings93.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings.Builder builder97 = null; // flaky: builder19.put("hi!", version96);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strPredicate77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
// flaky:         org.junit.Assert.assertNotNull(version96);
// flaky:         org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap76 = indexMetaData0.getActiveAllocationIds();
        java.lang.String str77 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.io.stream.StreamInput streamInput78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff79 = indexMetaData0.readDiffFrom(streamInput78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "_na_" + "'", str77, "_na_");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet78 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.Version version79 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap80 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertNotNull(strImmutableOpenMap80);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String str89 = settings86.get("index.creation_date");
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        java.lang.String str91 = indexSettings90.getDefaultField();
        int int92 = indexSettings90.getNumberOfShards();
        int int93 = indexSettings90.getMaxRefreshListeners();
        org.elasticsearch.common.unit.TimeValue timeValue94 = indexSettings90.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "_all" + "'", str91, "_all");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1000 + "'", int93 == 1000);
        org.junit.Assert.assertNotNull(timeValue94);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        java.lang.String str12 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings14 = builder13.build();
        java.lang.String str16 = builder13.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder13.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        java.lang.String str26 = builder23.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.put(strMap28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder22.putProperties(strMap28, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("state-");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = settings35.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder42.internalMap();
        java.lang.String str45 = builder42.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromSource("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings53 = builder52.build();
        java.lang.String str55 = builder52.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put("index.shared_filesystem", "active_allocations");
        boolean boolean63 = indexScopedSettings0.updateDynamicSettings(settings35, builder51, builder61, "_all");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting65 = indexScopedSettings0.get("hi!");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean69 = settings66.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings66.getGroups("", true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardSetting65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNotNull(settings70);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        int int77 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version78 = indexMetaData0.getCreationVersion();
        int int79 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(version78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.normalizePrefix("active_allocations");
        java.lang.String str20 = builder12.remove("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder12.loadFromSource("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings3.getGroups("state-", false);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.internalMap();
        java.lang.String str14 = builder11.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.loadFromSource("index.uuid");
        java.lang.String str24 = builder20.get("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder20.internalMap();
        java.lang.String str27 = builder20.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getAsGroups();
        java.lang.String[] strArray37 = settings31.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings31.getAsGroups(false);
        java.lang.String[] strArray41 = settings31.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder28.extendArray("index.blocks.write", strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder28.put("index.number_of_replicas", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        java.lang.String str49 = builder46.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("primary_terms", false);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder52.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder28.put(strMap56);
        boolean boolean59 = indexScopedSettings0.updateSettings(settings3, builder20, builder57, "index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder57.normalizePrefix("index.blocks.write");
        java.lang.String str63 = builder61.remove("0");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "false" + "'", str24, "false");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings7 = settings0.filter(strPredicate6);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings7.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings14 = settings12.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getAsGroups();
        java.lang.String[] strArray23 = settings17.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings16.applySettings(settings25);
        org.elasticsearch.common.settings.Setting.Property property27 = indexScopedSettings16.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        indexScopedSettings16.validate(builder28);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings33 = builder32.build();
        java.lang.String str35 = builder32.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder39.internalMap();
        boolean boolean42 = indexScopedSettings16.updateDynamicSettings(settings31, builder38, builder39, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder43.internalMap();
        java.lang.String str46 = builder43.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put(strMap48);
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings51 = builder50.build();
        java.lang.String str53 = builder50.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder50.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap61 = builder60.internalMap();
        java.lang.String str63 = builder60.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = builder64.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder60.put(strMap65);
        java.util.function.Predicate<java.lang.String> strPredicate67 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder59.putProperties(strMap65, strPredicate67, strFunction68);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder39.putProperties(strMap48, strPredicate67, strFunction70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings73.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings73.getAsGroups();
        java.lang.String[] strArray79 = settings73.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.Settings settings81 = settings73.filter(strPredicate80);
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings72.applySettings(settings81);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings15, strPredicate67, indexScopedSettings72);
        boolean boolean84 = false; // flaky: indexSettings83.isQueryStringAnalyzeWildcard();
        boolean boolean85 = false; // flaky: indexSettings83.hasCustomDataPath();
        boolean boolean86 = false; // flaky: indexSettings83.isShadowReplicaIndex();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue87 = null; // flaky: indexSettings83.getFlushThresholdSize();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue88 = settings7.getAsBytesSize("index.version.upgraded_string", byteSizeValue87);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + property27 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property27.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue87);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue88);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray6 = settings0.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings0.filter(strPredicate7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = settings8.getAsBytesSize("index.shared_filesystem", byteSizeValue12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings8.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = settings16.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings21.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings21.getAsGroups();
        java.lang.String[] strArray27 = settings21.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.common.settings.Settings settings29 = settings21.filter(strPredicate28);
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings20.applySettings(settings29);
        org.elasticsearch.common.settings.Setting.Property property31 = indexScopedSettings20.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        indexScopedSettings20.validate(builder32);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings37 = builder36.build();
        java.lang.String str39 = builder36.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder36.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder43.internalMap();
        boolean boolean46 = indexScopedSettings20.updateDynamicSettings(settings35, builder42, builder43, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        java.lang.String str50 = builder47.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap52 = builder51.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder47.put(strMap52);
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings55 = builder54.build();
        java.lang.String str57 = builder54.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder54.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder54.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = builder64.internalMap();
        java.lang.String str67 = builder64.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap69 = builder68.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder64.put(strMap69);
        java.util.function.Predicate<java.lang.String> strPredicate71 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction72 = null;
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder63.putProperties(strMap69, strPredicate71, strFunction72);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction74 = null;
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder43.putProperties(strMap52, strPredicate71, strFunction74);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings76 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings77.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings77.getAsGroups();
        java.lang.String[] strArray83 = settings77.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate84 = null;
        org.elasticsearch.common.settings.Settings settings85 = settings77.filter(strPredicate84);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings76.applySettings(settings85);
        org.elasticsearch.index.IndexSettings indexSettings87 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings19, strPredicate71, indexScopedSettings76);
        boolean boolean88 = false; // flaky: indexSettings87.isQueryStringAnalyzeWildcard();
        int int89 = 0; // flaky: indexSettings87.getNumberOfShards();
        boolean boolean90 = false; // flaky: indexSettings87.isQueryStringLenient();
        java.lang.String str91 = null; // flaky: indexSettings87.getUUID();
        org.elasticsearch.common.settings.Settings settings92 = null; // flaky: indexSettings87.getNodeSettings();
        int int93 = 0; // flaky: indexSettings87.getMaxResultWindow();
        boolean boolean94 = settings8.equals((java.lang.Object) int93);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap96 = settings8.getAsGroups(false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(byteSizeValue13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + property31 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property31.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strPredicate71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(indexScopedSettings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "_na_" + "'", str91, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings92);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10000 + "'", int93 == 10000);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strMap96);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder33.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet42);
        int int46 = builder45.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder60.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder57.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder50.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder25.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder74.removeAlias("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder76.putMapping(mappingMetaData77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet78 = indexMetaData0.activeAllocationIds(0);
        long long79 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder80.removeAllAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int94 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray6 = settings0.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings0.filter(strPredicate7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String[] strArray12 = settings8.getAsArray("hi!");
        java.util.Set<java.lang.String> strSet13 = settings8.names();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue16 = settings8.getAsRatio("10.0", "active_allocations");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [active_allocations]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", false);
        java.lang.String str11 = builder9.get("_all");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings13 = builder12.build();
        java.lang.String str15 = builder12.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.internalMap();
        java.lang.String str25 = builder22.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put(strMap27);
        java.util.function.Predicate<java.lang.String> strPredicate29 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction30 = null;
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder21.putProperties(strMap27, strPredicate29, strFunction30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder21.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder9.put(strMap32);
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.loadFromStream("state-", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder3.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet12);
        int int15 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder3.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.state(state18);
        byte byte20 = state18.id();
        byte byte21 = state18.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.state(state18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.index("_na_");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.putMapping(mappingMetaData25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 1 + "'", byte20 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 1 + "'", byte21 == (byte) 1);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean74 = indexMetaData0.isSameUUID("index.blocks.metadata");
        int int75 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData0.getMappings();
        int int75 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long77 = builder76.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability77 = null; // flaky: indexSettings72.getTranslogDurability();
        int int78 = 0; // flaky: indexSettings72.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings79 = null; // flaky: indexSettings72.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue82 = null; // flaky: settings79.getAsMemory("index.data_path", "");
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.data_path] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability77 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability77.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
// flaky:         org.junit.Assert.assertNotNull(settings79);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder77.index("index.version.created");
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings85 = settings83.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings83);
        org.elasticsearch.common.settings.Settings settings88 = settings86.getByPrefix("_na_");
        java.util.Set<java.lang.String> strSet89 = settings86.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder77.putActiveAllocationIds((int) (byte) 1, strSet89);
        int int91 = builder77.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.Version version78 = null; // flaky: indexSettings72.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertNotNull(version78);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        java.lang.String[] strArray9 = settings3.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings3.getAsGroups(false);
        java.lang.String[] strArray13 = settings3.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder0.extendArray("index.blocks.write", strArray13);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("_na_");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder14.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        int int75 = 0; // flaky: indexSettings72.getMaxResultWindow();
        long long76 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        boolean boolean77 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 60000L + "'", long76 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        org.elasticsearch.Version version75 = null; // flaky: indexSettings72.getIndexVersionCreated();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertNotNull(version75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings74 = indexMetaData0.getSettings();
        int int75 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff77 = indexMetaData0.readDiffFrom(streamInput76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig73 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        java.lang.Boolean boolean76 = null; // flaky: indexSettings72.getValue(booleanSetting75);
        java.lang.String str77 = null; // flaky: indexSettings72.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig73);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertNotNull(booleanSetting75);
// flaky:         org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + false + "'", boolean76, false);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings3.getGroups("state-", false);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.internalMap();
        java.lang.String str14 = builder11.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.loadFromSource("index.uuid");
        java.lang.String str24 = builder20.get("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder20.internalMap();
        java.lang.String str27 = builder20.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getAsGroups();
        java.lang.String[] strArray37 = settings31.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings31.getAsGroups(false);
        java.lang.String[] strArray41 = settings31.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder28.extendArray("index.blocks.write", strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder28.put("index.number_of_replicas", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        java.lang.String str49 = builder46.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("primary_terms", false);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder52.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder28.put(strMap56);
        boolean boolean59 = indexScopedSettings0.updateSettings(settings3, builder20, builder57, "index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder57.normalizePrefix("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        java.lang.String[] strArray73 = settings71.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder61.extendArray("hi!", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("active_allocations", (double) 10);
        java.util.concurrent.TimeUnit timeUnit80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder81 = builder74.put("", (long) 100, timeUnit80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "false" + "'", str24, "false");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet3 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(10, indexMetaData1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        org.elasticsearch.Version version76 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        int int79 = indexMetaData0.getTotalNumberOfShards();
        long long80 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder1.index("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.removeAllAliases();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = settings4.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        java.lang.String[] strArray15 = settings9.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.common.settings.Settings settings17 = settings9.filter(strPredicate16);
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings8.applySettings(settings17);
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings8.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.internalMap();
        indexScopedSettings8.validate(builder20);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings25 = builder24.build();
        java.lang.String str27 = builder24.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder31.internalMap();
        boolean boolean34 = indexScopedSettings8.updateDynamicSettings(settings23, builder30, builder31, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        java.lang.String str38 = builder35.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder39.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder35.put(strMap40);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings43 = builder42.build();
        java.lang.String str45 = builder42.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder42.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = builder52.internalMap();
        java.lang.String str55 = builder52.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = builder56.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put(strMap57);
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder51.putProperties(strMap57, strPredicate59, strFunction60);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction62 = null;
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder31.putProperties(strMap40, strPredicate59, strFunction62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings65.getAsGroups();
        java.lang.String[] strArray71 = settings65.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.Settings settings73 = settings65.filter(strPredicate72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings64.applySettings(settings73);
        org.elasticsearch.index.IndexSettings indexSettings75 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings7, strPredicate59, indexScopedSettings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters77 = indexMetaData3.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        int int79 = indexMetaData3.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.auto_expand_replicas", true);
        boolean boolean84 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings80);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings80);
        java.util.function.Predicate<java.lang.String> strPredicate86 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings87 = settings80.filter(strPredicate86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings80);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state89 = indexMetaData3.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder1.state(state89);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder90.primaryTerm((int) (short) 10, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(discoveryNodeFilters77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strPredicate86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertTrue("'" + state89 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state89.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder1.state(state16);
        java.lang.String str18 = builder17.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = builder17.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        java.lang.String[] strArray9 = settings3.getAsArray("index.data_path");
        java.lang.String[] strArray11 = settings1.getAsArray("index.version.minimum_compatible", strArray9, (java.lang.Boolean) true);
        indexScopedSettings0.validate(settings1);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = settings1.getAsStructuredMap();
        java.lang.String str15 = settings1.toDelimitedString('4');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings75 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder76.removeAlias("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder78.primaryTerm((int) (byte) -1, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean15 = settings12.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        indexScopedSettings0.validate(settings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        java.lang.String str21 = builder18.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.put("_na_", 1.0d);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.putArray("_na_", strArray26);
        indexScopedSettings17.validate(builder27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        indexScopedSettings17.validate(settings29);
        java.lang.String str35 = settings29.get("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        java.lang.String str41 = builder38.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder42.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder38.put(strMap43);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder36.put(strMap43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.loadFromSource("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap49 = builder48.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder48.put(strMap55);
        boolean boolean59 = indexScopedSettings0.updateDynamicSettings(settings29, builder47, builder57, "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder47.put("primary_terms", true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig73 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        java.lang.String str75 = null; // flaky: indexSettings72.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig73);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "_all" + "'", str75, "_all");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        java.lang.String str78 = null; // flaky: indexSettings72.getNodeName();
        boolean boolean80 = false; // flaky: indexSettings72.matchesIndexName("10.0");
        long long81 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        org.apache.lucene.index.MergePolicy mergePolicy82 = null; // flaky: indexSettings72.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 60000L + "'", long81 == 60000L);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy82);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet16);
        int int19 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder7.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.state(state22);
        byte byte24 = state22.id();
        byte byte25 = state22.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder5.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder3.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.version((long) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.numberOfReplicas(52);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 1 + "'", byte24 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 1 + "'", byte25 == (byte) 1);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        boolean boolean2 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        boolean boolean78 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings77);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings77);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters94 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters95 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters96 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.Settings settings97 = indexMetaData0.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            long long99 = indexMetaData0.primaryTerm(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(discoveryNodeFilters94);
        org.junit.Assert.assertNull(discoveryNodeFilters95);
        org.junit.Assert.assertNull(discoveryNodeFilters96);
        org.junit.Assert.assertNotNull(settings97);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String str89 = settings86.get("index.creation_date");
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        java.lang.String str91 = indexSettings90.getDefaultField();
        int int92 = indexSettings90.getNumberOfShards();
        int int93 = indexSettings90.getMaxRefreshListeners();
        long long94 = indexSettings90.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "_all" + "'", str91, "_all");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1000 + "'", int93 == 1000);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 60000L + "'", long94 == 60000L);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray7 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray9 = settings0.getAsArray("index.creation_date_string", strArray7, (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings0.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings0.getGroups("index.auto_expand_replicas", false);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = settings0.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings0.getAsGroups();
        org.elasticsearch.common.unit.SizeValue sizeValue17 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue18 = settings0.getAsSize("index.blocks.metadata", sizeValue17);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(sizeValue18);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings2 = settings0.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        java.lang.String[] strArray9 = settings3.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings3.filter(strPredicate10);
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        org.elasticsearch.common.unit.TimeValue timeValue15 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue16 = settings11.getAsTime("index.auto_expand_replicas", timeValue15);
        boolean boolean17 = settings2.equals((java.lang.Object) "index.auto_expand_replicas");
        java.lang.Boolean boolean20 = settings2.getAsBoolean("index.priority", (java.lang.Boolean) false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings2.getGroups("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap74 = indexMetaData0.getCustoms();
        long long75 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int77 = builder76.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfReplicas((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getAsGroups();
        java.lang.String[] strArray11 = settings5.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings5.filter(strPredicate12);
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings4.applySettings(settings13);
        org.elasticsearch.common.settings.Setting.Property property15 = indexScopedSettings4.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.internalMap();
        indexScopedSettings4.validate(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder16.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings23.getAsGroups();
        java.lang.String[] strArray29 = settings23.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings23.filter(strPredicate30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings22.applySettings(settings31);
        java.lang.String str34 = settings31.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings37 = builder36.build();
        java.lang.String str39 = builder36.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder36.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder36.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", 10L);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings50.getAsGroups();
        java.lang.String[] strArray57 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray59 = settings50.getAsArray("index.creation_date_string", strArray57, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder48.putArray("state-", strArray59);
        java.lang.String[] strArray62 = settings31.getAsArray("false", strArray59, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder20.putArray("index.priority", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder63.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder1.settings(builder63);
        java.util.Set<java.lang.String> strSet67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder65.putActiveAllocationIds((int) 'a', strSet67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + property15 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property15.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = null; // flaky: indexSettings72.getFlushThresholdSize();
        boolean boolean78 = false; // flaky: indexSettings72.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings79 = null; // flaky: indexSettings72.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertNotNull(settings79);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        java.lang.String[] strArray15 = settings9.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings9.getAsGroups(false);
        java.lang.String[] strArray19 = settings9.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder6.extendArray("index.blocks.write", strArray19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.settings(builder20);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder20.put("index.version.upgraded", (double) (short) 10);
        java.lang.String str26 = builder24.get("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10.0" + "'", str26, "10.0");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.minimum_compatible");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.minimum_compatible]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("archived.", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.creation_date_string");
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder4.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet78 = indexMetaData0.activeAllocationIds(0);
        long long79 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput81 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("state-");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = settings22.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.put(settings22);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder21.put("state-", (long) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.priority", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "archived.", "index.shared_filesystem", "index.shadow_replicas", "index.data_path" };
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder9.putArray("index.data_path", strArray15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder19.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet28);
        int int31 = builder19.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder19.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder19.state(state34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.state(state38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder19.state(state38);
        java.lang.Class<?> wildcardClass41 = state38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder16.put("_na_", (java.lang.Class) wildcardClass41);
        java.io.InputStream inputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder45 = builder16.loadFromStream("index.blocks.read", inputStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        int int76 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData0.mapping("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int81 = builder80.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(mappingMetaData79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        int int77 = 0; // flaky: indexSettings72.getNumberOfReplicas();
        boolean boolean79 = false; // flaky: indexSettings72.matchesIndexName("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        int int76 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap78 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap78);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.unit.SizeValue sizeValue2 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue3 = settings0.getAsSize("hi!", sizeValue2);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNull(sizeValue3);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.internalMap();
        java.lang.String str11 = builder8.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder8.put("_na_", 1.0d);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("_na_", strArray16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        java.lang.String[] strArray52 = new java.lang.String[] { "index.creation_date_string", "index.version.minimum_compatible", "index.version.created_string", "_na_", "index.shared_filesystem", "index.creation_date_string", "index.version.upgraded", "_na_", "index.data_path", "index.shadow_replicas", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "index.blocks.write", "index.priority", "index.blocks.metadata", "index.version.created", "index.auto_expand_replicas", "index.data_path", "index.data_path", "primary_terms", "index.uuid" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder22.putArray("archived.", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder17.putArray("", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder0.putArray("archived.", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        java.lang.String[] strArray72 = settings69.getAsArray("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings74.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings74.getAsGroups();
        java.lang.String[] strArray80 = settings74.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate81 = null;
        org.elasticsearch.common.settings.Settings settings82 = settings74.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings73.applySettings(settings82);
        java.lang.String[] strArray85 = settings82.getAsArray("state-");
        java.lang.String[] strArray87 = settings82.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder0.put("", "index.creation_date_string", strArray72, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder0.put("index.shared_filesystem.recover_on_any_node", (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder91.put("index.version.upgraded_string", 1.0d);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings17 = builder16.build();
        java.lang.String str19 = builder16.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        boolean boolean26 = indexScopedSettings0.updateDynamicSettings(settings15, builder22, builder23, "_na_");
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.loadFromStream("primary_terms", inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings0.get("primary_terms");
        java.lang.String str14 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getAsGroups();
        java.lang.String[] strArray23 = settings17.getAsArray("index.data_path");
        java.lang.String[] strArray25 = settings15.getAsArray("index.version.minimum_compatible", strArray23, (java.lang.Boolean) true);
        indexScopedSettings0.validate(settings15);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getAsGroups();
        java.lang.String[] strArray34 = settings28.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings28.getAsGroups(false);
        java.lang.String[] strArray38 = settings28.getAsArray("index.");
        java.lang.String str40 = settings28.toDelimitedString('a');
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("state-", settings28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [state-]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.Setting.Property property40 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting42 = indexScopedSettings0.get("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings43.getAsGroups();
        java.lang.String[] strArray50 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray52 = settings43.getAsArray("index.creation_date_string", strArray50, (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = settings43.getAsMap();
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings0.applySettings(settings43);
        java.lang.String str56 = settings43.toDelimitedString('4');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + property40 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property40.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNull(wildcardSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int76 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = indexMetaData0.toXContent(xContentBuilder77, params78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings2.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings2);
        org.elasticsearch.common.settings.Settings settings9 = settings2.getByPrefix("index.blocks.write");
        boolean boolean10 = settings9.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getAsGroups(false);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings23.getAsGroups();
        java.lang.String[] strArray29 = settings23.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings23.filter(strPredicate30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings22.applySettings(settings31);
        java.lang.String[] strArray34 = settings31.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder21.put((java.lang.Object[]) strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("index.blocks.read", (double) (short) 1);
        java.lang.String str42 = builder40.get("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings12.getAsGroups();
        java.lang.String[] strArray18 = settings12.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings12.filter(strPredicate19);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.lang.String str25 = settings22.get("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.applySettings(settings22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getAsGroups();
        java.lang.String[] strArray34 = settings28.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings28.filter(strPredicate35);
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings27.applySettings(settings36);
        java.lang.String[] strArray39 = settings36.getAsArray("state-");
        java.lang.Boolean boolean42 = settings36.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings36);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = settings36.toXContent(xContentBuilder44, params45);
        indexScopedSettings0.validate(settings36);
        java.lang.String str48 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "index.shared_filesystem" + "'", str25, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(params45);
        org.junit.Assert.assertNull(xContentBuilder46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = null; // flaky: indexSettings72.getFlushThresholdSize();
        boolean boolean78 = false; // flaky: indexSettings72.hasCustomDataPath();
        boolean boolean79 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        boolean boolean78 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.elasticsearch.common.unit.TimeValue timeValue79 = null; // flaky: indexSettings72.getRefreshInterval();
        int int80 = 0; // flaky: indexSettings72.getMaxRescoreWindow();
        boolean boolean82 = false; // flaky: indexSettings72.matchesIndexName("index.number_of_replicas");
        boolean boolean83 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10000 + "'", int80 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet80 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder81.setRoutingNumShards(10);
        // The following exception was thrown during execution in test generation
        try {
            long long85 = builder81.primaryTerm(1000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.lang.String str6 = settings0.get("index.version.created_string", "index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings8.getAsGroups();
        java.lang.String[] strArray14 = settings8.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.common.settings.Settings settings16 = settings8.filter(strPredicate15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings16.filter(strPredicate17);
        java.lang.String[] strArray20 = settings16.getAsArray("hi!");
        java.util.Set<java.lang.String> strSet21 = settings16.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings24.getAsGroups();
        java.lang.String[] strArray30 = settings24.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings24.filter(strPredicate31);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings23.applySettings(settings32);
        java.lang.String[] strArray35 = settings32.getAsArray("state-");
        java.lang.Boolean boolean38 = settings32.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params41 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = settings32.toXContent(xContentBuilder40, params41);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = settings16.toXContent(xContentBuilder22, params41);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings0.toXContent(xContentBuilder7, params41);
        org.elasticsearch.Version version46 = null;
        org.elasticsearch.Version version47 = settings0.getAsVersion("", version46);
        java.lang.String str49 = settings0.toDelimitedString('4');
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.creation_date_string" + "'", str6, "index.creation_date_string");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + false + "'", boolean38, false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(params41);
        org.junit.Assert.assertNull(xContentBuilder42);
        org.junit.Assert.assertNull(xContentBuilder43);
        org.junit.Assert.assertNull(xContentBuilder44);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.internalMap();
        java.lang.String str11 = builder8.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder8.put("_na_", 1.0d);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("_na_", strArray16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        java.lang.String[] strArray52 = new java.lang.String[] { "index.creation_date_string", "index.version.minimum_compatible", "index.version.created_string", "_na_", "index.shared_filesystem", "index.creation_date_string", "index.version.upgraded", "_na_", "index.data_path", "index.shadow_replicas", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "index.blocks.write", "index.priority", "index.blocks.metadata", "index.version.created", "index.auto_expand_replicas", "index.data_path", "index.data_path", "primary_terms", "index.uuid" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder22.putArray("archived.", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder17.putArray("", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder0.putArray("archived.", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        java.lang.String[] strArray72 = settings69.getAsArray("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings74.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings74.getAsGroups();
        java.lang.String[] strArray80 = settings74.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate81 = null;
        org.elasticsearch.common.settings.Settings settings82 = settings74.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings73.applySettings(settings82);
        java.lang.String[] strArray85 = settings82.getAsArray("state-");
        java.lang.String[] strArray87 = settings82.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder0.put("", "index.creation_date_string", strArray72, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder0.put("index.shared_filesystem.recover_on_any_node", (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder0.put("index.number_of_replicas", "index.creation_date");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet3 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 0, indexMetaData1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        java.lang.String[] strArray25 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder21.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder21.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder30.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.numberOfShards((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        java.lang.String[] strArray24 = settings21.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.diff(settings11, settings21);
        java.lang.String str27 = settings21.get("index.version.minimum_compatible");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue30 = settings21.getAsRatio("archived.", "false");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [false]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxResultWindow();
        java.lang.String str79 = null; // flaky: indexSettings72.getNodeName();
        int int80 = 0; // flaky: indexSettings72.getNumberOfReplicas();
        boolean boolean81 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig82 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        int int83 = 0; // flaky: indexSettings72.getMaxRefreshListeners();
        boolean boolean84 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1000 + "'", int83 == 1000);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10.0");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder3.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet12);
        int int15 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder3.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.state(state18);
        byte byte20 = state18.id();
        byte byte21 = state18.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.state(state18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.index("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder32.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder29.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet41);
        int int45 = builder44.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder44.removeAlias("primary_terms");
        java.lang.String[] strArray51 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder47.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder24.putActiveAllocationIds((int) (byte) 0, (java.util.Set<java.lang.String>) strSet52);
        java.lang.String str56 = builder55.index();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 1 + "'", byte20 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 1 + "'", byte21 == (byte) 1);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "_na_" + "'", str56, "_na_");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder33.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet42);
        int int46 = builder45.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder60.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder57.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder50.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder25.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet69);
        long long75 = builder25.version();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = builder25.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap94 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = builder95.primaryTerm(52, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strImmutableOpenMap94);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData0.mapping("active_allocations");
        java.lang.String str77 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap78 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "_na_" + "'", str77, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder33.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder23.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder23.creationDate((long) ' ');
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("archived.", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfReplicas(1000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = settings14.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings19.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getAsGroups();
        java.lang.String[] strArray25 = settings19.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.Settings settings27 = settings19.filter(strPredicate26);
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings18.applySettings(settings27);
        org.elasticsearch.common.settings.Setting.Property property29 = indexScopedSettings18.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        indexScopedSettings18.validate(builder30);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings35 = builder34.build();
        java.lang.String str37 = builder34.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        boolean boolean44 = indexScopedSettings18.updateDynamicSettings(settings33, builder40, builder41, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        java.lang.String str48 = builder45.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder45.put(strMap50);
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings53 = builder52.build();
        java.lang.String str55 = builder52.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.internalMap();
        java.lang.String str65 = builder62.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap67 = builder66.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder62.put(strMap67);
        java.util.function.Predicate<java.lang.String> strPredicate69 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder61.putProperties(strMap67, strPredicate69, strFunction70);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction72 = null;
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder41.putProperties(strMap50, strPredicate69, strFunction72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings75.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings75.getAsGroups();
        java.lang.String[] strArray81 = settings75.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.Settings settings83 = settings75.filter(strPredicate82);
        org.elasticsearch.common.settings.Settings settings84 = indexScopedSettings74.applySettings(settings83);
        org.elasticsearch.index.IndexSettings indexSettings85 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData13, settings17, strPredicate69, indexScopedSettings74);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters86 = indexMetaData13.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state87 = indexMetaData13.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder12.state(state87);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder8.state(state87);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder89.putAlias(aliasMetaData90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + property29 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property29.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strPredicate69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNull(discoveryNodeFilters86);
        org.junit.Assert.assertTrue("'" + state87 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state87.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData0.includeFilters();
        java.util.Set<java.lang.String> strSet77 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        int int78 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        java.lang.String[] strArray25 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder21.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder21.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder21.setRoutingNumShards((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long34 = builder32.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap76 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int79 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings75 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder76.removeAlias("");
        int int79 = builder76.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean74 = indexMetaData0.isSameUUID("index.blocks.metadata");
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long77 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = builder79.mapping("hi!");
        int int82 = builder79.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertNull(mappingMetaData81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getAsGroups();
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        java.lang.String str9 = settings7.get("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings7.getGroups("index.number_of_replicas", false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        boolean boolean77 = indexMetaData0.isSameUUID("");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.includeFilters();
        int int79 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.loadFromSource("index.uuid");
        java.lang.String str13 = builder9.get("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder9.internalMap();
        java.lang.String str16 = builder9.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.put("index.number_of_shards", 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "false" + "'", str13, "false");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        java.lang.String str12 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings14 = builder13.build();
        java.lang.String str16 = builder13.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder13.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        java.lang.String str26 = builder23.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.put(strMap28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder22.putProperties(strMap28, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("state-");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = settings35.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder42.internalMap();
        java.lang.String str45 = builder42.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromSource("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings53 = builder52.build();
        java.lang.String str55 = builder52.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put("index.shared_filesystem", "active_allocations");
        boolean boolean63 = indexScopedSettings0.updateDynamicSettings(settings35, builder51, builder61, "_all");
        boolean boolean65 = indexScopedSettings0.hasDynamicSetting("index.uuid");
        boolean boolean67 = indexScopedSettings0.hasDynamicSetting("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.put("index.uuid", "index.creation_date");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean74 = indexMetaData0.isSameUUID("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData77 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder78.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom82 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder78.putCustom("_na_", custom82);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNull(mappingMetaData77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue76 = null; // flaky: indexSettings72.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertNotNull(timeValue76);
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version74 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version75 = indexMetaData0.getMinimumCompatibleVersion();
        // The following exception was thrown during execution in test generation
        try {
            int int77 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNull(version75);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder80.putAlias(aliasMetaData81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData78);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        java.lang.String[] strArray24 = settings21.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.diff(settings11, settings21);
        org.elasticsearch.common.settings.Setting.Property property26 = indexScopedSettings0.getScope();
        java.lang.String str27 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        java.lang.Boolean boolean29 = indexScopedSettings0.get(booleanSetting28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder31.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet40);
        int int43 = builder31.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder31.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings47.getAsGroups();
        java.lang.String[] strArray53 = settings47.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.Settings settings55 = settings47.filter(strPredicate54);
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings46.applySettings(settings55);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = settings56.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder45.settings(settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.numberOfShards((int) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        java.lang.String[] strArray73 = settings70.getAsArray("state-");
        java.lang.Boolean boolean76 = settings70.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings77.getGroups("index.auto_expand_replicas", true);
        boolean boolean81 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings77);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings77);
        java.util.function.Predicate<java.lang.String> strPredicate83 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings84 = settings77.filter(strPredicate83);
        org.elasticsearch.common.settings.Settings settings85 = settings70.filter(strPredicate83);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder60.settings(settings70);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap89 = settings70.getGroups("_all", false);
        org.elasticsearch.common.settings.Settings settings91 = settings70.getByPrefix("index.uuid");
        java.lang.String str93 = settings70.get("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings94 = indexScopedSettings0.applySettings(settings70);
        java.util.Set<java.lang.String> strSet95 = settings70.names();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + property26 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property26.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(booleanSetting28);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + false + "'", boolean29, false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + false + "'", boolean76, false);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strPredicate83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings0.get("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        java.lang.String str17 = builder14.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder23.loadFromSource("index.uuid");
        java.lang.String str27 = builder23.get("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.put("index.shared_filesystem", (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [_na_]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "false" + "'", str27, "false");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.upgraded", 0.0d);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.loadFromStream("index.version.upgraded_string", inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        java.lang.String[] strArray9 = settings3.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings3.getAsGroups(false);
        java.lang.String[] strArray13 = settings3.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder0.extendArray("index.blocks.write", strArray13);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.putNull("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.put("false", true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.version.created_string", (long) 1000);
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder26 = builder22.put("index.shared_filesystem", (long) (-1), timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap77 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap77);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79);
        java.lang.String str87 = indexSettings86.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue88 = indexSettings86.getTranslogSyncInterval();
        java.lang.Class<?> wildcardClass89 = indexSettings86.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "_all" + "'", str87, "_all");
        org.junit.Assert.assertNotNull(timeValue88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long78 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        java.lang.String[] strArray12 = settings9.getAsArray("state-");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        boolean boolean14 = settings9.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings9.getGroups("index.data_path", false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("state-");
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = settings23.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction26 = null;
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder19.putProperties(strMap24, strPredicate25, strFunction26);
        java.lang.String str29 = builder27.get("_all");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings12.getAsGroups();
        java.lang.String[] strArray18 = settings12.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings12.filter(strPredicate19);
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings11.applySettings(settings20);
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings11.getScope();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings23.getAsGroups();
        java.lang.String[] strArray29 = settings23.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings23.filter(strPredicate30);
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings31.filter(strPredicate32);
        java.lang.String str36 = settings33.get("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings11.applySettings(settings33);
        boolean boolean38 = settings33.isEmpty();
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings43.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings43.getAsGroups();
        java.lang.String[] strArray49 = settings43.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings43.getAsGroups(false);
        java.lang.String[] strArray53 = settings43.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder40.extendArray("index.blocks.write", strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder57 = null;
        boolean boolean59 = indexScopedSettings0.updateDynamicSettings(settings33, builder54, builder57, "index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        boolean boolean60 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index.shared_filesystem" + "'", str36, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings12.getAsGroups();
        java.lang.String[] strArray18 = settings12.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings12.filter(strPredicate19);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.lang.String str25 = settings22.get("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.applySettings(settings22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings28.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getAsGroups();
        java.lang.String[] strArray34 = settings28.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.Settings settings36 = settings28.filter(strPredicate35);
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings27.applySettings(settings36);
        org.elasticsearch.common.settings.Setting.Property property38 = indexScopedSettings27.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder39.internalMap();
        indexScopedSettings27.validate(builder39);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        java.lang.String str46 = builder43.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        boolean boolean53 = indexScopedSettings27.updateDynamicSettings(settings42, builder49, builder50, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        java.lang.String str57 = builder54.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder54.put(strMap59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings62 = builder61.build();
        java.lang.String str64 = builder61.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder61.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder61.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap72 = builder71.internalMap();
        java.lang.String str74 = builder71.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder75 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap76 = builder75.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder71.put(strMap76);
        java.util.function.Predicate<java.lang.String> strPredicate78 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction79 = null;
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder70.putProperties(strMap76, strPredicate78, strFunction79);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction81 = null;
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder50.putProperties(strMap59, strPredicate78, strFunction81);
        org.elasticsearch.common.settings.Settings settings83 = settings22.filter(strPredicate78);
        boolean boolean84 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue87 = settings22.getAsRatio("state-", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [hi!]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "index.shared_filesystem" + "'", str25, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + property38 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property38.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strPredicate78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int76 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings77.getGroups("index.auto_expand_replicas", true);
        boolean boolean81 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings77);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings77);
        java.util.function.Predicate<java.lang.String> strPredicate83 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings84 = settings77.filter(strPredicate83);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings77);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strPredicate83);
        org.junit.Assert.assertNotNull(settings84);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getAsGroups();
        java.lang.String[] strArray47 = settings41.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings41.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings40.applySettings(settings49);
        java.lang.String[] strArray52 = settings49.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings54 = builder53.build();
        java.lang.String str56 = builder53.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        org.elasticsearch.common.settings.Setting.Property property71 = indexScopedSettings60.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder72.internalMap();
        indexScopedSettings60.validate(builder72);
        boolean boolean76 = indexScopedSettings0.updateSettings(settings49, builder59, builder72, "");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder59.loadFromSource("active_allocations");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + property71 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property71.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings3.getGroups("state-", false);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.internalMap();
        java.lang.String str14 = builder11.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.loadFromSource("index.uuid");
        java.lang.String str24 = builder20.get("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder20.internalMap();
        java.lang.String str27 = builder20.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getAsGroups();
        java.lang.String[] strArray37 = settings31.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings31.getAsGroups(false);
        java.lang.String[] strArray41 = settings31.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder28.extendArray("index.blocks.write", strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder28.put("index.number_of_replicas", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        java.lang.String str49 = builder46.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("primary_terms", false);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder52.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder28.put(strMap56);
        boolean boolean59 = indexScopedSettings0.updateSettings(settings3, builder20, builder57, "index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder57.normalizePrefix("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        java.lang.String[] strArray73 = settings71.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder61.extendArray("hi!", strArray73);
        org.elasticsearch.common.settings.Settings settings75 = builder74.build();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "false" + "'", str24, "false");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings75);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        java.lang.String str2 = builder1.index();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.uuid" + "'", str2, "index.uuid");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        java.lang.String str22 = builder21.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "index.uuid" + "'", str22, "index.uuid");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.");
        long long2 = builder1.version();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        int int75 = 0; // flaky: indexSettings72.getMaxResultWindow();
        long long76 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        int int77 = 0; // flaky: indexSettings72.getMaxRefreshListeners();
        boolean boolean78 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        int int79 = 0; // flaky: indexSettings72.getNumberOfShards();
        org.elasticsearch.index.translog.Translog.Durability durability80 = null; // flaky: indexSettings72.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 60000L + "'", long76 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1000 + "'", int77 == 1000);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + durability80 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability80.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder76.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder78.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder78.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder78.creationDate((long) (byte) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        java.lang.String str78 = null; // flaky: indexSettings72.getNodeName();
        boolean boolean79 = false; // flaky: indexSettings72.hasCustomDataPath();
        java.lang.String str80 = null; // flaky: indexSettings72.getNodeName();
        java.lang.String str81 = null; // flaky: indexSettings72.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "_all" + "'", str81, "_all");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put(strMap8);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.normalizePrefix("index.number_of_replicas");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("index.number_of_replicas", 0L, byteSizeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        java.lang.String[] strArray25 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder21.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder21.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder30.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.removeAlias("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.data_path");
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings7 = builder6.build();
        java.lang.String str9 = builder6.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder6.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("_na_", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings20 = builder19.build();
        java.lang.String str22 = builder19.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder19.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        java.lang.String str32 = builder29.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put(strMap34);
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction37 = null;
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder28.putProperties(strMap34, strPredicate36, strFunction37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings40.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings40.getAsGroups();
        java.lang.String[] strArray46 = settings40.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.Settings settings48 = settings40.filter(strPredicate47);
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings39.applySettings(settings48);
        java.lang.String[] strArray51 = settings48.getAsArray("state-");
        java.lang.Boolean boolean54 = settings48.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings55.getGroups("index.auto_expand_replicas", true);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings55);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings55);
        java.util.function.Predicate<java.lang.String> strPredicate61 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings62 = settings55.filter(strPredicate61);
        org.elasticsearch.common.settings.Settings settings63 = settings48.filter(strPredicate61);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction64 = null;
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder6.putProperties(strMap34, strPredicate61, strFunction64);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("false", (double) (-1L));
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder65.put("index.blocks.metadata", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder65.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", (float) (-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder5.settings(builder74);
        java.lang.String str76 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder5.removeAlias("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + false + "'", boolean54, false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "index.data_path" + "'", str76, "index.data_path");
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder25.removeAllAliases();
        long long27 = builder26.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.removeAllAliases();
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings30 = builder29.build();
        java.lang.String str32 = builder29.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder39.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        java.lang.String str44 = builder41.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder41.put(strMap46);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder29.put(strMap46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder28.settings(builder49);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder28.primaryTerm((-1), (long) 10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        java.lang.String str9 = builder6.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.settings(builder6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.numberOfShards((int) '4');
        int int16 = builder15.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putAlias(builder17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder79.version(1L);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder79.putAlias(builder82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(aliasMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getAsGroups();
        java.lang.String[] strArray47 = settings41.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings41.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings40.applySettings(settings49);
        java.lang.String[] strArray52 = settings49.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings54 = builder53.build();
        java.lang.String str56 = builder53.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        org.elasticsearch.common.settings.Setting.Property property71 = indexScopedSettings60.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder72.internalMap();
        indexScopedSettings60.validate(builder72);
        boolean boolean76 = indexScopedSettings0.updateSettings(settings49, builder59, builder72, "");
        org.elasticsearch.common.settings.Settings.Builder builder77 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings78 = builder77.build();
        java.lang.String str80 = builder77.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder77.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder86.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder89.put("index.creation_date", true);
        java.util.Map<java.lang.String, java.lang.String> strMap93 = builder92.internalMap();
        org.elasticsearch.common.settings.Settings settings94 = builder92.build();
        org.elasticsearch.common.settings.Settings.Builder builder95 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings96 = builder95.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap97 = settings96.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings98 = indexScopedSettings0.diff(settings94, settings96);
        org.elasticsearch.common.settings.Settings settings99 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings98);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + property71 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property71.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(settings96);
        org.junit.Assert.assertNotNull(strMap97);
        org.junit.Assert.assertNotNull(settings98);
        org.junit.Assert.assertNotNull(settings99);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.excludeFilters();
        int int79 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder5.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet14);
        int int17 = builder5.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder5.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder5.state(state20);
        byte byte22 = state20.id();
        byte byte23 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.state(state20);
        int int26 = builder25.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.removeAlias("index.data_path");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 1 + "'", byte22 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 1 + "'", byte23 == (byte) 1);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put(strMap8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("active_allocations", 0.0f);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read", "false", "index.version.upgraded", "index.uuid", "index.version.created_string", "index.creation_date_string", "index.", "index.version.created", "index.uuid", "index.number_of_replicas", "index.auto_expand_replicas", "active_allocations", "index.priority", "index.blocks.metadata", "_na_", "index.blocks.read_only", "index.priority", "index.version.created_string", "index.auto_expand_replicas", "hi!", "index.version.minimum_compatible", "index.blocks.write", "index.version.created_string", "index.shared_filesystem.recover_on_any_node", "index.creation_date", "index.blocks.read" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder12.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList42);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.requireFilters();
        int int74 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int77 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder73.version((long) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder73.putMapping(mappingMetaData76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put(strMap8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("active_allocations", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder6.put("state-", (float) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig73 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue75 = null; // flaky: indexSettings72.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig73);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
// flaky:         org.junit.Assert.assertNotNull(timeValue75);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long77 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        boolean boolean83 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings79);
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings79);
        java.util.function.Predicate<java.lang.String> strPredicate85 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings86 = settings79.filter(strPredicate85);
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.index.Index index88 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings.Builder builder89 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings90 = builder89.build();
        org.elasticsearch.common.settings.Settings settings92 = settings90.getByPrefix("state-");
        java.lang.String[] strArray94 = settings90.getAsArray("index.creation_date");
        java.util.Set<java.lang.String> strSet95 = settings90.names();
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings90);
        boolean boolean97 = indexSettings96.isQueryStringAnalyzeWildcard();
        org.elasticsearch.Version version98 = indexSettings96.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(strPredicate85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNull(index88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(version98);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        java.lang.String str74 = indexMetaData0.getIndexUUID();
        int int75 = indexMetaData0.getTotalNumberOfShards();
        long long77 = indexMetaData0.primaryTerm((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "_na_" + "'", str74, "_na_");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings75 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int77 = indexMetaData0.getRoutingFactor();
        int int78 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.elasticsearch.common.settings.Settings settings0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings75 = null; // flaky: indexSettings72.getSettings();
        boolean boolean77 = false; // flaky: indexSettings72.matchesIndexName("");
        boolean boolean78 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        int int22 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder30.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder27.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet39);
        int int43 = builder42.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.removeAlias("primary_terms");
        java.lang.String[] strArray49 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder45.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder21.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet50);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = builder53.primaryTerm(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxRefreshListeners();
        int int79 = 0; // flaky: indexSettings72.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters81 = null; // flaky: indexMetaData80.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData83 = null; // flaky: indexMetaData80.mappingOrDefault("primary_terms");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1000 + "'", int78 == 1000);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNull(discoveryNodeFilters81);
        org.junit.Assert.assertNull(mappingMetaData83);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.putAlias(builder26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version74 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap75 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData0.requireFilters();
        int int77 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput78 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap75);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version94 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version95 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(version94);
        org.junit.Assert.assertNull(version95);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.normalizePrefix("index.uuid");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings2.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.version((long) 'a');
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        java.lang.String[] strArray9 = settings3.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings3.getAsGroups(false);
        java.lang.String[] strArray13 = settings3.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder0.extendArray("index.blocks.write", strArray13);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder0.put("index.number_of_replicas", "primary_terms");
        org.elasticsearch.common.settings.Settings settings18 = builder17.build();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.put("index.", 1L, byteSizeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings8.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings8.getAsGroups();
        java.lang.String[] strArray14 = settings8.getAsArray("index.data_path");
        java.lang.String[] strArray16 = settings6.getAsArray("index.version.minimum_compatible", strArray14, (java.lang.Boolean) true);
        indexScopedSettings5.validate(settings6);
        java.util.Set<java.lang.String> strSet18 = settings6.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.putActiveAllocationIds(0, strSet18);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder27.putCustom("", custom31);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.putAlias(aliasMetaData33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.index("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = builder20.mapping("index.blocks.write");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mappingMetaData22);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = null; // flaky: indexSettings72.getFlushThresholdSize();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig75 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings76 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        java.lang.String[] strArray87 = settings77.getAsArray("index.version.minimum_compatible", strArray85, (java.lang.Boolean) true);
        indexScopedSettings76.validate(settings77);
        boolean boolean90 = indexScopedSettings76.hasDynamicSetting("index.version.created_string");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting91 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting92 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer93 = null;
        indexScopedSettings76.addSettingsUpdateConsumer(booleanSetting91, booleanSetting92, booleanBiConsumer93);
        java.lang.Boolean boolean95 = null; // flaky: indexSettings72.getValue(booleanSetting92);
        java.lang.String str96 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.settings.Settings settings97 = null; // flaky: indexSettings72.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue98 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig75);
        org.junit.Assert.assertNotNull(indexScopedSettings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(booleanSetting91);
        org.junit.Assert.assertNotNull(booleanSetting92);
// flaky:         org.junit.Assert.assertEquals("'" + boolean95 + "' != '" + false + "'", boolean95, false);
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "_all" + "'", str96, "_all");
// flaky:         org.junit.Assert.assertNotNull(settings97);
// flaky:         org.junit.Assert.assertNotNull(timeValue98);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        org.elasticsearch.Version version76 = indexMetaData0.getCreationVersion();
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        int int79 = indexMetaData0.getTotalNumberOfShards();
        boolean boolean81 = indexMetaData0.isSameUUID("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.internalMap();
        java.lang.String str5 = builder2.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put(strMap7);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put(strMap7);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.auto_expand_replicas", true);
        java.lang.String str16 = settings10.get("index.version.created_string", "index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        java.lang.String str20 = builder17.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder21.internalMap();
        java.lang.String str24 = builder21.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put(strMap26);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put(strMap29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings32 = builder31.build();
        java.lang.String str34 = builder31.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder31.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        java.lang.String str44 = builder41.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder41.put(strMap46);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction49 = null;
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder40.putProperties(strMap46, strPredicate48, strFunction49);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction51 = null;
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder17.putProperties(strMap29, strPredicate48, strFunction51);
        org.elasticsearch.common.settings.Settings settings53 = settings10.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder0.put(settings53);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.version.created_string", 10000);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder61 = builder54.put("index.blocks.read_only", 1L, byteSizeUnit60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.creation_date_string" + "'", str16, "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getAsGroups();
        java.lang.String[] strArray47 = settings41.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings41.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings40.applySettings(settings49);
        java.lang.String[] strArray52 = settings49.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings54 = builder53.build();
        java.lang.String str56 = builder53.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        org.elasticsearch.common.settings.Setting.Property property71 = indexScopedSettings60.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder72.internalMap();
        indexScopedSettings60.validate(builder72);
        boolean boolean76 = indexScopedSettings0.updateSettings(settings49, builder59, builder72, "");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder59.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder81 = builder59.put("index.blocks.read", 1L, timeUnit80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + property71 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property71.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray6 = settings0.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings0.filter(strPredicate7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        java.lang.String[] strArray24 = settings21.getAsArray("state-");
        java.lang.Boolean boolean27 = settings21.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params30 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = settings21.toXContent(xContentBuilder29, params30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = settings10.toXContent(xContentBuilder11, params30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = null;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getByPrefix("index.shared_filesystem.recover_on_any_node");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings36.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params39 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = settings36.toXContent(xContentBuilder38, params39);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = settings10.toXContent(xContentBuilder33, params39);
        boolean boolean42 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings10);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(params30);
        org.junit.Assert.assertNull(xContentBuilder31);
        org.junit.Assert.assertNull(xContentBuilder32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(params39);
        org.junit.Assert.assertNull(xContentBuilder40);
        org.junit.Assert.assertNull(xContentBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.loadFromSource("index.uuid");
        java.lang.String str13 = builder9.remove("state-");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder9.put("index.shared_filesystem", true);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder16.put("index.version.minimum_compatible", (long) (-1), byteSizeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder0.put("_na_", 0L);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.put(settings13);
        java.lang.String str18 = settings13.get("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder93.creationDate((long) '#');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings23.getAsGroups();
        java.lang.String[] strArray29 = settings23.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings23.filter(strPredicate30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings22.applySettings(settings31);
        java.lang.String[] strArray34 = settings31.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder21.put((java.lang.Object[]) strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder21.put("index.blocks.read", (int) (byte) 100);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder42 = builder21.put("primary_terms", (long) (short) 0, byteSizeUnit41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder6.put("index.version.upgraded", 0.0d);
        java.lang.String str13 = builder6.remove("index.blocks.write");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getAsGroups();
        java.lang.String[] strArray23 = settings17.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings16.applySettings(settings25);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = settings26.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder15.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfReplicas(10000);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder28.putMapping("archived.", "index.version.minimum_compatible");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = indexMetaData0.getState();
        int int77 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.Class<?> wildcardClass77 = indexMetaData0.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxResultWindow();
        java.lang.String str79 = null; // flaky: indexSettings72.getNodeName();
        boolean boolean80 = false; // flaky: indexSettings72.isDefaultAllowUnmappedFields();
        int int81 = 0; // flaky: indexSettings72.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
// flaky:         org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10000 + "'", int81 == 10000);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings41.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getAsGroups();
        java.lang.String[] strArray47 = settings41.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.Settings settings49 = settings41.filter(strPredicate48);
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings40.applySettings(settings49);
        java.lang.String[] strArray52 = settings49.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings54 = builder53.build();
        java.lang.String str56 = builder53.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        org.elasticsearch.common.settings.Setting.Property property71 = indexScopedSettings60.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder72.internalMap();
        indexScopedSettings60.validate(builder72);
        boolean boolean76 = indexScopedSettings0.updateSettings(settings49, builder59, builder72, "");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap84 = settings80.getAsGroups();
        java.lang.String[] strArray86 = settings80.getAsArray("index.data_path");
        java.lang.String[] strArray88 = settings78.getAsArray("index.version.minimum_compatible", strArray86, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder72.extendArray("active_allocations", strArray88);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder89.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + property71 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property71.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.Version version79 = null; // flaky: indexSettings72.getIndexVersionCreated();
        org.elasticsearch.index.translog.Translog.Durability durability80 = null; // flaky: indexSettings72.getTranslogDurability();
        boolean boolean81 = false; // flaky: indexSettings72.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(version79);
// flaky:         org.junit.Assert.assertTrue("'" + durability80 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability80.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.index.Index index75 = null; // flaky: indexMetaData74.getMergeSourceIndex();
        org.elasticsearch.Version version76 = null; // flaky: indexMetaData74.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap84 = settings80.getAsGroups();
        java.lang.String[] strArray86 = settings80.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate87 = null;
        org.elasticsearch.common.settings.Settings settings88 = settings80.filter(strPredicate87);
        org.elasticsearch.common.settings.Settings settings89 = indexScopedSettings79.applySettings(settings88);
        java.lang.String[] strArray91 = settings88.getAsArray("state-");
        java.lang.Boolean boolean94 = settings88.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean95 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings88);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params97 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder98 = settings88.toXContent(xContentBuilder96, params97);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder99 = indexMetaData74.toXContent(xContentBuilder78, params97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNull(index75);
// flaky:         org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertEquals("'" + boolean94 + "' != '" + false + "'", boolean94, false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(params97);
        org.junit.Assert.assertNull(xContentBuilder98);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder22.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder19.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet31);
        int int35 = builder34.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder34.removeAlias("primary_terms");
        java.lang.String[] strArray41 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder37.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder14.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.index("index.uuid");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long78 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput79 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder33.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet42);
        int int46 = builder45.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder60.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder57.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder50.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder25.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder74.removeAlias("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder74.putMapping("index.priority", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings75 = null; // flaky: indexSettings72.getSettings();
        org.elasticsearch.common.settings.Settings settings76 = null; // flaky: indexSettings72.getSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap77 = null; // flaky: settings76.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(settings75);
// flaky:         org.junit.Assert.assertNotNull(settings76);
// flaky:         org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        int int76 = 0; // flaky: indexMetaData74.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder77 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings78 = builder77.build();
        java.lang.String str80 = builder77.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder77.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder86.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder89.put("index.creation_date", true);
        java.util.Map<java.lang.String, java.lang.String> strMap93 = builder92.internalMap();
        boolean boolean94 = false; // flaky: indexMetaData74.equals((java.lang.Object) builder92);
        int int95 = 0; // flaky: indexMetaData74.getRoutingFactor();
        boolean boolean97 = false; // flaky: indexMetaData74.isSameUUID("primary_terms");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        java.lang.String str78 = null; // flaky: indexSettings72.getNodeName();
        boolean boolean79 = false; // flaky: indexSettings72.hasCustomDataPath();
        java.lang.String str80 = null; // flaky: indexSettings72.getNodeName();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig81 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig81);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("index.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("false");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder9.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet18);
        int int21 = builder9.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder9.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings25.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings25.getAsGroups();
        java.lang.String[] strArray31 = settings25.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.Settings settings33 = settings25.filter(strPredicate32);
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings24.applySettings(settings33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = settings34.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder23.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.state(state39);
        byte byte41 = state39.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder23.state(state39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder5.state(state39);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 1 + "'", byte41 == (byte) 1);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        java.lang.String[] strArray9 = settings3.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings3.getAsGroups(false);
        java.lang.String[] strArray13 = settings3.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder0.extendArray("index.blocks.write", strArray13);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.internalMap();
        java.lang.String str19 = builder16.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.internalMap();
        java.lang.String str23 = builder20.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder20.put(strMap25);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put(strMap28);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings31 = builder30.build();
        java.lang.String str33 = builder30.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder30.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        java.lang.String str43 = builder40.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put(strMap45);
        java.util.function.Predicate<java.lang.String> strPredicate47 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction48 = null;
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder39.putProperties(strMap45, strPredicate47, strFunction48);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder16.putProperties(strMap28, strPredicate47, strFunction50);
        java.lang.Class<?> wildcardClass52 = strMap28.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder14.put("false", (java.lang.Class) wildcardClass52);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder14.put("index.priority", true);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder14.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder25.removeAllAliases();
        long long27 = builder26.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.version((long) '4');
        int int30 = builder26.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder26.index("index.priority");
        long long33 = builder26.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings2 = settings0.getByPrefix("index.shared_filesystem.recover_on_any_node");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings2.getAsGroups();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params5 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = settings2.toXContent(xContentBuilder4, params5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings2.getGroups("index.blocks.read");
        java.util.Set<java.lang.String> strSet9 = settings2.names();
        java.lang.String str12 = settings2.get("index.blocks.write", "index.uuid");
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = settings2.getAsStructuredMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(params5);
        org.junit.Assert.assertNull(xContentBuilder6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.uuid" + "'", str12, "index.uuid");
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = null; // flaky: builder75.version((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom79 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = null; // flaky: builder75.putCustom("index.", custom79);
        int int81 = 0; // flaky: builder75.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
// flaky:         org.junit.Assert.assertNotNull(builder77);
// flaky:         org.junit.Assert.assertNotNull(builder80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        java.lang.String[] strArray24 = settings21.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.diff(settings11, settings21);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting27 = indexScopedSettings0.get("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(wildcardSetting27);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getAsGroups();
        java.lang.String[] strArray23 = settings17.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings16.applySettings(settings25);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = settings26.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder15.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings32.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getAsGroups();
        java.lang.String[] strArray38 = settings32.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings32.filter(strPredicate39);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings31.applySettings(settings40);
        java.lang.String[] strArray43 = settings40.getAsArray("state-");
        java.lang.Boolean boolean46 = settings40.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getGroups("index.auto_expand_replicas", true);
        boolean boolean51 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        java.util.function.Predicate<java.lang.String> strPredicate53 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings54 = settings47.filter(strPredicate53);
        org.elasticsearch.common.settings.Settings settings55 = settings40.filter(strPredicate53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder30.settings(settings40);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings40.getGroups("_all", false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings69.filter(strPredicate70);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings74.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings74.getAsGroups();
        java.lang.String[] strArray80 = settings74.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate81 = null;
        org.elasticsearch.common.settings.Settings settings82 = settings74.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings73.applySettings(settings82);
        java.lang.String[] strArray85 = settings82.getAsArray("state-");
        java.lang.Boolean boolean88 = settings82.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean89 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings82);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params91 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = settings82.toXContent(xContentBuilder90, params91);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = settings71.toXContent(xContentBuilder72, params91);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = settings40.toXContent(xContentBuilder60, params91);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue97 = settings40.getAsMemory("primary_terms", "index.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [primary_terms] with value [index.] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + boolean46 + "' != '" + false + "'", boolean46, false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + boolean88 + "' != '" + false + "'", boolean88, false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(params91);
        org.junit.Assert.assertNull(xContentBuilder92);
        org.junit.Assert.assertNull(xContentBuilder93);
        org.junit.Assert.assertNull(xContentBuilder94);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        // The following exception was thrown during execution in test generation
        try {
            long long81 = 0L; // flaky: indexMetaData78.primaryTerm((int) '4');
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData78);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder2 = null;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings3.getAsGroups();
        java.lang.String[] strArray9 = settings3.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.Settings settings11 = settings3.filter(strPredicate10);
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings11.filter(strPredicate12);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings16.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getAsGroups();
        java.lang.String[] strArray22 = settings16.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate23 = null;
        org.elasticsearch.common.settings.Settings settings24 = settings16.filter(strPredicate23);
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings15.applySettings(settings24);
        java.lang.String[] strArray27 = settings24.getAsArray("state-");
        java.lang.Boolean boolean30 = settings24.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings24.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings13.toXContent(xContentBuilder14, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings1.toXContent(xContentBuilder2, params33);
        java.util.Set<java.lang.String> strSet37 = settings1.names();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = null; // flaky: indexSettings72.getFlushThresholdSize();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean75 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue73);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(strSet78);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        java.lang.String str9 = builder6.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.settings(builder6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder3.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder3.creationDate(1L);
        int int18 = builder17.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        int int2 = builder1.getRoutingNumShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.creation_date", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.blocks.metadata", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings21 = builder20.build();
        java.lang.String str23 = builder20.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder20.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder20.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        java.lang.String str33 = builder30.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put(strMap35);
        java.util.function.Predicate<java.lang.String> strPredicate37 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction38 = null;
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder29.putProperties(strMap35, strPredicate37, strFunction38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.putNull("state-");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings43 = builder42.build();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = settings43.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction46 = null;
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder39.putProperties(strMap44, strPredicate45, strFunction46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings50.getAsGroups();
        java.lang.String[] strArray56 = settings50.getAsArray("index.data_path");
        java.lang.String[] strArray58 = settings48.getAsArray("index.version.minimum_compatible", strArray56, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder39.put((java.lang.Object[]) strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder18.extendArray("index.number_of_shards", strArray58);
        java.nio.file.Path path61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder62 = builder60.loadFromPath(path61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        boolean boolean79 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.common.unit.TimeValue timeValue93 = indexSettings92.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue94 = indexSettings92.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue93);
        org.junit.Assert.assertNotNull(timeValue94);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        // The following exception was thrown during execution in test generation
        try {
            long long78 = indexMetaData0.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        java.lang.String str73 = null; // flaky: indexSettings72.getNodeName();
        int int74 = 0; // flaky: indexSettings72.getMaxRefreshListeners();
        org.elasticsearch.index.translog.Translog.Durability durability75 = null; // flaky: indexSettings72.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1000 + "'", int74 == 1000);
// flaky:         org.junit.Assert.assertTrue("'" + durability75 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability75.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.index.Index index75 = null; // flaky: indexMetaData74.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap76 = null; // flaky: indexMetaData74.getCustoms();
        int int77 = 0; // flaky: indexMetaData74.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = null; // flaky: indexMetaData74.mappingOrDefault("archived.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNull(index75);
// flaky:         org.junit.Assert.assertNotNull(strImmutableOpenMap76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNull(mappingMetaData79);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        java.lang.String[] strArray38 = new java.lang.String[] { "index.data_path", "index.priority", "index.blocks.metadata", "index.shared_filesystem", "index.version.minimum_compatible", "active_allocations", "index.creation_date_string", "index.blocks.metadata", "", "index.", "index.priority", "index.data_path", "hi!", "index.blocks.metadata", "hi!", "index.data_path", "_all" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder9.putArray("index.creation_date", (java.util.List<java.lang.String>) strList39);
        java.lang.String str43 = builder41.get("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79);
        org.elasticsearch.common.settings.Settings.Builder builder87 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings88 = builder87.build();
        org.elasticsearch.common.settings.Settings settings90 = settings88.getByPrefix("state-");
        org.elasticsearch.common.settings.Settings settings92 = settings88.getByPrefix("index.shared_filesystem");
        boolean boolean93 = settings88.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap94 = settings88.getAsGroups();
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings88);
        org.elasticsearch.Version version96 = indexSettings95.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertNotNull(version96);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.numberOfShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.primaryTerm((int) (short) 10, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray7 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray9 = settings0.getAsArray("index.creation_date_string", strArray7, (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings0.getGroups("index.version.created_string", true);
        java.lang.String str15 = settings0.get("false", "index.creation_date");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = settings0.getAsMemory("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", "_na_");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ] with value [_na_] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.creation_date" + "'", str15, "index.creation_date");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings17 = builder16.build();
        java.lang.String str19 = builder16.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        boolean boolean26 = indexScopedSettings0.updateDynamicSettings(settings15, builder22, builder23, "_na_");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting28 = indexScopedSettings0.get("hi!");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings29.getAsGroups();
        java.lang.String[] strArray35 = settings29.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings29.filter(strPredicate36);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.Settings settings39 = settings37.filter(strPredicate38);
        org.elasticsearch.common.unit.TimeValue timeValue41 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue42 = settings37.getAsTime("index.auto_expand_replicas", timeValue41);
        indexScopedSettings0.validate(settings37);
        org.elasticsearch.common.settings.Settings settings45 = settings37.getAsSettings("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings37, streamOutput46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardSetting28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNotNull(settings45);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings12.getAsGroups();
        java.lang.String[] strArray18 = settings12.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings12.filter(strPredicate19);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.lang.String str25 = settings22.get("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.applySettings(settings22);
        boolean boolean28 = indexScopedSettings0.hasDynamicSetting("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        java.lang.String str38 = builder35.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder35.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder32.settings(builder35);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder35.put("_na_", (double) (short) 100);
        java.lang.String str47 = builder45.get("index.blocks.read_only");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [_na_]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "index.shared_filesystem" + "'", str25, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 100);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings settings10 = builder6.build();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder6.put("index.version.created", true);
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings16 = builder15.build();
        java.lang.String str18 = builder15.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder15.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.internalMap();
        java.lang.String str28 = builder25.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put(strMap30);
        java.util.function.Predicate<java.lang.String> strPredicate32 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction33 = null;
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder24.putProperties(strMap30, strPredicate32, strFunction33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.putNull("state-");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = settings37.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.put(settings37);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder36.put(settings42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings47 = builder46.build();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings47.getAsMap();
        java.lang.Class<?> wildcardClass49 = strMap48.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder44.put("index.", (java.lang.Class) wildcardClass49);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder6.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.creation_date", (-1.0f));
        java.lang.Class<?> wildcardClass55 = builder54.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("active_allocations");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAllAliases();
        int int15 = builder1.getRoutingNumShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putMapping("index.shared_filesystem.recover_on_any_node", "_na_");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int79 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.version.created_string");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.Version version79 = null; // flaky: indexSettings72.getIndexVersionCreated();
        boolean boolean80 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        boolean boolean81 = false; // flaky: indexSettings72.isIndexUsingShadowReplicas();
        boolean boolean83 = false; // flaky: indexSettings72.matchesIndexName("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79);
        java.lang.String str87 = indexSettings86.getDefaultField();
        org.elasticsearch.Version version88 = indexSettings86.getIndexVersionCreated();
        boolean boolean89 = indexSettings86.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "_all" + "'", str87, "_all");
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig73 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        java.lang.Boolean boolean76 = null; // flaky: indexSettings72.getValue(booleanSetting75);
        java.lang.String str77 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.settings.Settings settings78 = null; // flaky: indexSettings72.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig73);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertNotNull(booleanSetting75);
// flaky:         org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + false + "'", boolean76, false);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "_all" + "'", str77, "_all");
// flaky:         org.junit.Assert.assertNotNull(settings78);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.Version version79 = null; // flaky: indexSettings72.getIndexVersionCreated();
        java.lang.String str80 = null; // flaky: indexSettings72.getNodeName();
        java.lang.String str81 = null; // flaky: indexSettings72.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(version79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder1.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder79.version((long) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean75 = indexMetaData0.isSameUUID("");
        java.util.Set<java.lang.String> strSet77 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.apache.lucene.util.Version version78 = indexMetaData0.getMinimumCompatibleVersion();
        int int79 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder82 = indexMetaData0.toXContent(xContentBuilder80, params81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertNull(version78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings15 = builder14.build();
        java.lang.String str17 = builder14.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("index.auto_expand_replicas", (long) (byte) 0);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.creation_date_string", "index.version.minimum_compatible", "index.version.created_string", "_na_", "index.shared_filesystem", "index.creation_date_string", "index.version.upgraded", "_na_", "index.data_path", "index.shadow_replicas", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "index.blocks.write", "index.priority", "index.blocks.metadata", "index.version.created", "index.auto_expand_replicas", "index.data_path", "index.data_path", "primary_terms", "index.uuid" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder14.putArray("archived.", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder9.putArray("", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder9.putNull("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings51 = builder9.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = null; // flaky: indexSettings72.getFlushThresholdSize();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings76.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings0.getScope();
        boolean boolean14 = indexScopedSettings0.hasDynamicSetting("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.setRoutingNumShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder15.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet24);
        int int27 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder15.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder15.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder13.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder7.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder7.removeAllAliases();
        java.lang.Class<?> wildcardClass35 = builder34.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version74 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        int int93 = indexSettings92.getMaxRefreshListeners();
        int int94 = indexSettings92.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings95 = indexSettings92.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1000 + "'", int93 == 1000);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(settings95);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet77 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.elasticsearch.Version version78 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertNotNull(version78);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder0.put("_na_", 0L);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder12.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("_na_", 52);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings25 = builder24.build();
        java.lang.String str27 = builder24.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.internalMap();
        java.lang.String str37 = builder34.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put(strMap39);
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction42 = null;
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder33.putProperties(strMap39, strPredicate41, strFunction42);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("state-");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings47 = builder46.build();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = settings47.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction50 = null;
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder43.putProperties(strMap48, strPredicate49, strFunction50);
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings54.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings54.getAsGroups();
        java.lang.String[] strArray60 = settings54.getAsArray("index.data_path");
        java.lang.String[] strArray62 = settings52.getAsArray("index.version.minimum_compatible", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder43.put((java.lang.Object[]) strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder22.extendArray("index.data_path", strArray62);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.internalMap();
        java.lang.String str5 = builder2.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("_na_", 1.0d);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.putArray("_na_", strArray10);
        indexScopedSettings1.validate(builder11);
        indexScopedSettings0.validate(builder11);
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings16 = builder15.build();
        java.lang.String str18 = builder15.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder15.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder15.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        java.lang.String str43 = builder40.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder38.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder28.put(strMap45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings49.getGroups("index.auto_expand_replicas", true);
        boolean boolean53 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings49);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings56 = settings49.filter(strPredicate55);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder27.putProperties(strMap45, strPredicate55, strFunction57);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("active_allocations", "index.creation_date");
        java.lang.String str17 = builder15.get("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings2 = settings0.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings8 = settings6.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings11.getAsGroups();
        java.lang.String[] strArray17 = settings11.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings11.filter(strPredicate18);
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings10.applySettings(settings19);
        org.elasticsearch.common.settings.Setting.Property property21 = indexScopedSettings10.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.internalMap();
        indexScopedSettings10.validate(builder22);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings27 = builder26.build();
        java.lang.String str29 = builder26.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder26.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        boolean boolean36 = indexScopedSettings10.updateDynamicSettings(settings25, builder32, builder33, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        java.lang.String str40 = builder37.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder41.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder37.put(strMap42);
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings45 = builder44.build();
        java.lang.String str47 = builder44.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder44.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder44.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        java.lang.String str57 = builder54.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder54.put(strMap59);
        java.util.function.Predicate<java.lang.String> strPredicate61 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction62 = null;
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder53.putProperties(strMap59, strPredicate61, strFunction62);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction64 = null;
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder33.putProperties(strMap42, strPredicate61, strFunction64);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings67.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings67.getAsGroups();
        java.lang.String[] strArray73 = settings67.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate74 = null;
        org.elasticsearch.common.settings.Settings settings75 = settings67.filter(strPredicate74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings66.applySettings(settings75);
        org.elasticsearch.index.IndexSettings indexSettings77 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings9, strPredicate61, indexScopedSettings66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData5.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = indexMetaData5.mapping("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap86 = settings83.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap87 = settings83.getAsGroups();
        java.lang.String[] strArray89 = settings83.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate90 = null;
        org.elasticsearch.common.settings.Settings settings91 = settings83.filter(strPredicate90);
        org.elasticsearch.common.settings.Settings settings92 = indexScopedSettings82.applySettings(settings91);
        java.lang.String str94 = settings91.get("index.creation_date");
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings91);
        org.elasticsearch.common.unit.TimeValue timeValue96 = indexSettings95.getRefreshInterval();
        org.elasticsearch.common.unit.TimeValue timeValue97 = settings3.getAsTime("index.shared_filesystem.recover_on_any_node", timeValue96);
        java.lang.Class<?> wildcardClass98 = timeValue96.getClass();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + property21 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property21.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNull(mappingMetaData81);
        org.junit.Assert.assertNotNull(indexScopedSettings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertNotNull(timeValue97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.shared_filesystem.recover_on_any_node", custom7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("false");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.removeAllAliases();
        long long9 = builder8.version();
        int int10 = builder8.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getAsGroups();
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        java.lang.Boolean boolean10 = settings7.getAsBoolean("index.shadow_replicas", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        boolean boolean12 = indexScopedSettings0.hasDynamicSetting("index.number_of_replicas");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting14 = indexScopedSettings0.get("index.");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(wildcardSetting14);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.internalMap();
        java.lang.String str29 = builder26.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder26.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.loadFromSource("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder21.settings(builder33);
        int int37 = builder36.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability77 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue78 = null; // flaky: indexSettings72.getRefreshInterval();
        org.apache.lucene.index.MergePolicy mergePolicy79 = null; // flaky: indexSettings72.getMergePolicy();
        int int80 = 0; // flaky: indexSettings72.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability77 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability77.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(timeValue78);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10000 + "'", int80 == 10000);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        long long78 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version80 = indexMetaData0.getCreationVersion();
        // The following exception was thrown during execution in test generation
        try {
            int int82 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of source shards [1] must be a must be a multiple of [1]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(version80);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("state-");
        org.elasticsearch.common.settings.Settings settings5 = settings1.getByPrefix("index.shared_filesystem");
        boolean boolean6 = settings1.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings1.getAsGroups();
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        java.lang.String[] strArray25 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder21.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder21.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder21.setRoutingNumShards((int) 'a');
        int int33 = builder21.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.internalMap();
        java.lang.String str5 = builder2.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put(strMap7);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put(strMap7);
        org.elasticsearch.common.settings.Settings settings10 = builder9.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean15 = settings12.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        indexScopedSettings0.validate(settings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        java.lang.String str21 = builder18.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.put("_na_", 1.0d);
        java.lang.String[] strArray26 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.putArray("_na_", strArray26);
        indexScopedSettings17.validate(builder27);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        indexScopedSettings17.validate(settings29);
        java.lang.String str35 = settings29.get("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        java.lang.String str41 = builder38.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder42.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder38.put(strMap43);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder36.put(strMap43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.loadFromSource("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap49 = builder48.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder48.put(strMap55);
        boolean boolean59 = indexScopedSettings0.updateDynamicSettings(settings29, builder47, builder57, "index.blocks.read_only");
        org.elasticsearch.common.settings.Setting.Property property60 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap62 = builder61.internalMap();
        java.lang.String str64 = builder61.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap66 = builder65.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder61.put(strMap66);
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap69 = builder68.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put(strMap69);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder67.put("active_allocations", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder67.put("index.data_path", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder67.put("index.shadow_replicas", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder79.putNull("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate(builder79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [active_allocations]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + false + "'", boolean32, false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + property60 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property60.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = settings2.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getAsGroups();
        java.lang.String[] strArray13 = settings7.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings7.filter(strPredicate14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings6.applySettings(settings15);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings6.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        indexScopedSettings6.validate(builder18);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        boolean boolean32 = indexScopedSettings6.updateDynamicSettings(settings21, builder28, builder29, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings41 = builder40.build();
        java.lang.String str43 = builder40.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder49.putProperties(strMap55, strPredicate57, strFunction58);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putProperties(strMap38, strPredicate57, strFunction60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings5, strPredicate57, indexScopedSettings62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        java.util.Set<java.lang.String> strSet76 = null; // flaky: indexMetaData1.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings77 = indexMetaData1.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData1.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = indexMetaData1.mapping("index.creation_date_string");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet84 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(97, indexMetaData1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNull(mappingMetaData79);
        org.junit.Assert.assertNull(mappingMetaData82);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings14 = settings12.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings17.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getAsGroups();
        java.lang.String[] strArray23 = settings17.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings17.filter(strPredicate24);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings16.applySettings(settings25);
        org.elasticsearch.common.settings.Setting.Property property27 = indexScopedSettings16.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        indexScopedSettings16.validate(builder28);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings33 = builder32.build();
        java.lang.String str35 = builder32.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder39.internalMap();
        boolean boolean42 = indexScopedSettings16.updateDynamicSettings(settings31, builder38, builder39, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder43.internalMap();
        java.lang.String str46 = builder43.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder47 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put(strMap48);
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings51 = builder50.build();
        java.lang.String str53 = builder50.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder50.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap61 = builder60.internalMap();
        java.lang.String str63 = builder60.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = builder64.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder60.put(strMap65);
        java.util.function.Predicate<java.lang.String> strPredicate67 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction68 = null;
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder59.putProperties(strMap65, strPredicate67, strFunction68);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder39.putProperties(strMap48, strPredicate67, strFunction70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings73.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings73.getAsGroups();
        java.lang.String[] strArray79 = settings73.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.Settings settings81 = settings73.filter(strPredicate80);
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings72.applySettings(settings81);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings15, strPredicate67, indexScopedSettings72);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters84 = indexMetaData11.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap85 = indexMetaData11.getAliases();
        org.elasticsearch.Version version86 = indexMetaData11.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder8.put("index.uuid", version86);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + property27 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property27.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNull(discoveryNodeFilters84);
        org.junit.Assert.assertNotNull(strImmutableOpenMap85);
        org.junit.Assert.assertNotNull(version86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings11.getAsGroups();
        java.lang.String[] strArray17 = settings11.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings11.filter(strPredicate18);
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings10.applySettings(settings19);
        java.lang.String[] strArray22 = settings19.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings24.getAsGroups();
        java.lang.String[] strArray30 = settings24.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings24.filter(strPredicate31);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        org.elasticsearch.common.unit.TimeValue timeValue36 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue37 = settings32.getAsTime("index.auto_expand_replicas", timeValue36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = settings19.getAsTime("index.auto_expand_replicas", timeValue37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder0.put(settings19);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings19.getAsMap();
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings19.getAsGroups(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        int int77 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 10);
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        java.lang.String[] strArray12 = settings9.getAsArray("state-");
        java.lang.Boolean boolean15 = settings9.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        java.lang.String str19 = settings9.get("", "index.creation_date");
        java.lang.Boolean boolean22 = settings9.getAsBoolean("", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings settings24 = settings9.getAsSettings("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.creation_date" + "'", str19, "index.creation_date");
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertNotNull(settings24);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData78 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.Version version79 = indexMetaData0.getCreationVersion();
        long long80 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap83 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap84 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNull(mappingMetaData78);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData82);
        org.junit.Assert.assertNotNull(strImmutableOpenMap83);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap84);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.auto_expand_replicas", true);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings15);
        java.util.Set<java.lang.String> strSet22 = settings21.names();
        java.lang.String str24 = settings21.toDelimitedString('#');
        java.lang.Boolean boolean27 = settings21.getAsBoolean("false", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        java.lang.String[] strArray30 = new java.lang.String[] { "index.creation_date_string", "index.version.minimum_compatible", "index.version.created_string", "_na_", "index.shared_filesystem", "index.creation_date_string", "index.version.upgraded", "_na_", "index.data_path", "index.shadow_replicas", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "index.blocks.write", "index.priority", "index.blocks.metadata", "index.version.created", "index.auto_expand_replicas", "index.data_path", "index.data_path", "primary_terms", "index.uuid" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder0.putArray("archived.", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder0.put("index.version.upgraded_string", (double) 1);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder0.normalizePrefix("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig73 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        boolean boolean74 = false; // flaky: indexSettings72.isWarmerEnabled();
        boolean boolean75 = false; // flaky: indexSettings72.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue76 = null; // flaky: indexSettings72.getRefreshInterval();
        boolean boolean77 = false; // flaky: indexSettings72.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig73);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Settings settings75 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: settings75.getAsSettings("index.blocks.write");
        java.lang.String str79 = null; // flaky: settings75.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(settings75);
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        boolean boolean77 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        java.lang.String[] strArray12 = settings9.getAsArray("state-");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("hi!");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String str89 = settings86.get("index.creation_date");
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig91 = indexSettings90.getMergeSchedulerConfig();
        int int92 = indexSettings90.getNumberOfShards();
        org.elasticsearch.index.translog.Translog.Durability durability93 = indexSettings90.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + durability93 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability93.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        boolean boolean77 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.settings.Settings settings78 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate86 = null;
        org.elasticsearch.common.settings.Settings settings87 = settings79.filter(strPredicate86);
        java.util.Set<java.lang.String> strSet88 = settings79.names();
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings89.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings89.getAsGroups();
        java.lang.String[] strArray95 = settings89.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate96 = null;
        org.elasticsearch.common.settings.Settings settings97 = settings89.filter(strPredicate96);
        boolean boolean98 = settings79.equals((java.lang.Object) settings89);
        org.elasticsearch.index.IndexSettings indexSettings99 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray6 = settings0.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate7 = null;
        org.elasticsearch.common.settings.Settings settings8 = settings0.filter(strPredicate7);
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.common.settings.Settings settings10 = settings8.filter(strPredicate9);
        java.lang.String[] strArray12 = settings8.getAsArray("hi!");
        java.util.Set<java.lang.String> strSet13 = settings8.names();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = settings8.getAsStructuredMap();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = settings8.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings5.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getAsGroups();
        java.lang.String[] strArray11 = settings5.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate12 = null;
        org.elasticsearch.common.settings.Settings settings13 = settings5.filter(strPredicate12);
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings4.applySettings(settings13);
        org.elasticsearch.common.settings.Setting.Property property15 = indexScopedSettings4.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.internalMap();
        indexScopedSettings4.validate(builder16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder16.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings23.getAsGroups();
        java.lang.String[] strArray29 = settings23.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings23.filter(strPredicate30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings22.applySettings(settings31);
        java.lang.String str34 = settings31.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings37 = builder36.build();
        java.lang.String str39 = builder36.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder36.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder36.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", 10L);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings50.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings50.getAsGroups();
        java.lang.String[] strArray57 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray59 = settings50.getAsArray("index.creation_date_string", strArray57, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder48.putArray("state-", strArray59);
        java.lang.String[] strArray62 = settings31.getAsArray("false", strArray59, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder20.putArray("index.priority", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder63.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder1.settings(builder63);
        int int66 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + property15 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property15.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = null; // flaky: indexSettings72.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData79);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) 10);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        int int79 = 0; // flaky: indexSettings72.getNumberOfShards();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher80 = null; // flaky: indexSettings72.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher80);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder33.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet42);
        int int46 = builder45.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder60.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder57.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder50.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder25.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet69);
        long long75 = builder25.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder25.version(1L);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder1.index("primary_terms");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = builder1.mapping("10.0");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(mappingMetaData19);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getAsGroups();
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getAsGroups(false);
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings7);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String str89 = settings86.get("index.creation_date");
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        int int91 = indexSettings90.getMaxRefreshListeners();
        org.elasticsearch.common.settings.Settings settings92 = indexSettings90.getNodeSettings();
        boolean boolean93 = indexSettings90.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1000 + "'", int91 == 1000);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder0.put("_na_", 0L);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = settings13.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.put(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder16.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.priority", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("state-");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = settings22.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.put(settings22);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings32 = builder31.build();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = settings32.getAsMap();
        java.lang.Class<?> wildcardClass34 = strMap33.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("index.", (java.lang.Class) wildcardClass34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder35.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder35.put("index.uuid", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shadow_replicas", 0.0f);
        java.io.InputStream inputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.loadFromStream("10.0", inputStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        indexScopedSettings0.validate(builder12);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings17 = builder16.build();
        java.lang.String str19 = builder16.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        boolean boolean26 = indexScopedSettings0.updateDynamicSettings(settings15, builder22, builder23, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder22.replacePropertyPlaceholders();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.put(objDictionary28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder1 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        java.lang.String str4 = builder1.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("_na_", 1.0d);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.putArray("_na_", strArray9);
        indexScopedSettings0.validate(builder10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        org.elasticsearch.common.settings.Setting.Property property23 = indexScopedSettings12.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        indexScopedSettings12.validate(builder24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings29 = builder28.build();
        java.lang.String str31 = builder28.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        boolean boolean38 = indexScopedSettings12.updateDynamicSettings(settings27, builder34, builder35, "_na_");
        indexScopedSettings0.validate(settings27);
        org.elasticsearch.common.settings.Setting.Property property40 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting41 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer42 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting41, booleanConsumer42);
        org.elasticsearch.common.settings.Setting.Property property44 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting46 = indexScopedSettings0.get("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + property23 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property23.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + property40 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property40.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(booleanSetting41);
        org.junit.Assert.assertTrue("'" + property44 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property44.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNull(wildcardSetting46);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.hasCustomDataPath();
        int int75 = 0; // flaky: indexSettings72.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean75 = indexMetaData0.isSameUUID("");
        int int76 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        int int76 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData0.mapping("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder80.putMapping("index.priority", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(mappingMetaData79);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet16);
        int int19 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder7.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder7.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder5.state(state22);
        byte byte25 = state22.id();
        byte byte26 = state22.id();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 1 + "'", byte25 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 1 + "'", byte26 == (byte) 1);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder79 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap80 = builder79.internalMap();
        java.lang.String str82 = builder79.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder79.put("_na_", 1.0d);
        java.lang.String[] strArray87 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder79.putArray("_na_", strArray87);
        indexScopedSettings78.validate(builder88);
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean93 = settings90.getAsBoolean("primary_terms", (java.lang.Boolean) false);
        indexScopedSettings78.validate(settings90);
        java.lang.String str96 = settings90.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings97 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData77, settings90);
        boolean boolean98 = false; // flaky: indexSettings97.hasCustomDataPath();
        boolean boolean99 = false; // flaky: indexSettings97.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertEquals("'" + boolean93 + "' != '" + false + "'", boolean93, false);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        java.lang.String[] strArray7 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray9 = settings0.getAsArray("index.creation_date_string", strArray7, (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings0.getGroups("index.version.created_string", true);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder14.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet23);
        int int26 = builder14.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder14.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings30.getAsGroups();
        java.lang.String[] strArray36 = settings30.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings30.filter(strPredicate37);
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings29.applySettings(settings38);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = settings39.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder28.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder41.setRoutingNumShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder41.primaryTerm(52, 10L);
        boolean boolean49 = settings0.equals((java.lang.Object) 10L);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap76 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder79.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder79.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder79.putAlias(builder84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.apache.lucene.index.MergePolicy mergePolicy77 = null; // flaky: indexSettings72.getMergePolicy();
        org.elasticsearch.common.settings.Settings settings78 = null; // flaky: indexSettings72.getNodeSettings();
        int int79 = 0; // flaky: indexSettings72.getMaxResultWindow();
        boolean boolean80 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        boolean boolean81 = false; // flaky: indexSettings72.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy77);
// flaky:         org.junit.Assert.assertNotNull(settings78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10000 + "'", int79 == 10000);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = null; // flaky: indexSettings72.getFlushThresholdSize();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.index.translog.Translog.Durability durability77 = null; // flaky: indexSettings72.getTranslogDurability();
        int int78 = 0; // flaky: indexSettings72.getNumberOfReplicas();
        int int79 = 0; // flaky: indexSettings72.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue75);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData76);
// flaky:         org.junit.Assert.assertTrue("'" + durability77 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability77.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        int int22 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder30.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder27.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet39);
        int int43 = builder42.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.removeAlias("primary_terms");
        java.lang.String[] strArray49 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder45.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder21.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder21.setRoutingNumShards(10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = settings2.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getAsGroups();
        java.lang.String[] strArray13 = settings7.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings7.filter(strPredicate14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings6.applySettings(settings15);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings6.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        indexScopedSettings6.validate(builder18);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        boolean boolean32 = indexScopedSettings6.updateDynamicSettings(settings21, builder28, builder29, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings41 = builder40.build();
        java.lang.String str43 = builder40.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder49.putProperties(strMap55, strPredicate57, strFunction58);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putProperties(strMap38, strPredicate57, strFunction60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings5, strPredicate57, indexScopedSettings62);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData1.getInitialRecoveryFilters();
        long long76 = indexMetaData1.getVersion();
        long long77 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap78 = indexMetaData1.getAliases();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet80 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(100, indexMetaData1, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet78 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.Version version79 = indexMetaData0.getCreationVersion();
        java.lang.String str80 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "_na_" + "'", str80, "_na_");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig73 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.apache.lucene.index.MergePolicy mergePolicy74 = null; // flaky: indexSettings72.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        java.lang.Boolean boolean76 = null; // flaky: indexSettings72.getValue(booleanSetting75);
        java.lang.String str77 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue78 = null; // flaky: indexSettings72.getFlushThresholdSize();
        int int79 = 0; // flaky: indexSettings72.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig73);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy74);
        org.junit.Assert.assertNotNull(booleanSetting75);
// flaky:         org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + false + "'", boolean76, false);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "_all" + "'", str77, "_all");
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder33.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder30.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder23.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet42);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = builder23.mapping("active_allocations");
        java.lang.String str49 = builder23.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = builder23.mapping("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "index.uuid" + "'", str49, "index.uuid");
        org.junit.Assert.assertNull(mappingMetaData51);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean76 = false; // flaky: indexSettings72.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.creation_date", false);
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.loadFromStream("", inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("archived.");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfShards((int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("_all");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder1.state(state16);
        int int18 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.putAlias(aliasMetaData19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79);
        java.lang.String str87 = indexSettings86.getDefaultField();
        boolean boolean88 = indexSettings86.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability89 = indexSettings86.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "_all" + "'", str87, "_all");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + durability89 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability89.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        java.lang.String[] strArray24 = settings21.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.diff(settings11, settings21);
        org.elasticsearch.common.settings.Setting.Property property26 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<?> wildcardSetting28 = indexScopedSettings0.get("primary_terms");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting30 = indexScopedSettings0.get("index.");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + property26 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property26.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNull(wildcardSetting28);
        org.junit.Assert.assertNull(wildcardSetting30);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap74 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData0.excludeFilters();
        boolean boolean77 = indexMetaData0.isSameUUID("index.shared_filesystem");
        int int78 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.hasCustomDataPath();
        boolean boolean75 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = null; // flaky: indexSettings72.getIndexMetaData();
        java.lang.String str77 = null; // flaky: indexSettings72.getNodeName();
        java.lang.String str78 = null; // flaky: indexSettings72.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        org.elasticsearch.index.translog.Translog.Durability durability76 = null; // flaky: indexSettings72.getTranslogDurability();
        boolean boolean77 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + durability76 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability76.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        int int6 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.index("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder3.numberOfShards((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = builder12.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: [index.version.created] is not present in the index settings for index with uuid: [null]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.setRoutingNumShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("false", custom9);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap76 = indexMetaData0.getAliases();
        java.lang.String str77 = indexMetaData0.getIndexUUID();
        long long78 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version79 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "_na_" + "'", str77, "_na_");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertNull(version79);
        org.junit.Assert.assertNull(mappingMetaData81);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.index.translog.Translog.Durability durability78 = null; // flaky: indexSettings72.getTranslogDurability();
        org.elasticsearch.Version version79 = null; // flaky: indexSettings72.getIndexVersionCreated();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig80 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertTrue("'" + durability78 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability78.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(version79);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig80);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        java.lang.String[] strArray12 = settings9.getAsArray("state-");
        java.lang.Boolean boolean15 = settings9.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = settings9.toXContent(xContentBuilder17, params18);
        java.lang.Object obj20 = null;
        boolean boolean21 = settings9.equals(obj20);
        java.lang.String str23 = settings9.toDelimitedString(' ');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings9.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(params18);
        org.junit.Assert.assertNull(xContentBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet15);
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAlias("primary_terms");
        int int22 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder30.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder27.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet39);
        int int43 = builder42.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder42.removeAlias("primary_terms");
        java.lang.String[] strArray49 = new java.lang.String[] { "index.blocks.metadata", "index.version.created_string" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder45.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder21.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.putMapping(mappingMetaData54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.hasCustomDataPath();
        java.lang.String str75 = null; // flaky: indexSettings72.customDataPath();
        boolean boolean76 = false; // flaky: indexSettings72.hasCustomDataPath();
        boolean boolean77 = false; // flaky: indexSettings72.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        int int77 = indexMetaData0.getRoutingNumShards();
        int int78 = indexMetaData0.getTotalNumberOfShards();
        int int79 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters80 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters80);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        int int76 = 0; // flaky: indexMetaData74.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder77 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings78 = builder77.build();
        java.lang.String str80 = builder77.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder77.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder86.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder89.put("index.creation_date", true);
        java.util.Map<java.lang.String, java.lang.String> strMap93 = builder92.internalMap();
        boolean boolean94 = false; // flaky: indexMetaData74.equals((java.lang.Object) builder92);
        int int95 = 0; // flaky: indexMetaData74.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (byte) 0);
        java.lang.String str4 = builder3.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a" + "'", str4, "index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        int int76 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters77 = indexMetaData0.excludeFilters();
        // The following exception was thrown during execution in test generation
        try {
            long long79 = indexMetaData0.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters77);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters77 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData0.mappingOrDefault("index.priority");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput80 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertNull(discoveryNodeFilters77);
        org.junit.Assert.assertNull(mappingMetaData79);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version76 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long79 = builder78.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean74 = indexMetaData0.isSameUUID("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet77 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNull(strSet77);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put(strMap8);
        java.nio.file.Path path10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.loadFromPath(path10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting1 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean2 = indexScopedSettings0.get(booleanSetting1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings4.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings4.getAsGroups();
        java.lang.String[] strArray10 = settings4.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate11 = null;
        org.elasticsearch.common.settings.Settings settings12 = settings4.filter(strPredicate11);
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings3.applySettings(settings12);
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings3.getScope();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings15.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getAsGroups();
        java.lang.String[] strArray21 = settings15.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.Settings settings23 = settings15.filter(strPredicate22);
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.Settings settings25 = settings23.filter(strPredicate24);
        java.lang.String str28 = settings25.get("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings3.applySettings(settings25);
        boolean boolean31 = indexScopedSettings3.hasDynamicSetting("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings35.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings35.getAsGroups();
        java.lang.String[] strArray41 = settings35.getAsArray("index.data_path");
        java.lang.String[] strArray43 = settings33.getAsArray("index.version.minimum_compatible", strArray41, (java.lang.Boolean) true);
        indexScopedSettings32.validate(settings33);
        boolean boolean46 = indexScopedSettings32.hasDynamicSetting("index.version.created_string");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting47 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting48 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_METADATA_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer49 = null;
        indexScopedSettings32.addSettingsUpdateConsumer(booleanSetting47, booleanSetting48, booleanBiConsumer49);
        java.lang.Boolean boolean51 = indexScopedSettings3.get(booleanSetting47);
        java.lang.Boolean boolean52 = indexScopedSettings0.get(booleanSetting47);
        boolean boolean54 = indexScopedSettings0.hasDynamicSetting("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(booleanSetting1);
        org.junit.Assert.assertEquals("'" + boolean2 + "' != '" + true + "'", boolean2, true);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "index.shared_filesystem" + "'", str28, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(booleanSetting47);
        org.junit.Assert.assertNotNull(booleanSetting48);
        org.junit.Assert.assertEquals("'" + boolean51 + "' != '" + false + "'", boolean51, false);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + false + "'", boolean52, false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue73 = null; // flaky: indexSettings72.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue74 = null; // flaky: indexSettings72.getRefreshInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig75 = null; // flaky: indexSettings72.getMergeSchedulerConfig();
        int int76 = 0; // flaky: indexSettings72.getMaxRefreshListeners();
        boolean boolean78 = false; // flaky: indexSettings72.matchesIndexName("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue73);
// flaky:         org.junit.Assert.assertNotNull(timeValue74);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1000 + "'", int76 == 1000);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.apache.lucene.index.MergePolicy mergePolicy77 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean78 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean79 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(mergePolicy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = builder3.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.creationDate((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putMapping("_na_", "index.uuid");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.number_of_replicas", (float) (byte) 1);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder12.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder12.put("", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder12.put("index.version.upgraded_string", "active_allocations");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        java.lang.String str7 = builder4.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder4.put(strMap9);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put(strMap12);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings15 = builder14.build();
        java.lang.String str17 = builder14.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.internalMap();
        java.lang.String str27 = builder24.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put(strMap29);
        java.util.function.Predicate<java.lang.String> strPredicate31 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction32 = null;
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder23.putProperties(strMap29, strPredicate31, strFunction32);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction34 = null;
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder0.putProperties(strMap12, strPredicate31, strFunction34);
        org.elasticsearch.common.settings.Settings settings36 = builder0.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        int int6 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.index("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder3.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("10.0", custom14);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings settings7 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        boolean boolean77 = false; // flaky: indexSettings72.isIndexUsingShadowReplicas();
        org.elasticsearch.common.unit.TimeValue timeValue78 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Settings settings79 = null; // flaky: indexSettings72.getNodeSettings();
        int int80 = 0; // flaky: indexSettings72.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue78);
// flaky:         org.junit.Assert.assertNotNull(settings79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.creation_date", true);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder15.put("index.version.upgraded", (float) 10000);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.shared_filesystem.recover_on_any_node", 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder19.put("10.0", (long) 1);
        java.nio.file.Path path26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.loadFromPath(path26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.internalMap();
        java.lang.String str5 = builder2.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("_na_", 1.0d);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.putArray("_na_", strArray10);
        indexScopedSettings1.validate(builder11);
        indexScopedSettings0.validate(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings15 = builder14.build();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = settings15.getAsBytesSize("index.blocks.metadata", byteSizeValue17);
        java.util.Set<java.lang.String> strSet19 = settings15.names();
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings22.getGroups("index.auto_expand_replicas", true);
        java.lang.String str28 = settings22.get("index.version.created_string", "index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings30.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings30.getAsGroups();
        java.lang.String[] strArray36 = settings30.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.Settings settings38 = settings30.filter(strPredicate37);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.Settings settings40 = settings38.filter(strPredicate39);
        java.lang.String[] strArray42 = settings38.getAsArray("hi!");
        java.util.Set<java.lang.String> strSet43 = settings38.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings46.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings46.getAsGroups();
        java.lang.String[] strArray52 = settings46.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.Settings settings54 = settings46.filter(strPredicate53);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings45.applySettings(settings54);
        java.lang.String[] strArray57 = settings54.getAsArray("state-");
        java.lang.Boolean boolean60 = settings54.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params63 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings54.toXContent(xContentBuilder62, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings38.toXContent(xContentBuilder44, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings22.toXContent(xContentBuilder29, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings20.toXContent(xContentBuilder21, params63);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "index.creation_date_string" + "'", str28, "index.creation_date_string");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + boolean60 + "' != '" + false + "'", boolean60, false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(params63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.internalMap();
        java.lang.String str15 = builder12.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.put(strMap17);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.put(strMap17);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder0.put(strMap17);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.put("index.shadow_replicas", (long) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.internalMap();
        java.lang.String str28 = builder25.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put(strMap30);
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put(strMap33);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder31.put("active_allocations", 0.0f);
        java.lang.String[] strArray66 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read", "false", "index.version.upgraded", "index.uuid", "index.version.created_string", "index.creation_date_string", "index.", "index.version.created", "index.uuid", "index.number_of_replicas", "index.auto_expand_replicas", "active_allocations", "index.priority", "index.blocks.metadata", "_na_", "index.blocks.read_only", "index.priority", "index.version.created_string", "index.auto_expand_replicas", "hi!", "index.version.minimum_compatible", "index.blocks.write", "index.version.created_string", "index.shared_filesystem.recover_on_any_node", "index.creation_date", "index.blocks.read" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder37.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList67);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder23.putArray("index.version.created_string", (java.util.List<java.lang.String>) strList67);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.version.created_string", 0.0d);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        boolean boolean76 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        boolean boolean77 = false; // flaky: indexSettings72.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = null; // flaky: new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = null; // flaky: builder75.version((long) 10);
        java.lang.String str78 = null; // flaky: builder77.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
// flaky:         org.junit.Assert.assertNotNull(builder77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.internalMap();
        java.lang.String str5 = builder2.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder2.put("_na_", 1.0d);
        java.lang.String[] strArray10 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder2.putArray("_na_", strArray10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings17 = builder16.build();
        java.lang.String str19 = builder16.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("index.auto_expand_replicas", (long) (byte) 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.creation_date_string", "index.version.minimum_compatible", "index.version.created_string", "_na_", "index.shared_filesystem", "index.creation_date_string", "index.version.upgraded", "_na_", "index.data_path", "index.shadow_replicas", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "index.blocks.write", "index.priority", "index.blocks.metadata", "index.version.created", "index.auto_expand_replicas", "index.data_path", "index.data_path", "primary_terms", "index.uuid" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder16.putArray("archived.", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder11.putArray("", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder11.putNull("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder1.settings(builder11);
        java.lang.String str54 = builder53.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder53.putMapping(mappingMetaData55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "index.blocks.metadata" + "'", str54, "index.blocks.metadata");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings7 = settings5.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings10.getAsGroups();
        java.lang.String[] strArray16 = settings10.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings10.filter(strPredicate17);
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings9.applySettings(settings18);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings9.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder21.internalMap();
        indexScopedSettings9.validate(builder21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings26 = builder25.build();
        java.lang.String str28 = builder25.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        boolean boolean35 = indexScopedSettings9.updateDynamicSettings(settings24, builder31, builder32, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        java.lang.String str39 = builder36.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder36.put(strMap41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        java.lang.String str46 = builder43.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder43.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        java.lang.String str56 = builder53.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap58 = builder57.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put(strMap58);
        java.util.function.Predicate<java.lang.String> strPredicate60 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction61 = null;
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder52.putProperties(strMap58, strPredicate60, strFunction61);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction63 = null;
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.putProperties(strMap41, strPredicate60, strFunction63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings66.getAsGroups();
        java.lang.String[] strArray72 = settings66.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate73 = null;
        org.elasticsearch.common.settings.Settings settings74 = settings66.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings65.applySettings(settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings8, strPredicate60, indexScopedSettings65);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters77 = indexMetaData4.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state78 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder3.state(state78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder3.index("hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strPredicate60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNull(discoveryNodeFilters77);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state78.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        int int75 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.index.Index index76 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int78 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(index76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getGroups("index.auto_expand_replicas", true);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings7 = settings0.filter(strPredicate6);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings7);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings7.getGroups("0", true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = null; // flaky: indexSettings72.getIndexMetaData();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = null; // flaky: indexSettings72.getFlushThresholdSize();
        boolean boolean76 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData74);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings4 = builder3.build();
        org.elasticsearch.common.settings.Settings settings6 = settings4.getByPrefix("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        org.elasticsearch.common.settings.Settings settings8 = indexScopedSettings0.dryRun(settings4);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings0.get("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(wildcardSetting10);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings12.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings12.getAsGroups();
        java.lang.String[] strArray18 = settings12.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.common.settings.Settings settings20 = settings12.filter(strPredicate19);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.Settings settings22 = settings20.filter(strPredicate21);
        java.lang.String str25 = settings22.get("index.auto_expand_replicas", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.applySettings(settings22);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer28 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting27, booleanConsumer28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder32.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet41);
        int int44 = builder32.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder32.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings48.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings48.getAsGroups();
        java.lang.String[] strArray54 = settings48.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.Settings settings56 = settings48.filter(strPredicate55);
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings47.applySettings(settings56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = settings57.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder46.settings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder59.numberOfShards((int) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        java.lang.String[] strArray74 = settings71.getAsArray("state-");
        java.lang.Boolean boolean77 = settings71.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        boolean boolean82 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings78);
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings78);
        java.util.function.Predicate<java.lang.String> strPredicate84 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings85 = settings78.filter(strPredicate84);
        org.elasticsearch.common.settings.Settings settings86 = settings71.filter(strPredicate84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder61.settings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap90 = settings71.getGroups("_all", false);
        org.elasticsearch.common.settings.Settings settings92 = settings71.getByPrefix("index.uuid");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings71.getAsGroups();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.validate("index.version.upgraded_string", settings71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.upgraded_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "index.shared_filesystem" + "'", str25, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertEquals("'" + boolean77 + "' != '" + false + "'", boolean77, false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strPredicate84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strMap93);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder1.index("primary_terms");
        int int18 = builder17.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.putMapping("index.auto_expand_replicas", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = settings2.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings7.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings7.getAsGroups();
        java.lang.String[] strArray13 = settings7.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.common.settings.Settings settings15 = settings7.filter(strPredicate14);
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings6.applySettings(settings15);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings6.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.internalMap();
        indexScopedSettings6.validate(builder18);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.internalMap();
        boolean boolean32 = indexScopedSettings6.updateDynamicSettings(settings21, builder28, builder29, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        java.lang.String str36 = builder33.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder37.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put(strMap38);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings41 = builder40.build();
        java.lang.String str43 = builder40.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.internalMap();
        java.lang.String str53 = builder50.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder54 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder50.put(strMap55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction58 = null;
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder49.putProperties(strMap55, strPredicate57, strFunction58);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction60 = null;
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putProperties(strMap38, strPredicate57, strFunction60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings63.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getAsGroups();
        java.lang.String[] strArray69 = settings63.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.Settings settings71 = settings63.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings62.applySettings(settings71);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings5, strPredicate57, indexScopedSettings62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        java.util.Set<java.lang.String> strSet76 = null; // flaky: indexMetaData1.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings77 = indexMetaData1.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData79 = indexMetaData1.mappingOrDefault("index.creation_date_string");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet81 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(97, indexMetaData1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNull(mappingMetaData79);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet95 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap96 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state97 = indexMetaData0.getState();
        byte byte98 = state97.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(strSet95);
        org.junit.Assert.assertNotNull(strImmutableOpenMap96);
        org.junit.Assert.assertTrue("'" + state97 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state97.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte98 + "' != '" + (byte) 0 + "'", byte98 == (byte) 0);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        java.lang.String str12 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings14 = builder13.build();
        java.lang.String str16 = builder13.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder13.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        java.lang.String str26 = builder23.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.put(strMap28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder22.putProperties(strMap28, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("state-");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = settings35.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder42.internalMap();
        java.lang.String str45 = builder42.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromSource("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings53 = builder52.build();
        java.lang.String str55 = builder52.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put("index.shared_filesystem", "active_allocations");
        boolean boolean63 = indexScopedSettings0.updateDynamicSettings(settings35, builder51, builder61, "_all");
        java.lang.String str64 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings65.getAsGroups();
        java.lang.String[] strArray72 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray74 = settings65.getAsArray("index.creation_date_string", strArray72, (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.String> strMap75 = settings65.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings65.getGroups("index.auto_expand_replicas", false);
        java.util.Map<java.lang.String, java.lang.Object> strMap79 = settings65.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings0.applySettings(settings65);
        java.util.Map<java.lang.String, java.lang.String> strMap81 = settings80.getAsMap();
        boolean boolean82 = settings80.isEmpty();
        java.lang.String str85 = settings80.get("index.blocks.read", "archived.");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "archived." + "'", str85, "archived.");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.common.unit.TimeValue timeValue93 = indexSettings92.getTranslogSyncInterval();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue94 = indexSettings92.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(timeValue93);
        org.junit.Assert.assertNotNull(byteSizeValue94);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("active_allocations", "index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder18.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet27);
        int int30 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder18.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings34.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getAsGroups();
        java.lang.String[] strArray40 = settings34.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.Settings settings42 = settings34.filter(strPredicate41);
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings33.applySettings(settings42);
        java.util.Map<java.lang.String, java.lang.Object> strMap44 = settings43.getAsStructuredMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder32.settings(settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.numberOfShards((int) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings49.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings49.getAsGroups();
        java.lang.String[] strArray55 = settings49.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate56 = null;
        org.elasticsearch.common.settings.Settings settings57 = settings49.filter(strPredicate56);
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings48.applySettings(settings57);
        java.lang.String[] strArray60 = settings57.getAsArray("state-");
        java.lang.Boolean boolean63 = settings57.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings64.getGroups("index.auto_expand_replicas", true);
        boolean boolean68 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings64);
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings64);
        java.util.function.Predicate<java.lang.String> strPredicate70 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings71 = settings64.filter(strPredicate70);
        org.elasticsearch.common.settings.Settings settings72 = settings57.filter(strPredicate70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder47.settings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings57.getGroups("_all", false);
        org.elasticsearch.common.settings.Settings settings78 = settings57.getByPrefix("index.uuid");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings57.getAsGroups();
        java.lang.String str81 = settings57.get("");
        java.lang.String str83 = settings57.get("index.data_path");
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap90 = settings87.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap91 = settings87.getAsGroups();
        java.lang.String[] strArray93 = settings87.getAsArray("index.data_path");
        java.lang.String[] strArray95 = settings85.getAsArray("index.version.minimum_compatible", strArray93, (java.lang.Boolean) true);
        java.lang.String[] strArray96 = settings57.getAsArray("index.data_path", strArray93);
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder15.putArray("", strArray93);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + boolean63 + "' != '" + false + "'", boolean63, false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strPredicate70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        boolean boolean78 = false; // flaky: indexSettings72.isQueryStringLenient();
        boolean boolean79 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        org.elasticsearch.common.unit.SizeValue sizeValue79 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue80 = null; // flaky: settings77.getAsSize("false", sizeValue79);
        java.lang.String str82 = null; // flaky: settings77.toDelimitedString('#');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNull(sizeValue80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting3 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer4 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting3, booleanConsumer4);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray13 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray15 = settings6.getAsArray("index.creation_date_string", strArray13, (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings6.getGroups("index.version.created_string", true);
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings0.applySettings(settings6);
        org.elasticsearch.common.settings.Settings settings21 = settings6.getAsSettings("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(booleanSetting3);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.number_of_replicas", (float) (byte) 1);
        java.lang.String str17 = builder12.get("index.version.created");
        java.nio.file.Path path18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder12.loadFromPath(path18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("state-");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = settings22.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.put(settings22);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder21.put(settings27);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings32 = builder31.build();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = settings32.getAsMap();
        java.lang.Class<?> wildcardClass34 = strMap33.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("index.", (java.lang.Class) wildcardClass34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder35.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder35.put("index.uuid", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shadow_replicas", 0.0f);
        java.lang.Class<?> wildcardClass43 = builder42.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((long) (byte) 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String[] strArray89 = settings86.getAsArray("state-");
        java.lang.String[] strArray91 = settings86.getAsArray("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters94 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters95 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters96 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.Settings settings97 = indexMetaData0.getSettings();
        boolean boolean98 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings97);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNull(discoveryNodeFilters94);
        org.junit.Assert.assertNull(discoveryNodeFilters95);
        org.junit.Assert.assertNull(discoveryNodeFilters96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        int int78 = 0; // flaky: indexSettings72.getMaxRefreshListeners();
        boolean boolean79 = false; // flaky: indexSettings72.isWarmerEnabled();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = null; // flaky: indexSettings72.getFlushThresholdSize();
        int int81 = 0; // flaky: indexSettings72.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1000 + "'", int78 == 1000);
// flaky:         org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10000 + "'", int81 == 10000);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        long long75 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData77 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings78 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings78.getAsGroups(false);
        boolean boolean81 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings78);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings78);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNull(mappingMetaData77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        int int76 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str78 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version79 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_na_" + "'", str78, "_na_");
        org.junit.Assert.assertNotNull(version79);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.creation_date", false);
        java.nio.file.Path path10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.loadFromPath(path10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder2.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        java.lang.String[] strArray8 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.putArray("_na_", strArray8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings11.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings11.getAsGroups();
        java.lang.String[] strArray17 = settings11.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.common.settings.Settings settings19 = settings11.filter(strPredicate18);
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings10.applySettings(settings19);
        java.lang.String[] strArray22 = settings19.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings24.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings24.getAsGroups();
        java.lang.String[] strArray30 = settings24.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.Settings settings32 = settings24.filter(strPredicate31);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.Settings settings34 = settings32.filter(strPredicate33);
        org.elasticsearch.common.unit.TimeValue timeValue36 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue37 = settings32.getAsTime("index.auto_expand_replicas", timeValue36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = settings19.getAsTime("index.auto_expand_replicas", timeValue37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder0.put(settings19);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings42 = builder41.build();
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("state-");
        java.lang.String[] strArray46 = settings42.getAsArray("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder0.putArray("index.shared_filesystem.recover_on_any_node", strArray46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("index.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("false");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.setRoutingNumShards(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.internalMap();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings9.getAsGroups();
        java.lang.String[] strArray15 = settings9.getAsArray("index.data_path");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings9.getAsGroups(false);
        java.lang.String[] strArray19 = settings9.getAsArray("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder6.extendArray("index.blocks.write", strArray19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.settings(builder20);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder20.put("index.version.upgraded", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder20.put("hi!", false);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.put("index.creation_date_string", (long) (byte) 10, byteSizeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.creationDate((long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        java.lang.String str30 = builder27.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put("_na_", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.settings(builder27);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder27.put("_na_", (double) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        java.lang.String str41 = builder38.get("hi!");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = settings43.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String str49 = settings43.get("index.blocks.write", "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings53.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings53.getAsGroups();
        java.lang.String[] strArray59 = settings53.getAsArray("index.data_path");
        java.lang.String[] strArray61 = settings51.getAsArray("index.version.minimum_compatible", strArray59, (java.lang.Boolean) true);
        java.lang.String[] strArray63 = settings43.getAsArray("index.version.created_string", strArray59, (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder38.extendArray("", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder27.put((java.lang.Object[]) strArray63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder18.settings(builder65);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder65.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "index.blocks.read_only" + "'", str49, "index.blocks.read_only");
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean74 = indexMetaData0.isSameUUID("index.blocks.metadata");
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        java.util.Set<java.lang.String> strSet77 = null; // flaky: indexMetaData0.activeAllocationIds(97);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(strSet77);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap74 = indexMetaData0.getAliases();
        int int75 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.creation_date", false);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder6.put("index.version.upgraded_string", 1.0f);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder6.put("index.shared_filesystem", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder6.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", (int) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("active_allocations", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.version.created", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings13.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups();
        java.lang.String[] strArray19 = settings13.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.Settings settings21 = settings13.filter(strPredicate20);
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings12.applySettings(settings21);
        java.lang.String[] strArray24 = settings21.getAsArray("state-");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings0.diff(settings11, settings21);
        org.elasticsearch.common.settings.Setting.Property property26 = indexScopedSettings0.getScope();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = org.elasticsearch.index.IndexSettings.ALLOW_UNMAPPED;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings29.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings29.getAsGroups();
        java.lang.String[] strArray35 = settings29.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.Settings settings37 = settings29.filter(strPredicate36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings28.applySettings(settings37);
        org.elasticsearch.common.settings.Setting.Property property39 = indexScopedSettings28.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        indexScopedSettings28.validate(builder40);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting43 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        java.lang.Boolean boolean44 = indexScopedSettings28.get(booleanSetting43);
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting27, booleanSetting43, booleanBiConsumer45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: setting [index.query.parse.allow_unmapped_fields] is not dynamic");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + property26 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property26.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + property39 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property39.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(booleanSetting43);
        org.junit.Assert.assertEquals("'" + boolean44 + "' != '" + false + "'", boolean44, false);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings1 = builder0.build();
        java.lang.String str3 = builder0.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.lang.String str13 = builder10.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder10.put(strMap15);
        java.util.function.Predicate<java.lang.String> strPredicate17 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction18 = null;
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder9.putProperties(strMap15, strPredicate17, strFunction18);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder19.putNull("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings23.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings23.getAsGroups();
        java.lang.String[] strArray29 = settings23.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.Settings settings31 = settings23.filter(strPredicate30);
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings22.applySettings(settings31);
        java.lang.String[] strArray34 = settings31.getAsArray("state-");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder21.put((java.lang.Object[]) strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("index.blocks.read", (double) (short) 1);
        java.lang.String str42 = builder35.remove("index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strPredicate17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings7 = settings5.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings10.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings10.getAsGroups();
        java.lang.String[] strArray16 = settings10.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate17 = null;
        org.elasticsearch.common.settings.Settings settings18 = settings10.filter(strPredicate17);
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings9.applySettings(settings18);
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings9.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder21.internalMap();
        indexScopedSettings9.validate(builder21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings26 = builder25.build();
        java.lang.String str28 = builder25.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder25.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        boolean boolean35 = indexScopedSettings9.updateDynamicSettings(settings24, builder31, builder32, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        java.lang.String str39 = builder36.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder36.put(strMap41);
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        java.lang.String str46 = builder43.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder43.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        java.lang.String str56 = builder53.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap58 = builder57.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put(strMap58);
        java.util.function.Predicate<java.lang.String> strPredicate60 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction61 = null;
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder52.putProperties(strMap58, strPredicate60, strFunction61);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction63 = null;
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.putProperties(strMap41, strPredicate60, strFunction63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings66.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings66.getAsGroups();
        java.lang.String[] strArray72 = settings66.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate73 = null;
        org.elasticsearch.common.settings.Settings settings74 = settings66.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings65.applySettings(settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings8, strPredicate60, indexScopedSettings65);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters77 = indexMetaData4.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state78 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder3.state(state78);
        long long81 = builder79.primaryTerm(5);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strPredicate60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNull(discoveryNodeFilters77);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state78.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.state(state19);
        byte byte21 = state19.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.state(state19);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.putAlias(aliasMetaData23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 1 + "'", byte21 == (byte) 1);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        long long75 = indexMetaData0.getVersion();
        org.apache.lucene.util.Version version76 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNull(version76);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        long long75 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData77 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings78 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap80 = settings78.getAsGroups(false);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings78, streamOutput81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNull(mappingMetaData77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap80);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.lang.String str2 = builder0.get("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder0.put("hi!", "index.version.created");
        org.elasticsearch.common.settings.Settings settings6 = builder0.build();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.normalizePrefix("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        int int74 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean75 = false; // flaky: indexSettings72.isQueryStringLenient();
        java.lang.String str76 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.settings.Settings settings77 = null; // flaky: indexSettings72.getNodeSettings();
        java.lang.String str78 = null; // flaky: indexSettings72.getNodeName();
        boolean boolean80 = false; // flaky: indexSettings72.matchesIndexName("10.0");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher81 = null; // flaky: indexSettings72.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_na_" + "'", str76, "_na_");
// flaky:         org.junit.Assert.assertNotNull(settings77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher81);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings0.getScope();
        java.lang.String str12 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings14 = builder13.build();
        java.lang.String str16 = builder13.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder13.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.internalMap();
        java.lang.String str26 = builder23.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.put(strMap28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction31 = null;
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder22.putProperties(strMap28, strPredicate30, strFunction31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("state-");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = settings35.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder42.internalMap();
        java.lang.String str45 = builder42.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder40.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromSource("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings53 = builder52.build();
        java.lang.String str55 = builder52.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put("index.shared_filesystem", "active_allocations");
        boolean boolean63 = indexScopedSettings0.updateDynamicSettings(settings35, builder51, builder61, "_all");
        java.lang.String str64 = indexScopedSettings0.nodeName();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings65.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap69 = settings65.getAsGroups();
        java.lang.String[] strArray72 = new java.lang.String[] { "index.shared_filesystem" };
        java.lang.String[] strArray74 = settings65.getAsArray("index.creation_date_string", strArray72, (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.String> strMap75 = settings65.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings65.getGroups("index.auto_expand_replicas", false);
        java.util.Map<java.lang.String, java.lang.Object> strMap79 = settings65.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings0.applySettings(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings65.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet75 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData78 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.Version version79 = indexMetaData0.getCreationVersion();
        long long80 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder82.setRoutingNumShards((int) (short) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNull(mappingMetaData78);
        org.junit.Assert.assertNotNull(version79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        java.lang.String str74 = null; // flaky: indexSettings72.getNodeName();
        long long75 = 0L; // flaky: indexSettings72.getGcDeletesInMillis();
        java.lang.String str76 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue77 = null; // flaky: indexSettings72.getTranslogSyncInterval();
        java.lang.String str78 = null; // flaky: indexSettings72.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = null; // flaky: indexSettings72.getIndexMetaData();
        boolean boolean81 = false; // flaky: indexSettings72.matchesIndexName("index.data_path");
        java.lang.String str82 = null; // flaky: indexSettings72.getUUID();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue83 = null; // flaky: indexSettings72.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 60000L + "'", long75 == 60000L);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "_all" + "'", str76, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_all" + "'", str78, "_all");
// flaky:         org.junit.Assert.assertNotNull(indexMetaData79);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "_na_" + "'", str82, "_na_");
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue83);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int75 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder76.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder78.index("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version74 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData0.includeFilters();
        long long80 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(version74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData76 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings78.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings78.getAsGroups();
        java.lang.String[] strArray84 = settings78.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate85 = null;
        org.elasticsearch.common.settings.Settings settings86 = settings78.filter(strPredicate85);
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings77.applySettings(settings86);
        java.lang.String str89 = settings86.get("index.creation_date");
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings86);
        org.apache.lucene.util.Version version91 = indexMetaData0.getMinimumCompatibleVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long93 = indexMetaData0.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(mappingMetaData76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(version91);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version75 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet78 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings79.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings79.getAsGroups();
        java.lang.String[] strArray85 = settings79.getAsArray("index.data_path");
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings79);
        java.lang.String str87 = indexSettings86.getDefaultField();
        boolean boolean88 = indexSettings86.isOnSharedFilesystem();
        boolean boolean89 = indexSettings86.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "_all" + "'", str87, "_all");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("_na_", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.put("active_allocations", (long) 1, timeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet10);
        int int13 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.removeAllAliases();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.setRoutingNumShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder15.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet24);
        int int27 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder15.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder15.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder13.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder7.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "index.creation_date_string", "primary_terms", "primary_terms", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder36.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet45);
        int int48 = builder36.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder36.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder36.state(state51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state55 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.state(state55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder36.state(state55);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = settings59.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        java.util.function.Predicate<java.lang.String> strPredicate71 = null;
        org.elasticsearch.common.settings.Settings settings72 = settings70.filter(strPredicate71);
        org.elasticsearch.common.unit.TimeValue timeValue74 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue75 = settings70.getAsTime("index.auto_expand_replicas", timeValue74);
        boolean boolean76 = settings61.equals((java.lang.Object) "index.auto_expand_replicas");
        java.util.Set<java.lang.String> strSet77 = settings61.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder36.putActiveAllocationIds((int) (byte) -1, strSet77);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder7.putActiveAllocationIds(0, strSet77);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + state55 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state55.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertNotNull(timeValue75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        int int2 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards((int) (short) 100);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings1.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings1.getAsGroups();
        java.lang.String[] strArray7 = settings1.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate8 = null;
        org.elasticsearch.common.settings.Settings settings9 = settings1.filter(strPredicate8);
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings0.applySettings(settings9);
        java.lang.String[] strArray12 = settings9.getAsArray("state-");
        java.lang.Boolean boolean15 = settings9.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = settings9.getAsMap();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings20.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getAsGroups();
        java.lang.String[] strArray26 = settings20.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.Settings settings28 = settings20.filter(strPredicate27);
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.Settings settings30 = settings28.filter(strPredicate29);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings33.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getAsGroups();
        java.lang.String[] strArray39 = settings33.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.Settings settings41 = settings33.filter(strPredicate40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings32.applySettings(settings41);
        java.lang.String[] strArray44 = settings41.getAsArray("state-");
        java.lang.Boolean boolean47 = settings41.getAsBoolean("index.creation_date_string", (java.lang.Boolean) false);
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings41);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params50 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = settings41.toXContent(xContentBuilder49, params50);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings30.toXContent(xContentBuilder31, params50);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = settings18.toXContent(xContentBuilder19, params50);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + false + "'", boolean47, false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(params50);
        org.junit.Assert.assertNull(xContentBuilder51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(xContentBuilder53);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings2.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings2.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.settings(settings2);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = builder1.primaryTerm((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        int int2 = builder1.numberOfShards();
        long long3 = builder1.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        boolean boolean73 = false; // flaky: indexSettings72.isQueryStringAnalyzeWildcard();
        boolean boolean74 = false; // flaky: indexSettings72.isOnSharedFilesystem();
        org.apache.lucene.index.MergePolicy mergePolicy75 = null; // flaky: indexSettings72.getMergePolicy();
        boolean boolean76 = false; // flaky: indexSettings72.isQueryStringAllowLeadingWildcard();
        boolean boolean77 = false; // flaky: indexSettings72.isTTLPurgeDisabled();
        boolean boolean78 = false; // flaky: indexSettings72.isWarmerEnabled();
        int int79 = 0; // flaky: indexSettings72.getNumberOfShards();
        boolean boolean80 = false; // flaky: indexSettings72.isIndexUsingShadowReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability81 = null; // flaky: indexSettings72.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertTrue("'" + durability81 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability81.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings3 = settings1.getByPrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings6.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings6.getAsGroups();
        java.lang.String[] strArray12 = settings6.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings6.filter(strPredicate13);
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings5.applySettings(settings14);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings5.getScope();
        org.elasticsearch.common.settings.Settings.Builder builder17 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        indexScopedSettings5.validate(builder17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings.Builder builder21 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings22 = builder21.build();
        java.lang.String str24 = builder21.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.internalMap();
        boolean boolean31 = indexScopedSettings5.updateDynamicSettings(settings20, builder27, builder28, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.lang.String str35 = builder32.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put(strMap37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings40 = builder39.build();
        java.lang.String str42 = builder39.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("index.auto_expand_replicas", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("index.shared_filesystem", "active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder49.internalMap();
        java.lang.String str52 = builder49.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put(strMap54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder48.putProperties(strMap54, strPredicate56, strFunction57);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction59 = null;
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder28.putProperties(strMap37, strPredicate56, strFunction59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings62.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings62.getAsGroups();
        java.lang.String[] strArray68 = settings62.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.Settings settings70 = settings62.filter(strPredicate69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings61.applySettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4, strPredicate56, indexScopedSettings61);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version74 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long77 = indexMetaData0.primaryTerm((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(version74);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        java.lang.String str3 = builder0.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put(strMap5);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.internalMap();
        java.lang.String str11 = builder8.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder8.put("_na_", 1.0d);
        java.lang.String[] strArray16 = new java.lang.String[] {};
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder8.putArray("_na_", strArray16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings settings23 = builder22.build();
        java.lang.String str25 = builder22.remove("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder22.put("index.auto_expand_replicas", (long) (byte) 0);
        java.lang.String[] strArray52 = new java.lang.String[] { "index.creation_date_string", "index.version.minimum_compatible", "index.version.created_string", "_na_", "index.shared_filesystem", "index.creation_date_string", "index.version.upgraded", "_na_", "index.data_path", "index.shadow_replicas", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "index.blocks.write", "index.priority", "index.blocks.metadata", "index.version.created", "index.auto_expand_replicas", "index.data_path", "index.data_path", "primary_terms", "index.uuid" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder22.putArray("archived.", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder17.putArray("", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder0.putArray("archived.", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings61.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getAsGroups();
        java.lang.String[] strArray67 = settings61.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.Settings settings69 = settings61.filter(strPredicate68);
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings60.applySettings(settings69);
        java.lang.String[] strArray72 = settings69.getAsArray("state-");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings74.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings74.getAsGroups();
        java.lang.String[] strArray80 = settings74.getAsArray("index.data_path");
        java.util.function.Predicate<java.lang.String> strPredicate81 = null;
        org.elasticsearch.common.settings.Settings settings82 = settings74.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings73.applySettings(settings82);
        java.lang.String[] strArray85 = settings82.getAsArray("state-");
        java.lang.String[] strArray87 = settings82.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder0.put("", "index.creation_date_string", strArray72, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder88.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", "10.0");
        java.util.Map<java.lang.String, java.lang.String> strMap92 = builder88.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(strMap92);
    }
}
