import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings3.getGroups("active_allocations", false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards((int) (short) 0);
        int int6 = builder5.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.put("", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings61.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings68 = settings61.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings60.dryRun(settings68);
        java.lang.String[] strArray76 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray77 = settings69.getAsArray("index.blocks.read_only", strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder55.extendArray("state-", strArray76);
        java.lang.String str80 = builder78.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = builder78.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder48.put(strMap81);
        java.lang.String str84 = builder48.get("false");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings62.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings69 = settings62.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings61.dryRun(settings69);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray78 = settings70.getAsArray("index.blocks.read_only", strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder56.extendArray("state-", strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder56.put("primary_terms", (float) (short) -1);
        java.util.Map<java.lang.String, java.lang.String> strMap83 = builder82.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder54.put(strMap83);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder54.put("index.blocks.read", (long) (short) 100);
        java.lang.String[] strArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder87.putArray("index.version.upgraded_string", strArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.util.Set<java.lang.String> strSet5 = settings3.names();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        int int10 = indexMetaData0.getRoutingFactor();
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index12 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(index12);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.Version version8 = null;
        org.elasticsearch.Version version9 = settings5.getAsVersion("index.data_path", version8);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = settings14.toXContent(xContentBuilder16, params17);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = settings5.toXContent(xContentBuilder10, params17);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder1, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(params17);
        org.junit.Assert.assertNull(xContentBuilder18);
        org.junit.Assert.assertNull(xContentBuilder19);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) '#');
        java.lang.String str5 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("index.", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        java.lang.String[] strArray26 = settings24.getAsArray("state-");
        java.lang.String[] strArray28 = settings24.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue30 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue31 = settings24.getAsSize("index.version.created_string", sizeValue30);
        java.util.Set<java.lang.String> strSet32 = settings24.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder18.putActiveAllocationIds((int) (byte) 1, strSet32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder18.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        int int41 = builder40.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.setRoutingNumShards(1);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean46 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings45);
        org.elasticsearch.common.settings.Settings settings48 = settings45.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        java.lang.String[] strArray51 = settings49.getAsArray("state-");
        java.lang.String[] strArray53 = settings49.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings49.getAsSize("index.version.created_string", sizeValue55);
        java.util.Set<java.lang.String> strSet57 = settings49.names();
        java.util.Set<java.lang.String> strSet58 = settings49.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder40.putActiveAllocationIds(0, strSet58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder37.putActiveAllocationIds((int) (short) -1, strSet58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder1.putActiveAllocationIds((int) 'a', strSet58);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.creation_date_string" + "'", str5, "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(sizeValue31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean9 = settings5.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings11.getGroups("index.uuid");
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        java.lang.String str19 = settings11.get("index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        long long6 = indexMetaData1.primaryTerm((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("true");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) (byte) 100);
        int int8 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.", "archived.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        java.lang.String[] strArray44 = settings42.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings42.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings47 = settings42.filter(strPredicate46);
        java.lang.String[] strArray49 = settings47.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder33.putArray("index.shared_filesystem", strArray49);
        java.lang.String str52 = builder33.remove("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder33.normalizePrefix("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData5);
        long long12 = indexMetaData5.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("index.blocks.write");
        int int5 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.", 0.0d);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean50 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings49);
        org.elasticsearch.common.settings.Settings settings52 = settings49.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings52);
        java.lang.Boolean boolean56 = settings52.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        boolean boolean57 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings52);
        boolean boolean58 = settings52.isEmpty();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = settings52.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction61 = null;
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder48.putProperties(strMap59, strPredicate60, strFunction61);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertEquals("'" + boolean56 + "' != '" + false + "'", boolean56, false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder7.settings(builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder7.removeAlias("index.creation_date");
        int int44 = builder7.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("index.blocks.write", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.version(5000099L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.removeAlias("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = builder14.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings42 = settings37.filter(strPredicate41);
        java.lang.String[] strArray44 = settings42.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder31.extendArray("state-", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder45.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.version.created", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("archived.");
        java.util.Set<java.lang.String> strSet20 = null; // flaky: indexMetaData16.activeAllocationIds((int) ' ');
        int int21 = indexMetaData16.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData16.getSettings();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder15.settings(settings24);
        int int27 = builder26.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(version10);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean10 = settings7.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings7.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = settings7.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings6.dryRun(settings14);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean20 = settings17.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings22);
        org.elasticsearch.common.settings.Settings settings25 = settings22.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params28 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = settings25.toXContent(xContentBuilder27, params28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = settings17.toXContent(xContentBuilder21, params28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = settings14.toXContent(xContentBuilder16, params28);
        org.elasticsearch.common.unit.SizeValue sizeValue33 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue34 = settings14.getAsSize("index.version.upgraded_string", sizeValue33);
        java.lang.String[] strArray36 = settings14.getAsArray("index.creation_date_string");
        java.lang.String[] strArray38 = settings4.getAsArray("", strArray36, (java.lang.Boolean) false);
        java.lang.Boolean boolean41 = settings4.getAsBoolean("index.uuid", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(params28);
        org.junit.Assert.assertNull(xContentBuilder29);
        org.junit.Assert.assertNull(xContentBuilder30);
        org.junit.Assert.assertNull(xContentBuilder31);
        org.junit.Assert.assertNull(sizeValue34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + boolean41 + "' != '" + false + "'", boolean41, false);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getRoutingFactor();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        long long5 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        java.lang.String str38 = builder32.remove("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder32.normalizePrefix("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.loadFromSource("index.number_of_shards");
        java.nio.file.Path path33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.loadFromPath(path33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        int int8 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.setRoutingNumShards((int) (byte) 100);
        java.lang.String str7 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAlias("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.creation_date_string" + "'", str7, "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.auto_expand_replicas", "index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putAlias(aliasMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData1.getAliases();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet9 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) '4', indexMetaData1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm((int) (short) 10, 60000L);
        int int7 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.number_of_shards", 0);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", "index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder1.settings(builder38);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = builder42.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.number_of_shards]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas(10000);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.putCustom("_all", custom11);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.put("100.0", (long) (byte) 0, byteSizeUnit48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.put("_na_", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("_all", (float) 1L);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.put("index.version.created", (double) '#');
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.number_of_replicas", "index.version.created");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.common.io.stream.StreamInput streamInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = indexMetaData0.readFrom(streamInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder51.put("", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder51.replacePropertyPlaceholders();
        java.nio.file.Path path57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder58 = builder56.loadFromPath(path57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.put("", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.creation_date", 5000099.0d);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder54.put("index.creation_date", "hi!");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder64 = builder60.put("index.version.created_string", (long) (short) 0, byteSizeUnit63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("index.shared_filesystem.recover_on_any_node", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.putCustom("", custom17);
        int int19 = builder18.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder51.put("_na_", (long) (short) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 1);
        int int13 = builder12.numberOfReplicas();
        int int14 = builder12.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version(5000099L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.primaryTerm((int) 'a', (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder1.getRoutingNumShards();
        int int4 = builder1.getRoutingNumShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.putMapping("index.blocks.read_only", "index.data_path");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putAlias(builder3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        long long5 = indexMetaData0.getVersion();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.put("_na_", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("_all", (float) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder0.put("false", 1.0f);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean9 = settings5.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings20 = settings13.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.Version version37 = null;
        org.elasticsearch.Version version38 = settings34.getAsVersion("index.data_path", version37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params46 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = settings43.toXContent(xContentBuilder45, params46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings34.toXContent(xContentBuilder39, params46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = settings22.toXContent(xContentBuilder30, params46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = settings13.toXContent(xContentBuilder21, params46);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = settings11.toXContent(xContentBuilder12, params46);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(version38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(params46);
        org.junit.Assert.assertNull(xContentBuilder47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertNull(xContentBuilder49);
        org.junit.Assert.assertNull(xContentBuilder50);
        org.junit.Assert.assertNull(xContentBuilder51);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        java.lang.Boolean boolean6 = settings3.getAsBoolean("index.", (java.lang.Boolean) true);
        java.lang.String str8 = settings3.toDelimitedString('#');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = settings3.getAsMemory("index.priority", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.priority] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putAlias(aliasMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.version.created_string");
        int int12 = builder11.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings5.getAsGroups();
        java.lang.String[] strArray16 = settings5.getAsArray("index.creation_date_string");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings5, streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder51.put("", 0L);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put(objDictionary56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.number_of_replicas", custom5);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putAlias(aliasMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder46.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.put("index.version.upgraded", 1.0f);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap66 = settings61.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings68 = settings61.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings60.dryRun(settings68);
        java.lang.String[] strArray76 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray77 = settings69.getAsArray("index.blocks.read_only", strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder55.extendArray("state-", strArray76);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder55.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder82.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings settings85 = builder82.build();
        java.lang.String[] strArray87 = settings85.getAsArray("5000099");
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder53.putArray("index.blocks.metadata", strArray87);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        org.elasticsearch.common.unit.SizeValue sizeValue6 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue7 = settings4.getAsSize("true", sizeValue6);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue10 = settings4.getAsMemory("state-", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [state-] with value [index.version.created] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(sizeValue7);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 1);
        int int13 = builder12.numberOfReplicas();
        int int14 = builder12.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((long) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.creation_date_string", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfShards(35);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder43.loadFromSource("_all");
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder92.put("_na_", (int) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder95.putNull("100.0");
        java.nio.file.Path path98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder99 = builder95.loadFromPath(path98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder2.mapping("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean15 = settings12.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings12.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings19 = settings12.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings11.dryRun(settings19);
        java.lang.String[] strArray27 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray28 = settings20.getAsArray("index.blocks.read_only", strArray27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.extendArray("state-", strArray27);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        java.lang.String[] strArray36 = settings34.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings34.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.put(strMap37);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder29.putArray("state-", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings60 = builder57.build();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder57.put("", "index.priority");
        java.lang.String str65 = builder63.get("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder2.settings(builder63);
        int int67 = builder66.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + true + "'", boolean15, true);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = settings3.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue3 = settings0.getAsBytesSize("index.auto_expand_replicas", byteSizeValue2);
        java.lang.String str5 = settings0.toDelimitedString('4');
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNull(byteSizeValue3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings4.getAsSize("true", sizeValue13);
        java.lang.String str16 = settings4.toDelimitedString('#');
        java.lang.String str19 = settings4.get("index.auto_expand_replicas", "true");
        java.lang.Boolean boolean22 = settings4.getAsBoolean("index.creation_date", (java.lang.Boolean) true);
        java.lang.Class<?> wildcardClass23 = settings4.getClass();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "true" + "'", str19, "true");
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder53.version((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = builder57.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: [index.version.created] is not present in the index settings for index with uuid: [null]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        int int6 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.setRoutingNumShards(100);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder53.putAlias(aliasMetaData56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_na_");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_na_" + "'", str2, "_na_");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int2 = indexMetaData1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData1.mappingOrDefault("index.blocks.write");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet7 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 0, indexMetaData1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.", "archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("archived.");
        long long41 = indexMetaData38.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap42 = indexMetaData38.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData38.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters44 = indexMetaData38.requireFilters();
        org.elasticsearch.Version version45 = indexMetaData38.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder33.put("index.number_of_replicas", version45);
        java.io.InputStream inputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.loadFromStream("_na_", inputStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNull(discoveryNodeFilters44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.setRoutingNumShards(35);
        long long11 = builder10.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.number_of_replicas", (double) 10L);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings35);
        org.elasticsearch.common.settings.Settings settings38 = settings35.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings39.getAsGroups();
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters46 = indexMetaData43.requireFilters();
        org.apache.lucene.util.Version version47 = indexMetaData43.getMinimumCompatibleVersion();
        org.elasticsearch.Version version48 = indexMetaData43.getUpgradedVersion();
        org.elasticsearch.Version version49 = settings39.getAsVersion("index.priority", version48);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder24.put("index.shared_filesystem.recover_on_any_node", version48);
        java.io.InputStream inputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder53 = builder24.loadFromStream("index.creation_date_string", inputStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNull(discoveryNodeFilters46);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(version48);
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        int int5 = builder3.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.Version version6 = null;
        org.elasticsearch.Version version7 = settings3.getAsVersion("index.data_path", version6);
        org.elasticsearch.common.unit.SizeValue sizeValue9 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue10 = settings3.getAsSize("state-", sizeValue9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = settings3.getAsStructuredMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(sizeValue10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        boolean boolean8 = settings4.isEmpty();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings4.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("true");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder5.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        long long42 = builder2.version();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = builder2.mapping("active_allocations");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNull(mappingMetaData44);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder54.put("index.blocks.read", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.creation_date_string", (float) '4');
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.loadFromSource("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.putAlias(aliasMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        int int9 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(version11);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue3 = settings0.getAsBytesSize("index.auto_expand_replicas", byteSizeValue2);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNull(byteSizeValue3);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.data_path");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(mappingMetaData4);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder50.putCustom("index.", custom52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((-1L));
        java.lang.Class<?> wildcardClass58 = builder57.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder46.put("index.shared_filesystem", (java.lang.Class) wildcardClass58);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.blocks.read", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean9 = settings5.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean11 = indexSettings10.isQueryStringAnalyzeWildcard();
        java.lang.String str12 = indexSettings10.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean9 = indexMetaData0.isSameUUID("false");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("_na_");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.put("_na_", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("_all", (float) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder0.normalizePrefix("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.removeAlias("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", custom12);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = builder10.primaryTerm((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.number_of_replicas", (double) 10L);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.data_path", (float) (short) 100);
        java.lang.String str38 = builder36.remove("");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder36.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings42 = settings37.filter(strPredicate41);
        java.lang.String[] strArray44 = settings42.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder31.extendArray("state-", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("true", true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder45.put("index.number_of_replicas", true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.loadFromSource("index.shared_filesystem.recover_on_any_node");
        java.lang.String str55 = builder51.remove("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = indexMetaData0.activeAllocationIds(0);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = indexMetaData0.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        java.lang.String str5 = builder3.remove("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.loadFromSource("index.uuid");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings19.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings11.toXContent(xContentBuilder15, params22);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings11.getAsSize("index.blocks.metadata", sizeValue26);
        java.lang.String[] strArray29 = settings11.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.putArray("index.number_of_replicas", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder3.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNull(xContentBuilder24);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        int int12 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.Version version15 = null;
        org.elasticsearch.Version version16 = settings12.getAsVersion("index.data_path", version15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings12);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder18, params19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(version16);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = settings29.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings28.dryRun(settings36);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray45 = settings37.getAsArray("index.blocks.read_only", strArray44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings47.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = settings47.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings46.dryRun(settings54);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray63 = settings55.getAsArray("index.blocks.read_only", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder23.put("index.creation_date_string", "", strArray45, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("index.shared_filesystem.recover_on_any_node", (double) 5000099.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder6.mapping("hi!");
        int int10 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.putCustom("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfReplicas(32);
        java.lang.String str18 = builder17.index();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.creation_date_string" + "'", str18, "index.creation_date_string");
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.index("archived.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder13.mapping("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings31 = builder24.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings31.getAsGroups();
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: Failed to get setting group for [] setting prefix and setting [_na_] because of a missing '.'");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.extendArray("index.version.created", strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder24.put("", (double) 100);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder24.put("index.version.created_string", "index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean52 = settings49.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings49.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = settings49.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings48.dryRun(settings56);
        java.lang.String[] strArray64 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray65 = settings57.getAsArray("index.blocks.read_only", strArray64);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder43.extendArray("state-", strArray64);
        java.lang.String str68 = builder66.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap69 = builder66.internalMap();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "index.version.upgraded", "index.shared_filesystem.recover_on_any_node" };
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder66.extendArray("index.version.created", strArray74);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder41.extendArray("index.version.upgraded_string", strArray74);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + true + "'", boolean52, true);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        java.lang.String str5 = builder3.remove("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.uuid", (float) (byte) 10);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        long long15 = builder12.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.removeAllAliases();
        java.lang.String str17 = builder16.index();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.data_path" + "'", str17, "index.data_path");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.putCustom("index.uuid", custom10);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.putAlias(builder12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(52);
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(version8);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder50.putCustom("index.", custom52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((-1L));
        java.lang.Class<?> wildcardClass58 = builder57.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder46.put("index.shared_filesystem", (java.lang.Class) wildcardClass58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.loadFromSource("true");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder63 = builder61.put(objDictionary62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.extendArray("index.version.created", strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.loadFromSource("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        java.lang.Boolean boolean42 = settings38.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings44 = settings38.getByPrefix("index.priority");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean48 = settings45.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings52 = settings45.getAsSettings("index.creation_date_string");
        java.lang.String[] strArray54 = settings45.getAsArray("index.uuid");
        boolean boolean55 = settings38.equals((java.lang.Object) settings45);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.put(settings45);
        org.elasticsearch.common.settings.Settings settings58 = settings45.getByPrefix("index.number_of_replicas");
        java.lang.String str61 = settings45.get("index.version.minimum_compatible", "false");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + true + "'", boolean48, true);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "false" + "'", str61, "false");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        int int10 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.lang.String[] strArray17 = settings15.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings15.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings20 = settings15.filter(strPredicate19);
        java.lang.String[] strArray22 = settings15.getAsArray("index.blocks.write");
        java.lang.String str24 = settings15.toDelimitedString('#');
        java.lang.String[] strArray26 = settings15.getAsArray("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.state(state12);
        java.lang.String str14 = builder9.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        java.lang.String str29 = builder27.remove("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean40 = settings37.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings37.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings44 = settings37.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings36.dryRun(settings44);
        java.lang.String[] strArray52 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray53 = settings45.getAsArray("index.blocks.read_only", strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder31.extendArray("state-", strArray52);
        java.lang.String str56 = builder54.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean63 = settings60.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings60.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings67 = settings60.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings59.dryRun(settings67);
        java.lang.String[] strArray75 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray76 = settings68.getAsArray("index.blocks.read_only", strArray75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean81 = settings78.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings78.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings85 = settings78.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings77.dryRun(settings85);
        java.lang.String[] strArray93 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray94 = settings86.getAsArray("index.blocks.read_only", strArray93);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder54.put("index.creation_date_string", "", strArray76, strArray93);
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder27.extendArray("index.number_of_shards", strArray76);
        org.elasticsearch.common.settings.Settings settings97 = builder96.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap98 = settings97.getAsGroups();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertEquals("'" + boolean63 + "' != '" + true + "'", boolean63, true);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertEquals("'" + boolean81 + "' != '" + true + "'", boolean81, true);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertNotNull(strMap98);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings settings31 = builder27.build();
        org.elasticsearch.common.settings.Settings settings33 = settings31.getByPrefix("5000099");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData1.getActiveAllocationIds();
        int int8 = indexMetaData1.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData1.getMappings();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet11 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(52, indexMetaData1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (1) must be greater than the shard id: 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("_all", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.priority");
        java.lang.String str11 = builder10.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.number_of_shards" + "'", str11, "index.number_of_shards");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings48 = builder47.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.creationDate(0L);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.creationDate(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder5.mapping("_all");
        int int12 = builder5.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings21.getAsVersion("index.data_path", version24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings21.toXContent(xContentBuilder26, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings9.toXContent(xContentBuilder17, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings0.toXContent(xContentBuilder8, params33);
        org.elasticsearch.common.settings.Settings settings39 = settings0.getAsSettings("index.version.minimum_compatible");
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.Version version5 = indexMetaData1.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings21.getAsVersion("index.data_path", version24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings21.toXContent(xContentBuilder26, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings9.toXContent(xContentBuilder17, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings0.toXContent(xContentBuilder8, params33);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        java.lang.String str41 = settings38.get("index.shared_filesystem.recover_on_any_node", "index.uuid");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getGroups("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "index.uuid" + "'", str41, "index.uuid");
        org.junit.Assert.assertNotNull(strMap43);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(index9);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean4 = settings1.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings1.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings0.dryRun(settings8);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings19.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings11.toXContent(xContentBuilder15, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings8.toXContent(xContentBuilder10, params22);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings8.filter(strPredicate26);
        java.lang.Boolean boolean30 = settings27.getAsBoolean("hi!", (java.lang.Boolean) true);
        java.lang.String str33 = settings27.get("active_allocations", "index.blocks.write");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings27.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNull(xContentBuilder24);
        org.junit.Assert.assertNull(xContentBuilder25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "index.blocks.write" + "'", str33, "index.blocks.write");
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        java.lang.String str32 = builder24.remove("state-");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder24.putNull("index.version.created_string");
        java.lang.String str36 = builder34.remove("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put("index.version.upgraded", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = builder7.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder7.mapping("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.putCustom("", custom17);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings21.getAsVersion("index.data_path", version24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings21.toXContent(xContentBuilder26, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings9.toXContent(xContentBuilder17, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings0.toXContent(xContentBuilder8, params33);
        org.elasticsearch.common.settings.Settings settings39 = settings0.getAsSettings("index.version.minimum_compatible");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue42 = settings0.getAsRatio("index.priority=true#", "index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(settings39);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean4 = settings1.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings1.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings0.dryRun(settings8);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings19.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings11.toXContent(xContentBuilder15, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings8.toXContent(xContentBuilder10, params22);
        org.elasticsearch.common.unit.SizeValue sizeValue27 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue28 = settings8.getAsSize("index.version.upgraded_string", sizeValue27);
        java.lang.String[] strArray30 = settings8.getAsArray("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings32 = settings8.getAsSettings("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData34.mapping("archived.");
        long long37 = indexMetaData34.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData34);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap40 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.Version version41 = indexMetaData34.getCreationVersion();
        org.elasticsearch.Version version42 = settings8.getAsVersion("archived.", version41);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNull(xContentBuilder24);
        org.junit.Assert.assertNull(xContentBuilder25);
        org.junit.Assert.assertNull(sizeValue28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(version42);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder24.putNull("index.auto_expand_replicas");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder29.put(objDictionary30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder13.mapping("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.numberOfShards((int) (byte) 0);
        java.lang.String str18 = builder13.index();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.creation_date_string" + "'", str18, "index.creation_date_string");
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.numberOfReplicas((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData14.requireFilters();
        boolean boolean19 = indexMetaData14.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder2.state(state20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder2.mapping("index.creation_date_string");
        int int5 = builder2.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        int int12 = builder11.numberOfReplicas();
        long long13 = builder11.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff7 = indexMetaData0.readDiffFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = settings10.getAsBytesSize("active_allocations", byteSizeValue12);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = settings10.toXContent(xContentBuilder14, params15);
        org.elasticsearch.common.settings.Settings settings18 = settings10.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder9.settings(settings10);
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings21 = settings10.filter(strPredicate20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings10.getAsGroups(true);
        org.elasticsearch.common.unit.SizeValue sizeValue25 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue26 = settings10.getAsSize("index.shadow_replicas", sizeValue25);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean29 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("index.");
        java.lang.Boolean boolean34 = settings31.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings settings36 = settings31.getByPrefix("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean41 = settings38.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings45 = settings38.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.elasticsearch.common.settings.Settings settings50 = settings47.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings50);
        org.elasticsearch.Version version53 = null;
        org.elasticsearch.Version version54 = settings50.getAsVersion("index.data_path", version53);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean57 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings56);
        org.elasticsearch.common.settings.Settings settings59 = settings56.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings59.toXContent(xContentBuilder61, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings50.toXContent(xContentBuilder55, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings38.toXContent(xContentBuilder46, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings36.toXContent(xContentBuilder37, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings10.toXContent(xContentBuilder27, params62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = indexMetaData0.toXContent(xContentBuilder7, params62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(byteSizeValue13);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertNull(xContentBuilder16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(sizeValue26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + boolean34 + "' != '" + true + "'", boolean34, true);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + boolean41 + "' != '" + true + "'", boolean41, true);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNull(version54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putMapping("index.version.created_string", "index.creation_date");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder4.putAlias(builder13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards(10);
        long long8 = builder6.primaryTerm(0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.putAlias(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created", "index.blocks.read", "primary_terms", "index.blocks.read_only", "index.blocks.metadata", "index.creation_date", "index.priority", "index.version.upgraded", "index.blocks.metadata" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder10.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder5.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder5.putCustom("_all", custom27);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings8 = settings6.getAsSettings("");
        java.lang.String str10 = settings6.get("primary_terms");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("archived.");
        long long13 = indexMetaData10.getCreationDate();
        long long14 = indexMetaData10.getVersion();
        org.elasticsearch.index.Index index15 = indexMetaData10.getMergeSourceIndex();
        org.elasticsearch.Version version16 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData10.getCustoms();
        long long19 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData10);
        int int21 = indexMetaData10.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.put("_na_", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("_all", (float) 1L);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder0.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder0.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.auto_expand_replicas", (int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings56.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings63 = settings56.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings55.dryRun(settings63);
        java.lang.String[] strArray71 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray72 = settings64.getAsArray("index.blocks.read_only", strArray71);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder50.extendArray("state-", strArray71);
        java.lang.String str75 = builder73.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap76 = builder73.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder46.put(strMap76);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = indexMetaData79.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData79.requireFilters();
        boolean boolean84 = indexMetaData79.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state85 = indexMetaData79.getState();
        boolean boolean87 = indexMetaData79.isSameUUID("index.blocks.read");
        long long88 = indexMetaData79.getCreationDate();
        org.elasticsearch.common.settings.Settings settings89 = indexMetaData79.getSettings();
        java.util.Set<java.lang.String> strSet91 = null; // flaky: indexMetaData79.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters92 = indexMetaData79.getInitialRecoveryFilters();
        org.elasticsearch.Version version93 = indexMetaData79.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder77.put("", version93);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + true + "'", boolean59, true);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(indexMetaData79);
        org.junit.Assert.assertNull(mappingMetaData81);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + state85 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state85.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNull(strSet91);
        org.junit.Assert.assertNull(discoveryNodeFilters92);
        org.junit.Assert.assertNotNull(version93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) 'a');
        int int4 = builder3.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings0, streamOutput1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder51.put("", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("true", 5000099L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder51.put(settings63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean67 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings66);
        org.elasticsearch.common.settings.Settings settings69 = settings66.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings69);
        java.lang.String[] strArray72 = settings70.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = settings70.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate74 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings75 = settings70.filter(strPredicate74);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder51.put(settings75);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder51.loadFromSource("index.data_path");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strPredicate74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.removeAllAliases();
        int int11 = builder7.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.index.Index index1 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.removeAllAliases();
        boolean boolean16 = indexMetaData0.equals((java.lang.Object) builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.numberOfShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putCustom("index.version.upgraded_string", custom20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(index1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings42 = settings37.filter(strPredicate41);
        java.lang.String[] strArray44 = settings42.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder31.extendArray("state-", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("true", true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder45.put("index.number_of_replicas", true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.loadFromSource("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.creationDate((long) 1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.putAlias(aliasMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings4.getAsMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.primaryTerm((int) (short) 10, 60000L);
        int int18 = builder12.numberOfShards();
        boolean boolean19 = settings4.equals((java.lang.Object) builder12);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = builder12.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [index.number_of_shards]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        int int13 = builder12.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.", "archived.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        java.lang.String[] strArray44 = settings42.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings42.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings47 = settings42.filter(strPredicate46);
        java.lang.String[] strArray49 = settings47.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder33.putArray("index.shared_filesystem", strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder33.put("index.version.minimum_compatible", (float) 10000);
        java.lang.String str55 = builder33.remove("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        long long7 = builder6.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) (byte) 10);
        long long15 = builder14.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.setRoutingNumShards(0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.", true);
        java.lang.String str53 = builder48.remove("index.uuid");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.");
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings42 = settings37.filter(strPredicate41);
        java.lang.String[] strArray44 = settings42.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder31.extendArray("state-", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("true", true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("100.0", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.blocks.read_only", (long) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.setRoutingNumShards(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.auto_expand_replicas");
        java.lang.String str8 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.index("index.creation_date");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.data_path" + "'", str8, "index.data_path");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        int int5 = indexMetaData1.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData1.mappingOrDefault("_na_");
        org.elasticsearch.Version version8 = indexMetaData1.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData1.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        boolean boolean6 = indexMetaData1.isSameUUID("index.creation_date");
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData1.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData1.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings42 = settings37.filter(strPredicate41);
        java.lang.String[] strArray44 = settings42.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder31.extendArray("state-", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder31.put("primary_terms", (float) '4');
        java.lang.String str50 = builder48.remove("false");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData1.getAliases();
        int int6 = indexMetaData1.getNumberOfReplicas();
        java.lang.String str7 = indexMetaData1.getIndexUUID();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData1.mapping("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet11 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 1, indexMetaData1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("index.blocks.write");
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNull(index5);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.Version version15 = null;
        org.elasticsearch.Version version16 = settings12.getAsVersion("index.data_path", version15);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings21.toXContent(xContentBuilder23, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = settings12.toXContent(xContentBuilder17, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = settings0.toXContent(xContentBuilder8, params24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue30 = settings0.getAsRatio("index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [_all]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(params24);
        org.junit.Assert.assertNull(xContentBuilder25);
        org.junit.Assert.assertNull(xContentBuilder26);
        org.junit.Assert.assertNull(xContentBuilder27);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("hi!", custom11);
        int int13 = builder9.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder9.index("hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String str12 = settings9.get("_na_", "false");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings9.filter(strPredicate13);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = settings9.toXContent(xContentBuilder15, params16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "false" + "'", str12, "false");
        org.junit.Assert.assertNotNull(settings14);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.version((long) (byte) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder5.mapping("true");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        int int10 = indexMetaData0.getRoutingFactor();
        int int11 = indexMetaData0.getNumberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = indexMetaData0.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        java.lang.String str10 = builder7.index();
        int int11 = builder7.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.creationDate(60000L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder7.numberOfReplicas(52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.data_path" + "'", str10, "index.data_path");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean9 = settings5.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings11.getGroups("index.uuid");
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        long long18 = indexSettings17.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.put("hi!", (double) 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.blocks.write", 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        java.lang.String str59 = builder57.get("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean69 = settings66.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings66.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings73 = settings66.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings65.dryRun(settings73);
        java.lang.String[] strArray81 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray82 = settings74.getAsArray("index.blocks.read_only", strArray81);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder60.extendArray("state-", strArray81);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder60.put("primary_terms", (float) (short) -1);
        java.util.Map<java.lang.String, java.lang.String> strMap87 = builder86.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder57.put(strMap87);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder57.put(objDictionary89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + true + "'", boolean69, true);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.index("index.shadow_replicas");
        java.lang.String str6 = builder2.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.shadow_replicas" + "'", str6, "index.shadow_replicas");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder43.loadFromSource("_all");
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder92.put("_na_", (int) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder95.put("index.blocks.read_only", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean6 = settings3.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings10 = settings3.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings2.dryRun(settings10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings21.toXContent(xContentBuilder23, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = settings13.toXContent(xContentBuilder17, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = settings10.toXContent(xContentBuilder12, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.settings.Settings settings32 = settings29.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings32.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings10.toXContent(xContentBuilder28, params35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder1.settings(settings10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = builder1.mapping("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(params24);
        org.junit.Assert.assertNull(xContentBuilder25);
        org.junit.Assert.assertNull(xContentBuilder26);
        org.junit.Assert.assertNull(xContentBuilder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(mappingMetaData40);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder0.put("primary_terms", (float) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder26.putNull("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        int int5 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder7.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder7.primaryTerm((int) '4', (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shadow_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards(0);
        int int5 = builder1.getRoutingNumShards();
        int int6 = builder1.getRoutingNumShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.Version version6 = null;
        org.elasticsearch.Version version7 = settings3.getAsVersion("index.data_path", version6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings3.getGroups("_na_", true);
        org.elasticsearch.common.settings.Settings settings12 = settings3.getAsSettings("index.version.created_string");
        java.lang.String str15 = settings12.get("index.blocks.metadata", "100.0");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100.0" + "'", str15, "100.0");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("_all", custom5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.putMapping("index.version.created", "index.blocks.read_only");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("_all");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        long long8 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.minimum_compatible", custom3);
        long long5 = builder1.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.numberOfReplicas((int) (short) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder11.setRoutingNumShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.index("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData8);
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData8.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version17 = indexMetaData8.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = indexMetaData8.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(version17);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        java.lang.Boolean boolean6 = settings3.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings settings8 = settings3.getByPrefix("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean13 = settings10.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings17 = settings10.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        org.elasticsearch.common.settings.Settings settings22 = settings19.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.Version version25 = null;
        org.elasticsearch.Version version26 = settings22.getAsVersion("index.data_path", version25);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean29 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings31);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params34 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings31.toXContent(xContentBuilder33, params34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings22.toXContent(xContentBuilder27, params34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings17.toXContent(xContentBuilder18, params34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = settings3.toXContent(xContentBuilder9, params34);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(params34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNull(xContentBuilder38);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("hi!", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("index.creation_date_string");
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder40.put("primary_terms", (int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder40.put("index.creation_date_string", "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.putCustom("", custom7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = settings10.getAsMemory("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "5000099");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994] with value [5000099] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings10);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder45.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder45.putNull("primary_terms");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        int int5 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings13 = settings4.getByPrefix("");
        java.lang.String[] strArray15 = settings13.getAsArray("index.version.upgraded_string");
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings13);
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean27 = settings24.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings24.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings31 = settings24.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings23.dryRun(settings31);
        java.lang.String[] strArray39 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray40 = settings32.getAsArray("index.blocks.read_only", strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder18.extendArray("state-", strArray39);
        java.lang.String[] strArray43 = settings13.getAsArray("index.version.upgraded", strArray39, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + true + "'", boolean27, true);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version2 = indexMetaData1.getCreationVersion();
        org.elasticsearch.index.Index index3 = indexMetaData1.getMergeSourceIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet5 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 1, indexMetaData1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNull(index3);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.index.Index index5 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData4.getState();
        byte byte7 = state6.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.state(state6);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        java.lang.Boolean boolean10 = settings7.getAsBoolean("state-", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 1);
        long long9 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = builder8.mapping("index.priority");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mappingMetaData13);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = settings5.getAsBytesSize("active_allocations", byteSizeValue7);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings5.toXContent(xContentBuilder9, params10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = settings3.toXContent(xContentBuilder4, params10);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = settings3.getAsStructuredMap();
        java.lang.String str15 = settings3.get("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(byteSizeValue8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNull(xContentBuilder12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("");
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        int int9 = indexMetaData0.getRoutingFactor();
        boolean boolean11 = indexMetaData0.isSameUUID("5000099");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings13 = settings4.getByPrefix("");
        java.lang.String[] strArray15 = settings13.getAsArray("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings13.getAsGroups(false);
        java.lang.Boolean boolean20 = settings13.getAsBoolean("index.shared_filesystem", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.Object obj21 = null;
        boolean boolean22 = indexMetaData0.equals(obj21);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData0.mappingOrDefault("");
        java.lang.String str25 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.io.stream.StreamInput streamInput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = indexMetaData0.readFrom(streamInput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("hi!", custom11);
        java.lang.String str13 = builder9.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean22 = indexMetaData0.isSameUUID("state-");
        org.apache.lucene.util.Version version23 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(version23);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder40.internalMap();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.version.upgraded_string", (long) (-1), byteSizeUnit45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((-1L));
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.settings(builder40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder42.putCustom("index.blocks.write", custom46);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        java.lang.String[] strArray9 = settings0.getAsArray("index.uuid");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.Version version17 = null;
        org.elasticsearch.Version version18 = settings14.getAsVersion("index.data_path", version17);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = settings23.toXContent(xContentBuilder25, params26);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = settings14.toXContent(xContentBuilder19, params26);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = settings0.toXContent(xContentBuilder10, params26);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(version18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(params26);
        org.junit.Assert.assertNull(xContentBuilder27);
        org.junit.Assert.assertNull(xContentBuilder28);
        org.junit.Assert.assertNull(xContentBuilder29);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        java.lang.String str5 = builder3.remove("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.loadFromSource("index.uuid");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings19.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings11.toXContent(xContentBuilder15, params22);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings11.getAsSize("index.blocks.metadata", sizeValue26);
        java.lang.String[] strArray29 = settings11.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.putArray("index.number_of_replicas", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.priority", true);
        org.elasticsearch.common.settings.Settings settings35 = builder31.build();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder3.put(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder36.putNull("5000099");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNull(xContentBuilder24);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder6.mapping("hi!");
        int int10 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.putCustom("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfReplicas(32);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder15.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean9 = settings5.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.Version version11 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = settings10.getAsBytesSize("active_allocations", byteSizeValue12);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = settings10.toXContent(xContentBuilder14, params15);
        org.elasticsearch.common.settings.Settings settings18 = settings10.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder9.settings(settings10);
        int int20 = builder9.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder9.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder6.state(state22);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(byteSizeValue13);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertNull(xContentBuilder16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder51.put(settings63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder51.put("_all", (float) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("index.version.created", (double) 10L);
        java.lang.String str73 = builder71.remove("active_allocations");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.removeAllAliases();
        int int13 = builder4.numberOfShards();
        long long14 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.removeAllAliases();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder59.normalizePrefix("archived.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        int int5 = indexMetaData1.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData1.mappingOrDefault("_na_");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData1.mapping("index.uuid");
        long long10 = indexMetaData1.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        java.lang.String str5 = settings3.toDelimitedString(' ');
        java.lang.String str8 = settings3.get("index.shared_filesystem", "index.data_path");
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings3.getAsSize("", sizeValue10);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.data_path" + "'", str8, "index.data_path");
        org.junit.Assert.assertNull(sizeValue11);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData1.getInitialRecoveryFilters();
        java.lang.String str6 = indexMetaData1.getIndexUUID();
        long long7 = indexMetaData1.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getByPrefix("index.version.upgraded");
        java.lang.String str9 = settings0.get("index.version.upgraded_string");
        java.lang.String str11 = settings0.toDelimitedString('4');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings0.getGroups("false");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int12 = indexMetaData0.getNumberOfReplicas();
        int int13 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.lang.Boolean boolean13 = settings9.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        int int16 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem");
        int int2 = builder1.numberOfReplicas();
        int int3 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.lang.Boolean boolean4 = settings0.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings6 = settings0.getByPrefix("index.priority");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean10 = settings7.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings7.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = settings7.getAsSettings("index.creation_date_string");
        java.lang.String[] strArray16 = settings7.getAsArray("index.uuid");
        boolean boolean17 = settings0.equals((java.lang.Object) settings7);
        org.elasticsearch.common.settings.Settings settings19 = settings0.getByPrefix("index.priority");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + false + "'", boolean4, false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        int int4 = indexMetaData0.getRoutingNumShards();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = settings10.getAsBytesSize("active_allocations", byteSizeValue12);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = settings10.toXContent(xContentBuilder14, params15);
        org.elasticsearch.common.settings.Settings settings18 = settings10.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder9.settings(settings10);
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings21 = settings10.filter(strPredicate20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings10.getAsGroups(true);
        org.elasticsearch.common.unit.SizeValue sizeValue25 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue26 = settings10.getAsSize("index.shadow_replicas", sizeValue25);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean29 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("index.");
        java.lang.Boolean boolean34 = settings31.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings settings36 = settings31.getByPrefix("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean41 = settings38.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings38.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings45 = settings38.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.elasticsearch.common.settings.Settings settings50 = settings47.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings50);
        org.elasticsearch.Version version53 = null;
        org.elasticsearch.Version version54 = settings50.getAsVersion("index.data_path", version53);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean57 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings56);
        org.elasticsearch.common.settings.Settings settings59 = settings56.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings59.toXContent(xContentBuilder61, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings50.toXContent(xContentBuilder55, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings38.toXContent(xContentBuilder46, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings36.toXContent(xContentBuilder37, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings10.toXContent(xContentBuilder27, params62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = indexMetaData0.toXContent(xContentBuilder7, params62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(byteSizeValue13);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertNull(xContentBuilder16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(sizeValue26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + boolean34 + "' != '" + true + "'", boolean34, true);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + boolean41 + "' != '" + true + "'", boolean41, true);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNull(version54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        int int7 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        int int9 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder51.put(settings63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder51.replacePropertyPlaceholders();
        java.lang.String[] strArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.extendArray("index.creation_date_string", strArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.priority");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.priority]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("hi!", custom11);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.putMapping(mappingMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        long long3 = indexMetaData0.getCreationDate();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int6 = indexMetaData0.getRoutingFactor();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = indexMetaData0.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = settings29.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings28.dryRun(settings36);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray45 = settings37.getAsArray("index.blocks.read_only", strArray44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings47.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = settings47.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings46.dryRun(settings54);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray63 = settings55.getAsArray("index.blocks.read_only", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder23.put("index.creation_date_string", "", strArray45, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder23.put("index.", 10);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder23.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder69.normalizePrefix("index.version.upgraded");
        java.util.concurrent.TimeUnit timeUnit74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder75 = builder69.put("index.blocks.metadata", (long) (short) 1, timeUnit74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("");
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.numberOfReplicas(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.numberOfShards((int) (short) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.data_path");
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet5 = settings4.names();
        java.lang.String str7 = settings4.get("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings42 = settings37.filter(strPredicate41);
        java.lang.String[] strArray44 = settings42.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder31.extendArray("state-", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder31.put("primary_terms", (float) '4');
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder31.loadFromSource("index.");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder31.putNull("100.0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getByPrefix("index.version.upgraded");
        java.lang.String str9 = settings0.get("index.version.upgraded_string");
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings0.getAsGroups(false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap3 = settings0.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.version.minimum_compatible");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = settings0.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean42 = settings39.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings39.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings39.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings38.dryRun(settings46);
        java.lang.String[] strArray54 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray55 = settings47.getAsArray("index.blocks.read_only", strArray54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean60 = settings57.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings57.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings64 = settings57.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings56.dryRun(settings64);
        java.lang.String[] strArray72 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray73 = settings65.getAsArray("index.blocks.read_only", strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder33.put("index.creation_date_string", "", strArray55, strArray72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder9.settings(builder74);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder74.put("", (int) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertEquals("'" + boolean60 + "' != '" + true + "'", boolean60, true);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder5.settings(builder33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder33.put("hi!", (float) 'a');
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean48 = settings45.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings52 = settings45.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings44.dryRun(settings52);
        java.lang.String[] strArray60 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray61 = settings53.getAsArray("index.blocks.read_only", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder39.extendArray("state-", strArray60);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder39.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray73 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder63.extendArray("index.version.created", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder63.put("", (double) 100);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder63.put("index.version.created_string", "index.version.minimum_compatible");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = builder80.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder38.put(strMap81);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder82.put("index.shadow_replicas", (float) 35);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + true + "'", boolean48, true);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.version.created");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.Version version15 = null;
        org.elasticsearch.Version version16 = settings12.getAsVersion("index.data_path", version15);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings21.toXContent(xContentBuilder23, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = settings12.toXContent(xContentBuilder17, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = settings0.toXContent(xContentBuilder8, params24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = settings30.getAsBytesSize("active_allocations", byteSizeValue32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings30.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.settings.Settings settings38 = settings30.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder29.settings(settings30);
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings41 = settings30.filter(strPredicate40);
        org.elasticsearch.common.settings.Settings settings42 = settings0.filter(strPredicate40);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings42.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(params24);
        org.junit.Assert.assertNull(xContentBuilder25);
        org.junit.Assert.assertNull(xContentBuilder26);
        org.junit.Assert.assertNull(xContentBuilder27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNull(byteSizeValue33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap43);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.uuid");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder23.put("index.auto_expand_replicas", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("true", "_all");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder56 = builder49.put("index.auto_expand_replicas", (long) 10000, byteSizeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("true");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(aliasMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.putMapping(mappingMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1000);
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("index.number_of_replicas", custom14);
        int int16 = builder15.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings3.toXContent(xContentBuilder5, params6);
        boolean boolean8 = settings3.isEmpty();
        boolean boolean9 = settings3.isEmpty();
        java.lang.String str11 = settings3.toDelimitedString('4');
        java.lang.String str14 = settings3.get("index.number_of_replicas", "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNull(xContentBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.version.minimum_compatible" + "'", str14, "index.version.minimum_compatible");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        int int11 = builder2.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version(10L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData5.getSettings();
        int int13 = indexMetaData5.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = settings16.getAsBytesSize("active_allocations", byteSizeValue18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings16.toXContent(xContentBuilder20, params21);
        org.elasticsearch.common.settings.Settings settings24 = settings16.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder15.settings(settings16);
        org.elasticsearch.common.settings.Settings settings27 = settings16.getByPrefix("index.shared_filesystem");
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings27);
        long long29 = indexMetaData5.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.creationDate((long) (byte) 1);
        int int9 = builder8.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder8.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas(1000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfReplicas((int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean20 = settings17.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings17.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings24 = settings17.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings16.dryRun(settings24);
        java.lang.String[] strArray32 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray33 = settings25.getAsArray("index.blocks.read_only", strArray32);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder11.extendArray("state-", strArray32);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings35);
        org.elasticsearch.common.settings.Settings settings38 = settings35.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        java.lang.String[] strArray41 = settings39.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = settings39.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder34.put(strMap42);
        java.lang.String[] strArray51 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder34.putArray("state-", (java.util.List<java.lang.String>) strList52);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder34.put("index.", "index.");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean61 = settings58.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder57.put(settings58);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.blocks.write", (float) '#');
        java.util.Map<java.lang.String, java.lang.String> strMap66 = builder62.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder8.settings(builder62);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean69 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings68);
        org.elasticsearch.common.settings.Settings settings71 = settings68.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings71);
        java.lang.String[] strArray74 = settings72.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap75 = settings72.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate76 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings77 = settings72.filter(strPredicate76);
        java.lang.String[] strArray79 = settings72.getAsArray("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings81 = settings72.getByPrefix("");
        java.lang.String[] strArray83 = settings81.getAsArray("index.version.upgraded_string");
        boolean boolean84 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings81);
        org.elasticsearch.common.settings.Settings settings86 = settings81.getByPrefix("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder67.settings(settings86);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + boolean61 + "' != '" + true + "'", boolean61, true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("index.shared_filesystem.recover_on_any_node", custom14);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = builder15.mapping("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(mappingMetaData17);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("index.blocks.write");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        java.lang.String str59 = builder57.get("hi!");
        java.lang.String str61 = builder57.remove("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings10);
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("index.");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = settings15.getAsBytesSize("active_allocations", byteSizeValue17);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = settings15.toXContent(xContentBuilder19, params20);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings13.toXContent(xContentBuilder14, params20);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = indexMetaData0.toXContent(xContentBuilder9, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(params20);
        org.junit.Assert.assertNull(xContentBuilder21);
        org.junit.Assert.assertNull(xContentBuilder22);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((-1L));
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.settings(builder40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder9.index("index.version.upgraded_string");
        int int44 = builder43.getRoutingNumShards();
        int int45 = builder43.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        java.lang.String[] strArray56 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder39.putArray("state-", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder61.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder67.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder67.put("", 0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder15.settings(builder71);
        java.util.concurrent.TimeUnit timeUnit75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder76 = builder71.put("index.version.minimum_compatible", (long) '#', timeUnit75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.settings(settings15);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.creationDate(5000099L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder25.normalizePrefix("index.version.created");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.setRoutingNumShards(10000);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder11.mapping("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder11.index("false");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [false]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.put("index.version.created_string", 10.0f);
        java.lang.String str56 = builder54.get("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.Boolean boolean7 = settings3.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings3);
        boolean boolean9 = settings3.isEmpty();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings3.getAsMap();
        java.util.Set<java.lang.String> strSet11 = settings3.names();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        java.lang.Class<?> wildcardClass7 = settings6.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData5.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData5.getState();
        byte byte13 = state12.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.setRoutingNumShards((int) (short) -1);
        int int17 = builder16.getRoutingNumShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        byte byte4 = state3.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created", "index.blocks.read", "primary_terms", "index.blocks.read_only", "index.blocks.metadata", "index.creation_date", "index.priority", "index.version.upgraded", "index.blocks.metadata" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder10.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder5.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder5.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder5.putAlias(builder28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        java.lang.String str38 = builder32.remove("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder32.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder5.index("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        int int12 = builder5.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        int int11 = builder2.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfShards((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        int int12 = builder1.getRoutingNumShards();
        long long13 = builder1.version();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.putAlias(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.uuid", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder24.putNull("index.uuid");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder50.putCustom("index.", custom52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((-1L));
        java.lang.Class<?> wildcardClass58 = builder57.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder46.put("index.shared_filesystem", (java.lang.Class) wildcardClass58);
        org.elasticsearch.common.settings.Settings settings60 = builder46.build();
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings60);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = settings60.getAsMemory("primary_terms", "index.number_of_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [primary_terms] with value [index.number_of_replicas] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings13 = settings4.getByPrefix("");
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = settings4.getAsBytesSize("archived.", byteSizeValue15);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(byteSizeValue16);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        java.lang.Boolean boolean10 = settings6.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings12 = settings6.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long14 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created", "index.blocks.read", "primary_terms", "index.blocks.read_only", "index.blocks.metadata", "index.creation_date", "index.priority", "index.version.upgraded", "index.blocks.metadata" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet13);
        java.lang.String str16 = builder15.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.putMapping("index.version.upgraded", "index.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.number_of_shards" + "'", str16, "index.number_of_shards");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder1.getRoutingNumShards();
        int int4 = builder1.getRoutingNumShards();
        long long5 = builder1.version();
        java.lang.Class<?> wildcardClass6 = builder1.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder6.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        int int11 = builder10.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder4.putMapping("index.version.created_string", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.getInitialRecoveryFilters();
        long long14 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        java.lang.String str6 = builder0.get("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("primary_terms", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder30.put("index.blocks.read_only", "");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean15 = settings12.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings12.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings19 = settings12.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings11.dryRun(settings19);
        java.lang.String[] strArray27 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray28 = settings20.getAsArray("index.blocks.read_only", strArray27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.extendArray("state-", strArray27);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder6.put("primary_terms", (float) (short) -1);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder4.settings(builder32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + true + "'", boolean15, true);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder5.settings(builder33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean44 = settings41.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings41.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = settings41.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings40.dryRun(settings48);
        java.lang.String[] strArray56 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray57 = settings49.getAsArray("index.blocks.read_only", strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder35.extendArray("state-", strArray56);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean60 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings59);
        org.elasticsearch.common.settings.Settings settings62 = settings59.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings62);
        java.lang.String[] strArray65 = settings63.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings63.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder58.put(strMap66);
        java.lang.String[] strArray75 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder58.putArray("state-", (java.util.List<java.lang.String>) strList76);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder78.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder80.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder80.loadFromSource("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder5.settings(builder87);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData89 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertEquals("'" + boolean44 + "' != '" + true + "'", boolean44, true);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.creationDate((long) '4');
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        long long8 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.Object obj21 = null;
        boolean boolean22 = indexMetaData0.equals(obj21);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap23 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version24 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(version24);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.", "archived.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        java.lang.String[] strArray44 = settings42.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = settings42.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate46 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings47 = settings42.filter(strPredicate46);
        java.lang.String[] strArray49 = settings47.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder33.putArray("index.shared_filesystem", strArray49);
        java.lang.String str52 = builder33.remove("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder33.loadFromSource("index.blocks.read");
        java.nio.file.Path path55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder56 = builder33.loadFromPath(path55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData8);
        boolean boolean16 = indexMetaData8.isSameUUID("hi!");
        long long17 = indexMetaData8.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder4.removeAlias("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.put("index.shared_filesystem.recover_on_any_node", (long) 10000, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.primaryTerm(0, (long) 'a');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings settings51 = builder45.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.", 0.0d);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean54 = settings51.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings51.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = settings51.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings50.dryRun(settings58);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean67 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings66);
        org.elasticsearch.common.settings.Settings settings69 = settings66.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings69);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params72 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = settings69.toXContent(xContentBuilder71, params72);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder74 = settings61.toXContent(xContentBuilder65, params72);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings58.toXContent(xContentBuilder60, params72);
        java.util.function.Predicate<java.lang.String> strPredicate76 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings77 = settings58.filter(strPredicate76);
        java.lang.Class<?> wildcardClass78 = settings58.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder48.put("archived.", (java.lang.Class) wildcardClass78);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("archived.", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder79.put("index.shared_filesystem", 0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + true + "'", boolean54, true);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(params72);
        org.junit.Assert.assertNull(xContentBuilder73);
        org.junit.Assert.assertNull(xContentBuilder74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = builder16.mapping("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.putMapping("index.version.upgraded_string", "index.version.minimum_compatible");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(mappingMetaData21);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings21.getAsVersion("index.data_path", version24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings21.toXContent(xContentBuilder26, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings9.toXContent(xContentBuilder17, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings0.toXContent(xContentBuilder8, params33);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = settings0.getAsMap();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue41 = settings0.getAsMemory("index.priority=true#", "100.0");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.priority=true#] with value [100.0] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder43.loadFromSource("_all");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder94 = builder43.put(objDictionary93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        int int7 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = settings5.getAsBytesSize("", byteSizeValue15);
        java.lang.String[] strArray18 = settings5.getAsArray("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings20 = settings5.getByPrefix("index.auto_expand_replicas");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings20, streamOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(settings20);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings13 = settings4.getByPrefix("");
        java.lang.String[] strArray15 = settings13.getAsArray("index.version.upgraded_string");
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings13);
        org.elasticsearch.common.settings.Settings settings18 = settings13.getByPrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData8);
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData8.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData8.getMappings();
        long long18 = indexMetaData8.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("_all", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.blocks.write");
        int int9 = builder6.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.removeAllAliases();
        java.lang.String str11 = builder6.index();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean21 = settings18.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = settings18.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings17.dryRun(settings25);
        java.lang.String[] strArray33 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray34 = settings26.getAsArray("index.blocks.read_only", strArray33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder12.extendArray("state-", strArray33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder12.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.", (double) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder6.settings(builder36);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.number_of_shards" + "'", str11, "index.number_of_shards");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("index.version.upgraded", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards(10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        long long5 = indexMetaData1.getVersion();
        org.elasticsearch.Version version6 = indexMetaData1.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData1.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet10 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 1, indexMetaData1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("index.", custom7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder5.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder5.putCustom("index.number_of_replicas", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.blocks.read");
        int int18 = builder15.getRoutingNumShards();
        java.lang.String[] strArray49 = new java.lang.String[] { "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.version.upgraded_string", "hi!", "index.creation_date_string", "state-", "_all", "index.version.minimum_compatible", "", "primary_terms", "index.shadow_replicas", "index.blocks.metadata", "index.version.upgraded", "index.version.minimum_compatible", "index.blocks.read_only", "_na_", "index.version.minimum_compatible", "index.shadow_replicas", "index.blocks.write", "index.priority", "index.version.minimum_compatible", "_all", "index.", "primary_terms", "index.version.minimum_compatible", "primary_terms", "index.creation_date_string", "index.priority", "index.version.upgraded", "index.uuid" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder15.putActiveAllocationIds(35, (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder1.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet50);
        int int54 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData5.getSettings();
        org.elasticsearch.common.settings.Settings settings14 = settings12.getByPrefix("index.shadow_replicas");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings12, streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings14);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = settings5.getAsBytesSize("", byteSizeValue15);
        java.lang.String[] strArray18 = settings5.getAsArray("index.shared_filesystem.recover_on_any_node");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings5.getAsGroups(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.lang.Boolean boolean13 = settings9.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.index.Index index16 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(index16);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.auto_expand_replicas");
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean9 = settings5.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        boolean boolean11 = indexSettings10.isDefaultAllowUnmappedFields();
        boolean boolean12 = indexSettings10.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        java.lang.String str50 = builder48.get("index.data_path");
        org.elasticsearch.common.settings.Settings settings51 = builder48.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(settings51);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.state(state8);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((-1L));
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.settings(builder40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.normalizePrefix("index.version.upgraded_string");
        java.lang.String str45 = builder43.get("true");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        int int7 = builder1.getRoutingNumShards();
        long long8 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            long long14 = builder12.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.", true);
        org.elasticsearch.common.settings.Settings settings52 = builder51.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData53.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData53.getCustoms();
        boolean boolean56 = settings52.equals((java.lang.Object) indexMetaData53);
        org.elasticsearch.Version version57 = indexMetaData53.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData53.readDiffFrom(streamInput58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(version57);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        long long3 = builder1.version();
        java.lang.String str4 = builder1.index();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "primary_terms" + "'", str4, "primary_terms");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.priority", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = builder11.mapping("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.index("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        boolean boolean12 = indexMetaData0.isSameUUID("index.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        java.lang.String str6 = builder4.index();
        int int7 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate((long) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.data_path" + "'", str6, "index.data_path");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("index.shared_filesystem.recover_on_any_node", (long) '#');
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("index.auto_expand_replicas", (double) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        java.lang.String str59 = builder57.get("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder57.put("index.version.upgraded", true);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.uuid", false);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.put("index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ", (long) (byte) 1, byteSizeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        long long8 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.auto_expand_replicas");
        java.lang.String str11 = builder8.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.index("index.blocks.write");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.creation_date_string" + "'", str11, "index.creation_date_string");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder23.put("index.version.minimum_compatible", true);
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder23.loadFromStream("5000099", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1000);
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        byte byte11 = state10.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean38 = settings35.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings35.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings42 = settings35.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings34.dryRun(settings42);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray51 = settings43.getAsArray("index.blocks.read_only", strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder29.extendArray("state-", strArray50);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean54 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings53);
        org.elasticsearch.common.settings.Settings settings56 = settings53.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings56);
        java.lang.String[] strArray59 = settings57.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = settings57.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.put(strMap60);
        java.lang.String[] strArray69 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder52.putArray("state-", (java.util.List<java.lang.String>) strList70);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder27.putArray("", (java.util.List<java.lang.String>) strList70);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + true + "'", boolean38, true);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder7.setRoutingNumShards((int) (short) 1);
        int int56 = builder55.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder55.version((long) '#');
        java.lang.String str59 = builder58.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = builder58.mapping("index.uuid");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "index.creation_date_string" + "'", str59, "index.creation_date_string");
        org.junit.Assert.assertNull(mappingMetaData61);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(version11);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.number_of_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        java.util.Set<java.lang.String> strSet6 = settings0.names();
        org.elasticsearch.common.settings.Settings settings8 = settings0.getByPrefix("");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings settings30 = builder27.build();
        java.lang.String[] strArray32 = settings30.getAsArray("5000099");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue35 = settings30.getAsRatio("index.version.upgraded_string", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage []");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray32);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created", "index.blocks.read", "primary_terms", "index.blocks.read_only", "index.blocks.metadata", "index.creation_date", "index.priority", "index.version.upgraded", "index.blocks.metadata" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder10.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder5.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder5.putCustom("_all", custom27);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder5.primaryTerm((int) (byte) 100, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.version.created", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.putCustom("index.version.minimum_compatible", custom17);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.elasticsearch.common.settings.Settings settings16 = settings13.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.lang.String[] strArray19 = settings17.getAsArray("state-");
        java.lang.String[] strArray21 = settings17.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue23 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue24 = settings17.getAsSize("index.version.created_string", sizeValue23);
        java.util.Set<java.lang.String> strSet25 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder11.putActiveAllocationIds((int) (byte) 1, strSet25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder11.version(0L);
        int int29 = builder28.numberOfShards();
        long long30 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.removeAlias("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.removeAlias("index.priority");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(sizeValue24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("active_allocations", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.loadFromSource("index.");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder28.internalMap();
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder37 = builder28.put("index.number_of_replicas=0#index.number_of_shards=1#index.version.created=5000099#", 0L, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version14 = indexMetaData0.getUpgradedVersion();
        int int15 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder23.internalMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "index.version.upgraded", "index.shared_filesystem.recover_on_any_node" };
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.extendArray("index.version.created", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean43 = settings40.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings40.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings47 = settings40.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings39.dryRun(settings47);
        java.lang.String[] strArray55 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray56 = settings48.getAsArray("index.blocks.read_only", strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder34.extendArray("state-", strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder64.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("index.", "archived.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean73 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings72);
        org.elasticsearch.common.settings.Settings settings75 = settings72.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings75);
        java.lang.String[] strArray78 = settings76.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap79 = settings76.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate80 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings81 = settings76.filter(strPredicate80);
        java.lang.String[] strArray83 = settings81.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder67.putArray("index.shared_filesystem", strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder32.putArray("100.0", strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder85.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + boolean43 + "' != '" + true + "'", boolean43, true);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(strPredicate80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.putCustom("hi!", custom6);
        int int8 = builder7.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.version((long) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.numberOfReplicas((int) (byte) 1);
        java.lang.String str10 = builder9.index();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.creation_date_string" + "'", str10, "index.creation_date_string");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("true");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder3.mapping("state-");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = builder16.mapping("");
        int int22 = builder16.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder16.putAlias(builder24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.replacePropertyPlaceholders();
        java.lang.String[] strArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.extendArray("index.creation_date", strArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.removeAllAliases();
        int int13 = builder4.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        int int7 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("archived.", false);
        org.elasticsearch.common.settings.Settings settings50 = builder49.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder15.settings(builder49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.put("_na_", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder49.put("index.blocks.write", (long) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        int int14 = builder13.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfShards(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putCustom("false", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder18.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder18.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.putAlias(builder26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        java.lang.String str5 = builder1.index();
        long long6 = builder1.version();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.data_path" + "'", str5, "index.data_path");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("false");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("archived.");
        long long11 = indexMetaData8.getCreationDate();
        long long12 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData8);
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData8.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version17 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData8.excludeFilters();
        org.apache.lucene.util.Version version19 = indexMetaData8.getMinimumCompatibleVersion();
        org.elasticsearch.Version version20 = indexMetaData8.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(version20);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder23.put("index.version.minimum_compatible", true);
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder23.loadFromStream("index.version.created_string", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.extendArray("index.version.created", strArray34);
        java.lang.String str37 = builder24.remove("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        java.util.concurrent.TimeUnit timeUnit40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder41 = builder24.put("index.blocks.write", 0L, timeUnit40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder51.put(settings63);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings63);
        java.lang.String[] strArray67 = settings63.getAsArray("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        boolean boolean18 = indexMetaData0.isSameUUID("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str15 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder5.mapping("index.number_of_shards");
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder5.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder51.put("", 0L);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder55.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strMap56);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = builder7.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder7.mapping("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder7.settings(settings16);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = builder7.numberOfShards();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("archived.");
        long long11 = indexMetaData8.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData8.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String str12 = settings9.get("_na_", "false");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.Settings settings14 = settings9.filter(strPredicate13);
        java.lang.String[] strArray16 = settings9.getAsArray("archived.");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "false" + "'", str12, "false");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.elasticsearch.common.settings.Settings settings16 = settings13.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.lang.String[] strArray19 = settings17.getAsArray("state-");
        java.lang.String[] strArray21 = settings17.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue23 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue24 = settings17.getAsSize("index.version.created_string", sizeValue23);
        java.util.Set<java.lang.String> strSet25 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder11.putActiveAllocationIds((int) (byte) 1, strSet25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder11.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder11.putCustom("index.blocks.write", custom30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(sizeValue24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.put(settings47);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder46.put("index.creation_date", (-1L));
        java.lang.String str56 = builder46.remove("index.shared_filesystem");
        java.lang.String str58 = builder46.get("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("_all", (int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder31.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("_all", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.index("_all");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [_all]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        org.elasticsearch.common.settings.Settings settings9 = settings4.getByPrefix("active_allocations");
        java.lang.String str12 = settings9.get("100.0", "");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.index("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData58 = indexMetaData56.mapping("archived.");
        long long59 = indexMetaData56.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state60 = indexMetaData56.getState();
        byte byte61 = state60.id();
        byte byte62 = state60.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder53.state(state60);
        byte byte64 = state60.id();
        byte byte65 = state60.id();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNull(mappingMetaData58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + state60 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state60.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 0 + "'", byte61 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 0 + "'", byte62 == (byte) 0);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 0 + "'", byte64 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 0 + "'", byte65 == (byte) 0);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder23.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("_all", (long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder39.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom42 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.putCustom("index.", custom42);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = builder40.mapping("index.creation_date_string");
        java.lang.Class<?> wildcardClass46 = builder40.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder33.put("index.blocks.metadata", (java.lang.Class) wildcardClass46);
        java.lang.String str49 = builder47.get("5000099");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("_na_", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder30.put("index.creation_date", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder30.normalizePrefix("archived.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("active_allocations");
        // The following exception was thrown during execution in test generation
        try {
            long long13 = indexMetaData0.primaryTerm(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.blocks.write");
        int int10 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.index.Index index1 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(index1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder51.put(settings63);
        java.lang.String str66 = builder51.remove("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder67.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.index.Index index2 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNull(index2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("");
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.numberOfReplicas(10000);
        int int13 = builder7.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder7.setRoutingNumShards(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.removeAlias("_all");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.putAlias(builder20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings9.getGroups("index.priority=true#", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        int int10 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData1.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData6.diff(indexMetaData7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData6.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData1.diff(indexMetaData6);
        int int13 = indexMetaData6.getTotalNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet15 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((-1), indexMetaData6, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.index.Index index12 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(index12);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.Version version6 = null;
        org.elasticsearch.Version version7 = settings3.getAsVersion("index.data_path", version6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings3.getGroups("_na_", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings3.getAsGroups();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings2.filter(strPredicate12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings2.getAsGroups(true);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings16.getAsGroups();
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards(32);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("archived.");
        long long16 = indexMetaData13.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData13.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData13.mapping("_all");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData13.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData13);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.number_of_shards]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData0.getCustoms();
        long long22 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder2.numberOfReplicas(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version22 = indexMetaData0.getCreationVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = indexMetaData0.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(version22);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        int int2 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        int int8 = indexMetaData0.getRoutingFactor();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder24.putNull("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings30 = builder24.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mappingOrDefault("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(mappingMetaData13);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData5.getSettings();
        int int13 = indexMetaData5.getNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = indexMetaData5.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("index.shared_filesystem.recover_on_any_node", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("archived.");
        java.util.Set<java.lang.String> strSet20 = null; // flaky: indexMetaData16.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.apache.lucene.util.Version version23 = indexMetaData16.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData16.mapping("index.version.created_string");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData16.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder12.state(state27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        java.lang.String str11 = settings9.get("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder23.put("index.creation_date_string", "index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder23.put(settings35);
        org.elasticsearch.common.settings.Settings settings38 = builder37.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder2.index("archived.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putMapping(mappingMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        int int2 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        int int8 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        long long10 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        java.lang.String str7 = indexMetaData1.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData1.requireFilters();
        int int9 = indexMetaData1.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet12 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(100, indexMetaData1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = builder8.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("5000099");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("archived.");
        long long16 = indexMetaData13.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData13.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData13.mapping("_all");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData13.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        boolean boolean5 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings4);
        java.lang.String str8 = settings4.get("index.blocks.read_only", "_na_");
        java.lang.String[] strArray10 = settings4.getAsArray("hi!");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings4.getGroups("state-", false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("primary_terms");
        int int4 = builder1.numberOfShards();
        long long5 = builder1.version();
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder23.internalMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "index.version.upgraded", "index.shared_filesystem.recover_on_any_node" };
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.extendArray("index.version.created", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean43 = settings40.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings40.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings47 = settings40.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings39.dryRun(settings47);
        java.lang.String[] strArray55 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray56 = settings48.getAsArray("index.blocks.read_only", strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder34.extendArray("state-", strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder64.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("index.", "archived.");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean73 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings72);
        org.elasticsearch.common.settings.Settings settings75 = settings72.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings75);
        java.lang.String[] strArray78 = settings76.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap79 = settings76.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate80 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings81 = settings76.filter(strPredicate80);
        java.lang.String[] strArray83 = settings81.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder67.putArray("index.shared_filesystem", strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder32.putArray("100.0", strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder85.put("", (long) (byte) 10);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = builder85.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder85.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + boolean43 + "' != '" + true + "'", boolean43, true);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(strPredicate80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("archived.");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData8.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData8.getAliases();
        boolean boolean14 = indexMetaData8.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.Version version15 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings21.getAsVersion("index.data_path", version24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings21.toXContent(xContentBuilder26, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings9.toXContent(xContentBuilder17, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings0.toXContent(xContentBuilder8, params33);
        org.elasticsearch.common.settings.Settings settings39 = settings0.getAsSettings("index.version.minimum_compatible");
        org.elasticsearch.common.unit.SizeValue sizeValue41 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue42 = settings0.getAsSize("index.priority", sizeValue41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings0.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNull(sizeValue42);
        org.junit.Assert.assertNotNull(strMap43);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.putCustom("index.uuid", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.numberOfReplicas(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        java.lang.Boolean boolean23 = settings19.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        boolean boolean25 = settings19.isEmpty();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = settings19.getAsMap();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder15.settings(settings27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + false + "'", boolean23, false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfReplicas(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.index("index.creation_date");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm(1000, (long) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder23.internalMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "index.version.upgraded", "index.shared_filesystem.recover_on_any_node" };
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.extendArray("index.version.created", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", false);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put(strMap36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        boolean boolean6 = indexMetaData1.isSameUUID("index.creation_date");
        int int7 = indexMetaData1.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.setRoutingNumShards(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfReplicas((int) (byte) 100);
        int int13 = builder12.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas(1000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfReplicas((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = builder10.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.putNull("archived.");
        java.lang.String str54 = builder50.remove("index.blocks.write");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created", "index.blocks.read", "primary_terms", "index.blocks.read_only", "index.blocks.metadata", "index.creation_date", "index.priority", "index.version.upgraded", "index.blocks.metadata" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder10.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder5.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder5.setRoutingNumShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.creationDate(0L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.setRoutingNumShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = builder11.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        int int12 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.state(state14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version((long) 10000);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        long long15 = builder12.version();
        int int16 = builder12.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings3.toXContent(xContentBuilder5, params6);
        boolean boolean8 = settings3.isEmpty();
        boolean boolean9 = settings3.isEmpty();
        java.lang.String str11 = settings3.toDelimitedString('4');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings3.getAsGroups();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNull(xContentBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder6.mapping("hi!");
        int int10 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.removeAlias("100.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.auto_expand_replicas", (int) (short) 10);
        org.elasticsearch.common.settings.Settings settings50 = builder49.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = settings4.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings4.getAsGroups(true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfReplicas(35);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData6.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData6.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData6.getAliases();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData6.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData6.requireFilters();
        org.elasticsearch.Version version14 = indexMetaData6.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        int int7 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int2 = indexMetaData1.getRoutingNumShards();
        int int3 = indexMetaData1.getRoutingFactor();
        boolean boolean5 = indexMetaData1.isSameUUID("index.blocks.metadata");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet7 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) -1, indexMetaData1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of source shards [1] must be a must be a multiple of [1]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.", "archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("archived.");
        long long41 = indexMetaData38.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap42 = indexMetaData38.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData38.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters44 = indexMetaData38.requireFilters();
        org.elasticsearch.Version version45 = indexMetaData38.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder33.put("index.number_of_replicas", version45);
        org.elasticsearch.common.settings.Settings settings47 = builder46.build();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder46.put("index.priority=true#", (float) 60000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNull(discoveryNodeFilters44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        long long8 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.creationDate((long) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder6.mapping("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte11 = state10.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.state(state10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.numberOfReplicas(100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings2.filter(strPredicate12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        boolean boolean15 = settings2.isEmpty();
        boolean boolean16 = settings2.isEmpty();
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.data_path", (double) (-1));
        java.lang.String[] strArray56 = new java.lang.String[] { "index.auto_expand_replicas", "index.version.minimum_compatible", "index.blocks.write", "index.version.created", "index.", "index.", "_all", "active_allocations", "index.version.upgraded", "index.shared_filesystem", "active_allocations", "index.blocks.write", "active_allocations", "index.blocks.metadata", "index.blocks.read", "index.version.created_string", "archived.", "index.version.created_string", "primary_terms", "index.version.minimum_compatible", "index.blocks.metadata" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder33.putArray("index.data_path", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.creation_date", "5000099");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.numberOfShards((int) (byte) 10);
        long long54 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder7.numberOfShards((int) (short) 10);
        java.lang.String str57 = builder56.index();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "index.creation_date_string" + "'", str57, "index.creation_date_string");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder28.put("index.number_of_shards", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder33.replacePropertyPlaceholders();
        java.lang.String str36 = builder34.get("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put("index.blocks.write", "index.version.upgraded_string");
        java.io.InputStream inputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder42 = builder34.loadFromStream("index.blocks.metadata", inputStream41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas(1000);
        int int9 = builder8.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder3.primaryTerm(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue13 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = settings11.getAsBytesSize("active_allocations", byteSizeValue13);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params16 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = settings11.toXContent(xContentBuilder15, params16);
        org.elasticsearch.common.settings.Settings settings19 = settings11.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder10.settings(settings11);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings22 = settings11.filter(strPredicate21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings11.getAsSize("index.shadow_replicas", sizeValue26);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.settings.Settings settings32 = settings29.getAsSettings("index.");
        java.lang.Boolean boolean35 = settings32.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings settings37 = settings32.getByPrefix("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = null;
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean42 = settings39.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings39.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings39.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = null;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean49 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings48);
        org.elasticsearch.common.settings.Settings settings51 = settings48.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings51);
        org.elasticsearch.Version version54 = null;
        org.elasticsearch.Version version55 = settings51.getAsVersion("index.data_path", version54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings57);
        org.elasticsearch.common.settings.Settings settings60 = settings57.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings60);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params63 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings60.toXContent(xContentBuilder62, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings51.toXContent(xContentBuilder56, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings39.toXContent(xContentBuilder47, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings37.toXContent(xContentBuilder38, params63);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = settings11.toXContent(xContentBuilder28, params63);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNull(byteSizeValue14);
        org.junit.Assert.assertNotNull(params16);
        org.junit.Assert.assertNull(xContentBuilder17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + true + "'", boolean35, true);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(params63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
        org.junit.Assert.assertNull(xContentBuilder68);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.numberOfReplicas((int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean23 = settings20.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings20.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings27 = settings20.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings19.dryRun(settings27);
        java.lang.String[] strArray35 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray36 = settings28.getAsArray("index.blocks.read_only", strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder14.extendArray("state-", strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder38.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("archived.", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder13.settings(builder44);
        java.util.concurrent.TimeUnit timeUnit51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder52 = builder44.put("5000099", (long) 35, timeUnit51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + true + "'", boolean23, true);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.", true);
        org.elasticsearch.common.settings.Settings settings52 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder51.put("primary_terms", (float) 32);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.normalizePrefix("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder23.internalMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "index.version.upgraded", "index.shared_filesystem.recover_on_any_node" };
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.extendArray("index.version.created", strArray31);
        java.lang.String str34 = builder32.remove("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((-1L));
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.settings(builder40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.putNull("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("state-", false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.", 0.0d);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean54 = settings51.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings51.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = settings51.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings50.dryRun(settings58);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean67 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings66);
        org.elasticsearch.common.settings.Settings settings69 = settings66.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings69);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params72 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = settings69.toXContent(xContentBuilder71, params72);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder74 = settings61.toXContent(xContentBuilder65, params72);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings58.toXContent(xContentBuilder60, params72);
        java.util.function.Predicate<java.lang.String> strPredicate76 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings77 = settings58.filter(strPredicate76);
        java.lang.Class<?> wildcardClass78 = settings58.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder48.put("archived.", (java.lang.Class) wildcardClass78);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("archived.", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder82.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("", (float) (byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + true + "'", boolean54, true);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(params72);
        org.junit.Assert.assertNull(xContentBuilder73);
        org.junit.Assert.assertNull(xContentBuilder74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.setRoutingNumShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean21 = settings18.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = settings18.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings17.dryRun(settings25);
        java.lang.String[] strArray33 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray34 = settings26.getAsArray("index.blocks.read_only", strArray33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder12.extendArray("state-", strArray33);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder12.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder36.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("archived.", false);
        org.elasticsearch.common.settings.Settings settings46 = builder45.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder11.settings(builder45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder11.version((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder49.numberOfReplicas((int) (short) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        int int6 = indexMetaData0.getRoutingNumShards();
        int int7 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings10 = settings8.getAsSettings("index.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
    }
}
