import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder7.settings(builder34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean47 = settings44.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings44.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings51 = settings44.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings43.dryRun(settings51);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray60 = settings52.getAsArray("index.blocks.read_only", strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder34.putArray("index.number_of_shards", strArray59);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + true + "'", boolean47, true);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings3.toXContent(xContentBuilder5, params6);
        java.lang.String[] strArray9 = settings3.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings11 = settings3.getByPrefix("index.creation_date");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNull(xContentBuilder7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("state-");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue10 = settings0.getAsRatio("index.blocks.metadata", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage []");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.shared_filesystem.recover_on_any_node", (float) (-1));
        org.elasticsearch.common.settings.Settings settings52 = builder48.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder50.putCustom("index.", custom52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((-1L));
        java.lang.Class<?> wildcardClass58 = builder57.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder46.put("index.shared_filesystem", (java.lang.Class) wildcardClass58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.loadFromSource("true");
        org.elasticsearch.common.settings.Settings settings62 = builder61.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue3 = settings0.getAsBytesSize("active_allocations", byteSizeValue2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        org.elasticsearch.common.settings.Settings settings6 = settings0.getAsSettings("index.shared_filesystem");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNull(byteSizeValue3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder23.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.putNull("primary_terms");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards(35);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        int int2 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(mappingMetaData4);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        java.lang.String str6 = builder0.get("_na_");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.Version version15 = null;
        org.elasticsearch.Version version16 = settings12.getAsVersion("index.data_path", version15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        java.util.function.Predicate<java.lang.String> strPredicate12 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings13 = settings2.filter(strPredicate12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings2.getAsGroups(true);
        org.elasticsearch.common.unit.SizeValue sizeValue17 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue18 = settings2.getAsSize("index.shadow_replicas", sizeValue17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings2.getGroups("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: illegal setting prefix ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(sizeValue18);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData5.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData5.getState();
        byte byte13 = state12.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.state(state12);
        java.lang.String str15 = builder1.index();
        int int16 = builder1.numberOfReplicas();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.data_path" + "'", str15, "index.data_path");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.version(60000L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        int int2 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData1.diff(indexMetaData2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData1.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData1.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.elasticsearch.Version version9 = indexMetaData1.getUpgradedVersion();
        long long10 = indexMetaData1.getVersion();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet12 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 1, indexMetaData1, 10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder52.put("index.blocks.write", (long) 1000);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.put(objDictionary58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        long long10 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings20 = settings13.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings12.dryRun(settings20);
        java.lang.String[] strArray28 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray29 = settings21.getAsArray("index.blocks.read_only", strArray28);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder7.extendArray("state-", strArray28);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.lang.String[] strArray37 = settings35.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder30.put(strMap38);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder30.putArray("state-", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.", true);
        org.elasticsearch.common.settings.Settings settings59 = builder58.build();
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData63 = indexMetaData61.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData61.requireFilters();
        boolean boolean66 = indexMetaData61.isSameUUID("index.priority");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap67 = indexMetaData61.getActiveAllocationIds();
        org.elasticsearch.Version version68 = indexMetaData61.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff69 = indexMetaData0.diff(indexMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNull(mappingMetaData63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap67);
        org.junit.Assert.assertNotNull(version68);
        org.junit.Assert.assertNotNull(indexMetaDataDiff69);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        long long10 = indexMetaData0.getVersion();
        java.lang.String str11 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read_only", (int) (short) 10);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("", 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putMapping(mappingMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        byte byte6 = state5.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = settings29.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings28.dryRun(settings36);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray45 = settings37.getAsArray("index.blocks.read_only", strArray44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings47.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = settings47.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings46.dryRun(settings54);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray63 = settings55.getAsArray("index.blocks.read_only", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder23.put("index.creation_date_string", "", strArray45, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder23.put("index.", 10);
        java.nio.file.Path path68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder69 = builder23.loadFromPath(path68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards(10);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(aliasMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder51.put(settings63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder51.put("_all", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder51.put("index.blocks.read", (int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.setRoutingNumShards((int) (byte) 10);
        int int10 = builder7.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.creationDate(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putMapping("primary_terms", "index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.getInitialRecoveryFilters();
        int int21 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.setRoutingNumShards(0);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = builder10.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        boolean boolean6 = indexMetaData1.isSameUUID("index.creation_date");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData1.getMappings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean13 = settings10.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings17 = settings10.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings9.dryRun(settings17);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean23 = settings20.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings25);
        org.elasticsearch.common.settings.Settings settings28 = settings25.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = settings28.toXContent(xContentBuilder30, params31);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = settings20.toXContent(xContentBuilder24, params31);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings17.toXContent(xContentBuilder19, params31);
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings36 = settings17.filter(strPredicate35);
        java.lang.Boolean boolean39 = settings36.getAsBoolean("hi!", (java.lang.Boolean) true);
        java.lang.String str42 = settings36.get("active_allocations", "index.blocks.write");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = null;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean45 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings44);
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        org.elasticsearch.Version version50 = null;
        org.elasticsearch.Version version51 = settings47.getAsVersion("index.data_path", version50);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = null;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean54 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings53);
        org.elasticsearch.common.settings.Settings settings56 = settings53.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings56);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params59 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = settings56.toXContent(xContentBuilder58, params59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = settings47.toXContent(xContentBuilder52, params59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = settings36.toXContent(xContentBuilder43, params59);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData1, xContentBuilder8, params59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + true + "'", boolean23, true);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(params31);
        org.junit.Assert.assertNull(xContentBuilder32);
        org.junit.Assert.assertNull(xContentBuilder33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertEquals("'" + boolean39 + "' != '" + true + "'", boolean39, true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "index.blocks.write" + "'", str42, "index.blocks.write");
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNull(version51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(params59);
        org.junit.Assert.assertNull(xContentBuilder60);
        org.junit.Assert.assertNull(xContentBuilder61);
        org.junit.Assert.assertNull(xContentBuilder62);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [hi!]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings8.getGroups("index.blocks.read");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("archived.", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.loadFromSource("index.number_of_replicas");
        java.lang.String str37 = builder35.get("index.");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder41 = builder35.put("index.creation_date", (long) (byte) 1, byteSizeUnit40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putMapping("index.shared_filesystem.recover_on_any_node", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.putAlias(aliasMetaData14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index12 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(index12);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        java.lang.String str29 = builder27.remove("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.putNull("_all");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        java.lang.String[] strArray56 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder39.putArray("state-", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder61.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder67.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder67.put("", 0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder15.settings(builder71);
        // The following exception was thrown during execution in test generation
        try {
            long long74 = builder72.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder7.creationDate((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder7.putMapping("index.number_of_shards", "_na_");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("archived.", false);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.number_of_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings37);
        org.elasticsearch.common.settings.Settings settings40 = settings37.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings40);
        java.lang.String[] strArray43 = settings41.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = settings41.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings46 = settings41.filter(strPredicate45);
        java.lang.String[] strArray48 = settings46.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder36.put((java.lang.Object[]) strArray48);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder51 = builder36.put(objDictionary50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.creationDate(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.putMapping(mappingMetaData17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder13.mapping("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.numberOfShards((int) (byte) 0);
        long long18 = builder13.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getRoutingFactor();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet6 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        java.lang.String[] strArray78 = new java.lang.String[] { "index.", "index.number_of_shards", "index.shadow_replicas", "index.auto_expand_replicas", "index.blocks.read_only", "primary_terms", "index.priority", "index.data_path", "index.uuid", "index.blocks.read_only", "state-", "index.data_path", "index.blocks.write", "archived.", "index.version.upgraded_string", "index.uuid", "index.uuid", "index.blocks.metadata", "index.shared_filesystem.recover_on_any_node", "index.uuid", "index.blocks.write", "_all", "hi!", "index.blocks.read_only", "_na_" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder51.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList79);
        java.lang.String str83 = builder81.remove("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1000);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNotNull(version3);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        boolean boolean6 = indexMetaData1.isSameUUID("index.creation_date");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData1.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData1.getState();
        byte byte9 = state8.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.normalizePrefix("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.version.minimum_compatible", 0.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.", true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.blocks.write", "index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = indexMetaData59.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff62 = indexMetaData58.diff(indexMetaData59);
        org.elasticsearch.Version version63 = indexMetaData59.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder53.put("_all", version63);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("active_allocations", "index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNull(mappingMetaData61);
        org.junit.Assert.assertNotNull(indexMetaDataDiff62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder6.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.putMapping(mappingMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.putMapping(mappingMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.extendArray("index.version.created", strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder24.put("", (double) 100);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder24.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("", "100.0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        long long2 = builder1.version();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.primaryTerm(100, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings21.getAsVersion("index.data_path", version24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings21.toXContent(xContentBuilder26, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings9.toXContent(xContentBuilder17, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings0.toXContent(xContentBuilder8, params33);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue41 = settings0.getAsRatio("_na_", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [state-]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(settings38);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.common.settings.Settings settings37 = settings34.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        java.lang.String[] strArray40 = settings38.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings38.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder33.put(strMap41);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder33.putArray("state-", (java.util.List<java.lang.String>) strList51);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder33.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder59.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom62 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder60.putCustom("index.", custom62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder63.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder65.version((-1L));
        java.lang.Class<?> wildcardClass68 = builder67.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder56.put("index.shared_filesystem", (java.lang.Class) wildcardClass68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder7.settings(builder56);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder7.putAlias(builder71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder2.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings2.getAsStructuredMap();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings2, streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData37.diff(indexMetaData38);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData37.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData37.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData46.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff49 = indexMetaData45.diff(indexMetaData46);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters50 = indexMetaData45.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff51 = indexMetaData37.diff(indexMetaData45);
        java.util.Set<java.lang.String> strSet53 = null; // flaky: indexMetaData45.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version54 = indexMetaData45.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder35.put("index.number_of_shards", version54);
        java.nio.file.Path path56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.loadFromPath(path56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNotNull(indexMetaDataDiff49);
        org.junit.Assert.assertNull(discoveryNodeFilters50);
        org.junit.Assert.assertNotNull(indexMetaDataDiff51);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.number_of_replicas", true);
        java.io.InputStream inputStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder65 = builder59.loadFromStream("index.version.upgraded_string", inputStream64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder7.setRoutingNumShards((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getRoutingFactor();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.number_of_replicas", true);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder59.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder59.put("100.0", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.readDiffFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.setRoutingNumShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder9.primaryTerm(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder40.put("index.priority", 0.0d);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        int int2 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        java.lang.String[] strArray23 = settings21.getAsArray("state-");
        java.lang.String[] strArray25 = settings21.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue27 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue28 = settings21.getAsSize("index.version.created_string", sizeValue27);
        java.util.Set<java.lang.String> strSet29 = settings21.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder15.putActiveAllocationIds((int) (byte) 1, strSet29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder1.putActiveAllocationIds((int) ' ', strSet29);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder1.putAlias(builder32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(sizeValue28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.loadFromSource("index.");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.put("index.version.minimum_compatible", (long) (byte) 10, byteSizeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getByPrefix("index.version.upgraded");
        java.lang.String str9 = settings0.get("index.version.upgraded_string");
        java.util.Set<java.lang.String> strSet10 = settings0.names();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = indexMetaData0.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(version9);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.index.Index index1 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(index1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(index5);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.put("index.version.minimum_compatible", (double) (-1L));
        java.util.concurrent.TimeUnit timeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder38 = builder28.put("index.auto_expand_replicas", 1L, timeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.elasticsearch.common.settings.Settings settings16 = settings13.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.lang.String[] strArray19 = settings17.getAsArray("state-");
        java.lang.String[] strArray21 = settings17.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue23 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue24 = settings17.getAsSize("index.version.created_string", sizeValue23);
        java.util.Set<java.lang.String> strSet25 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder11.putActiveAllocationIds((int) (byte) 1, strSet25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder11.numberOfShards((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = builder28.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(sizeValue24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = indexMetaData0.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder4.putAlias(aliasMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.blocks.read");
        int int15 = builder12.getRoutingNumShards();
        java.lang.String[] strArray46 = new java.lang.String[] { "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.version.upgraded_string", "hi!", "index.creation_date_string", "state-", "_all", "index.version.minimum_compatible", "", "primary_terms", "index.shadow_replicas", "index.blocks.metadata", "index.version.upgraded", "index.version.minimum_compatible", "index.blocks.read_only", "_na_", "index.version.minimum_compatible", "index.shadow_replicas", "index.blocks.write", "index.priority", "index.version.minimum_compatible", "_all", "index.", "primary_terms", "index.version.minimum_compatible", "primary_terms", "index.creation_date_string", "index.priority", "index.version.upgraded", "index.uuid" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder12.putActiveAllocationIds(35, (java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.putAlias(aliasMetaData50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData9.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData9.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData9.getAliases();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData9.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData9.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder8.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder8.index("index.version.created");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData5.getMappings();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData5.activeAllocationIds(1000);
        int int14 = indexMetaData5.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData5.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder4.state(state15);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        long long5 = builder2.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putMapping(mappingMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.primaryTerm((int) (short) 1, (long) 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings settings30 = builder27.build();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put("index.version.upgraded_string", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.removeAllAliases();
        int int12 = builder11.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long11 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.get("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("state-");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.", 0.0d);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean54 = settings51.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings51.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = settings51.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings50.dryRun(settings58);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = null;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean67 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings66);
        org.elasticsearch.common.settings.Settings settings69 = settings66.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings69);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params72 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = settings69.toXContent(xContentBuilder71, params72);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder74 = settings61.toXContent(xContentBuilder65, params72);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings58.toXContent(xContentBuilder60, params72);
        java.util.function.Predicate<java.lang.String> strPredicate76 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings77 = settings58.filter(strPredicate76);
        java.lang.Class<?> wildcardClass78 = settings58.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder48.put("archived.", (java.lang.Class) wildcardClass78);
        java.nio.file.Path path80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder81 = builder48.loadFromPath(path80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + true + "'", boolean54, true);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + true + "'", boolean64, true);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(params72);
        org.junit.Assert.assertNull(xContentBuilder73);
        org.junit.Assert.assertNull(xContentBuilder74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.creation_date");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.creation_date]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        java.lang.String[] strArray78 = new java.lang.String[] { "index.", "index.number_of_shards", "index.shadow_replicas", "index.auto_expand_replicas", "index.blocks.read_only", "primary_terms", "index.priority", "index.data_path", "index.uuid", "index.blocks.read_only", "state-", "index.data_path", "index.blocks.write", "archived.", "index.version.upgraded_string", "index.uuid", "index.uuid", "index.blocks.metadata", "index.shared_filesystem.recover_on_any_node", "index.uuid", "index.blocks.write", "_all", "hi!", "index.blocks.read_only", "_na_" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder51.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder51.put("archived.", (int) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder51.normalizePrefix("");
        java.io.InputStream inputStream88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder89 = builder86.loadFromStream("_all", inputStream88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean4 = settings1.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings1.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings0.dryRun(settings8);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings19.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings11.toXContent(xContentBuilder15, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings8.toXContent(xContentBuilder10, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings8.toXContent(xContentBuilder26, params33);
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNull(xContentBuilder24);
        org.junit.Assert.assertNull(xContentBuilder25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded", custom6);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putAlias(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        java.io.InputStream inputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.loadFromStream("index.version.upgraded", inputStream46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("index.version.created");
        java.lang.Class<?> wildcardClass30 = builder27.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue3 = settings0.getAsBytesSize("index.auto_expand_replicas", byteSizeValue2);
        java.util.Set<java.lang.String> strSet4 = settings0.names();
        java.lang.Boolean boolean7 = settings0.getAsBoolean("index.blocks.read_only", (java.lang.Boolean) true);
        java.util.Set<java.lang.String> strSet8 = settings0.names();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNull(byteSizeValue3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 0);
        int int4 = builder3.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.creationDate((long) 10);
        long long54 = builder53.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putMapping("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        int int2 = builder1.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.primaryTerm((int) (byte) 1, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder7.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom57 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder7.putCustom("index.shadow_replicas", custom57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder7.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder7.creationDate(10L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("primary_terms", (long) 0);
        java.lang.String str35 = builder33.remove("hi!");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put("index.version.created", (long) (byte) -1, byteSizeUnit38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.priority");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((-1L));
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.settings(builder40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder9.index("index.version.upgraded_string");
        int int44 = builder43.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.numberOfReplicas((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder43.index("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        boolean boolean10 = settings9.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(settings10);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = settings29.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings28.dryRun(settings36);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray45 = settings37.getAsArray("index.blocks.read_only", strArray44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings47.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = settings47.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings46.dryRun(settings54);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray63 = settings55.getAsArray("index.blocks.read_only", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder23.put("index.creation_date_string", "", strArray45, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder64.loadFromSource("index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("index.blocks.write", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.version(5000099L);
        org.elasticsearch.common.settings.Settings.Builder builder15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.settings(builder15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.version((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder53.putMapping("index.version.created_string", "5000099");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created", "index.blocks.read", "primary_terms", "index.blocks.read_only", "index.blocks.metadata", "index.creation_date", "index.priority", "index.version.upgraded", "index.blocks.metadata" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder10.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder5.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.putAlias(aliasMetaData26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        java.util.Set<java.lang.String> strSet6 = settings0.names();
        java.lang.Boolean boolean9 = settings0.getAsBoolean("index.number_of_replicas", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.blocks.read", custom9);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.putMapping(mappingMetaData11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mapping("archived.");
        long long8 = indexMetaData5.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData5.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.state(state9);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.put(settings47);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.blocks.write", (float) '#');
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("index.priority", "archived.");
        java.util.concurrent.TimeUnit timeUnit60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder61 = builder51.put("index.priority", (long) ' ', timeUnit60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("_na_");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder40.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("archived.", false);
        org.elasticsearch.common.settings.Settings settings50 = builder49.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder15.settings(builder49);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = builder15.numberOfShards();
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: Failed to parse int setting [index.number_of_shards] with value [-1.0]");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.data_path");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.data_path]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder32.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.priority", (int) '#');
        java.nio.file.Path path43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder44 = builder42.loadFromPath(path43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean6 = settings3.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings3.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings10 = settings3.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings2.dryRun(settings10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = settings21.toXContent(xContentBuilder23, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = settings13.toXContent(xContentBuilder17, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = settings10.toXContent(xContentBuilder12, params24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.settings.Settings settings32 = settings29.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings32.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings10.toXContent(xContentBuilder28, params35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder1.settings(settings10);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.putAlias(aliasMetaData39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(params24);
        org.junit.Assert.assertNull(xContentBuilder25);
        org.junit.Assert.assertNull(xContentBuilder26);
        org.junit.Assert.assertNull(xContentBuilder27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.priority", custom9);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.primaryTerm((int) (byte) 100, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder40.put("index.priority", (int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder5.settings(builder33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("_all", (float) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("100.0", true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.putMapping(mappingMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.", true);
        org.elasticsearch.common.settings.Settings settings52 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder51.put("", 0.0d);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.creation_date", 10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.blocks.read");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder12.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.numberOfShards((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.blocks.read", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder7.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder7.setRoutingNumShards((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.data_path");
        long long10 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        int int5 = indexMetaData1.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData1.mappingOrDefault("_na_");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            mappingMetaData7.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        java.lang.String str5 = builder3.remove("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("100.0", (long) 10000, byteSizeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        org.elasticsearch.common.unit.SizeValue sizeValue6 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue7 = settings4.getAsSize("true", sizeValue6);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings4, streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(sizeValue7);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.version.created", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mapping("archived.");
        java.util.Set<java.lang.String> strSet20 = null; // flaky: indexMetaData16.activeAllocationIds((int) ' ');
        int int21 = indexMetaData16.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData16.getSettings();
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings24 = settings22.filter(strPredicate23);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder15.settings(settings24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue29 = settings24.getAsMemory("index.uuid", "index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.uuid] with value [index.blocks.read] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder51.setRoutingNumShards(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version(0L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("hi!", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.numberOfReplicas(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings4.getAsSize("true", sizeValue13);
        java.lang.String str16 = settings4.toDelimitedString('#');
        java.lang.String str19 = settings4.get("index.auto_expand_replicas", "true");
        java.lang.Boolean boolean22 = settings4.getAsBoolean("index.creation_date", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.SizeValue sizeValue24 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue25 = settings4.getAsSize("index.creation_date_string", sizeValue24);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "true" + "'", str19, "true");
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertNull(sizeValue25);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.readDiffFrom(streamInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.data_path", (double) (-1));
        java.lang.Object[] objArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.put(objArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = builder4.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(indexMetaData5);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings settings33 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((-1L));
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.settings(builder40);
        int int42 = builder41.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1000);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.shared_filesystem.recover_on_any_node");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        int int7 = builder1.getRoutingNumShards();
        long long8 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            long long14 = builder12.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.index.Index index1 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.removeAllAliases();
        boolean boolean16 = indexMetaData0.equals((java.lang.Object) builder15);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = indexMetaData0.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(index1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.version((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder55.primaryTerm((int) (short) 100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        java.lang.String[] strArray78 = new java.lang.String[] { "index.", "index.number_of_shards", "index.shadow_replicas", "index.auto_expand_replicas", "index.blocks.read_only", "primary_terms", "index.priority", "index.data_path", "index.uuid", "index.blocks.read_only", "state-", "index.data_path", "index.blocks.write", "archived.", "index.version.upgraded_string", "index.uuid", "index.uuid", "index.blocks.metadata", "index.shared_filesystem.recover_on_any_node", "index.uuid", "index.blocks.write", "_all", "hi!", "index.blocks.read_only", "_na_" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder51.putArray("index.shared_filesystem.recover_on_any_node", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder51.put("archived.", (int) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder51.normalizePrefix("");
        java.util.Map<java.lang.String, java.lang.String> strMap87 = builder51.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strMap87);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.number_of_shards", 0);
        java.lang.String str32 = builder30.remove("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = settings29.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings28.dryRun(settings36);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray45 = settings37.getAsArray("index.blocks.read_only", strArray44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings47.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = settings47.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings46.dryRun(settings54);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray63 = settings55.getAsArray("index.blocks.read_only", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder23.put("index.creation_date_string", "", strArray45, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder23.put("index.", 10);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder23.putNull("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder69.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.blocks.metadata", (int) (short) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.elasticsearch.common.settings.Settings settings63 = settings60.getAsSettings("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder51.put(settings63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder51.replacePropertyPlaceholders();
        java.lang.String[] strArray87 = new java.lang.String[] { "index.blocks.metadata", "index.version.upgraded_string", "primary_terms", "index.uuid", "index.creation_date", "state-", "primary_terms", "index.", "index.version.upgraded_string", "index.shared_filesystem", "index.shadow_replicas", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.blocks.metadata", "primary_terms", "index.version.created_string", "", "active_allocations", "index.version.upgraded", "true" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder65.putArray("index.version.upgraded_string", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder65.putNull("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.auto_expand_replicas", "index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings31 = builder24.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.lang.Boolean boolean4 = settings0.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings6 = settings0.getByPrefix("index.priority");
        org.elasticsearch.common.settings.Settings settings8 = settings0.getByPrefix("");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + false + "'", boolean4, false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.putAlias(aliasMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = builder90.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder90.put("index.number_of_shards", (float) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder90.putNull("index.version.created");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm((int) (short) 10, 60000L);
        int int7 = builder6.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings7, streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.extendArray("index.version.created", strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.loadFromSource("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        java.lang.Boolean boolean42 = settings38.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings44 = settings38.getByPrefix("index.priority");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean48 = settings45.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings52 = settings45.getAsSettings("index.creation_date_string");
        java.lang.String[] strArray54 = settings45.getAsArray("index.uuid");
        boolean boolean55 = settings38.equals((java.lang.Object) settings45);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.put(settings45);
        java.lang.Object[] objArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder58 = builder37.put(objArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + true + "'", boolean48, true);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.number_of_replicas", (double) 10L);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder24.put("index.version.upgraded_string", 1);
        java.lang.String str38 = builder36.remove("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        java.lang.Boolean boolean6 = settings3.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings settings8 = settings3.getByPrefix("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean13 = settings10.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings10.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings17 = settings10.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        org.elasticsearch.common.settings.Settings settings22 = settings19.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.Version version25 = null;
        org.elasticsearch.Version version26 = settings22.getAsVersion("index.data_path", version25);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean29 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings31);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params34 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings31.toXContent(xContentBuilder33, params34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings22.toXContent(xContentBuilder27, params34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings10.toXContent(xContentBuilder18, params34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = settings8.toXContent(xContentBuilder9, params34);
        java.lang.String[] strArray40 = settings8.getAsArray("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(params34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNull(xContentBuilder38);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.", true);
        org.elasticsearch.common.settings.Settings settings52 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder51.put("primary_terms", (float) 32);
        java.nio.file.Path path56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.loadFromPath(path56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.blocks.read");
        int int15 = builder12.getRoutingNumShards();
        java.lang.String[] strArray46 = new java.lang.String[] { "index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", "index.version.upgraded_string", "hi!", "index.creation_date_string", "state-", "_all", "index.version.minimum_compatible", "", "primary_terms", "index.shadow_replicas", "index.blocks.metadata", "index.version.upgraded", "index.version.minimum_compatible", "index.blocks.read_only", "_na_", "index.version.minimum_compatible", "index.shadow_replicas", "index.blocks.write", "index.priority", "index.version.minimum_compatible", "_all", "index.", "primary_terms", "index.version.minimum_compatible", "primary_terms", "index.creation_date_string", "index.priority", "index.version.upgraded", "index.uuid" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder12.putActiveAllocationIds(35, (java.util.Set<java.lang.String>) strSet47);
        int int50 = builder12.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate(60000L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.index.Index index4 = indexMetaData0.getIndex();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            index4.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(index4);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.number_of_replicas", (double) 10L);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings35);
        org.elasticsearch.common.settings.Settings settings38 = settings35.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings39.getAsGroups();
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters46 = indexMetaData43.requireFilters();
        org.apache.lucene.util.Version version47 = indexMetaData43.getMinimumCompatibleVersion();
        org.elasticsearch.Version version48 = indexMetaData43.getUpgradedVersion();
        org.elasticsearch.Version version49 = settings39.getAsVersion("index.priority", version48);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder24.put("index.shared_filesystem.recover_on_any_node", version48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("primary_terms", (double) 10L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNull(discoveryNodeFilters46);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(version48);
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        long long13 = indexMetaData0.getVersion();
        int int14 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.version.created_string");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("100.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(mappingMetaData12);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.data_path", (double) (-1));
        java.lang.String[] strArray56 = new java.lang.String[] { "index.auto_expand_replicas", "index.version.minimum_compatible", "index.blocks.write", "index.version.created", "index.", "index.", "_all", "active_allocations", "index.version.upgraded", "index.shared_filesystem", "active_allocations", "index.blocks.write", "active_allocations", "index.blocks.metadata", "index.blocks.read", "index.version.created_string", "archived.", "index.version.created_string", "primary_terms", "index.version.minimum_compatible", "index.blocks.metadata" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder33.putArray("index.data_path", (java.util.List<java.lang.String>) strList57);
        java.lang.Class<?> wildcardClass60 = strList57.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        java.lang.Boolean boolean6 = settings3.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings settings8 = settings3.getByPrefix("");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue11 = settings8.getAsRatio("index.version.upgraded_string", "index.blocks.read_only");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.read_only]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings5.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings5.getGroups("index.version.created", true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder43.loadFromSource("_all");
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder92.put("_na_", (int) (byte) 100);
        java.io.InputStream inputStream97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder98 = builder92.loadFromStream("index.data_path", inputStream97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfReplicas(10000);
        java.lang.String str10 = builder1.index();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.creation_date_string" + "'", str10, "index.creation_date_string");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings settings91 = builder43.build();
        boolean boolean92 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings91);
        boolean boolean93 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings91);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder52.normalizePrefix("index.blocks.read");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder58 = builder56.put(objDictionary57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.putAlias(aliasMetaData15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData1.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData1.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData1.getActiveAllocationIds();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet10 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 100, indexMetaData1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (10) must be greater than the shard id: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        java.util.Set<java.lang.String> strSet6 = settings0.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings0.getAsGroups();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue4 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = settings2.getAsBytesSize("active_allocations", byteSizeValue4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings2.toXContent(xContentBuilder6, params7);
        org.elasticsearch.common.settings.Settings settings10 = settings2.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(settings2);
        int int12 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.numberOfShards((int) '4');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = builder14.mapping("index.priority");
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(byteSizeValue5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mappingMetaData16);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData5.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData5.getState();
        byte byte13 = state12.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder14.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = builder17.mapping("index.creation_date");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(mappingMetaData19);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean18 = settings15.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings22 = settings15.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings14.dryRun(settings22);
        java.lang.String[] strArray30 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray31 = settings23.getAsArray("index.blocks.read_only", strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder9.extendArray("state-", strArray30);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder32.put(strMap40);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder32.putArray("state-", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder60.putNull("index.uuid");
        boolean boolean63 = indexMetaData0.equals((java.lang.Object) builder62);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder62.put("index.", "index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.creation_date", "index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putAlias(aliasMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = builder4.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        long long9 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds(1000);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = settings0.getAsStructuredMap();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = settings0.getAsMemory("index.blocks.read_only", "index.blocks.write");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.read_only] with value [index.blocks.write] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.index.Index index1 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        byte byte3 = state2.id();
        byte byte4 = state2.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(index1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putMapping(mappingMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.Version version15 = null;
        org.elasticsearch.Version version16 = settings12.getAsVersion("index.data_path", version15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings12);
        org.elasticsearch.index.translog.Translog.Durability durability18 = indexSettings17.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertTrue("'" + durability18 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability18.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        int int5 = indexMetaData0.getRoutingNumShards();
        long long6 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.number_of_replicas", custom5);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putAlias(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder45.putNull("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean18 = settings15.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings15.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings22 = settings15.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings14.dryRun(settings22);
        java.lang.String[] strArray30 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray31 = settings23.getAsArray("index.blocks.read_only", strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder9.extendArray("state-", strArray30);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder32.put(strMap40);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder32.putArray("state-", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder60.putNull("index.uuid");
        boolean boolean63 = indexMetaData0.equals((java.lang.Object) builder62);
        org.elasticsearch.common.io.stream.StreamInput streamInput64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = indexMetaData0.readFrom(streamInput64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder2.mapping("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder6 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean15 = settings12.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings12.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings19 = settings12.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings11.dryRun(settings19);
        java.lang.String[] strArray27 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray28 = settings20.getAsArray("index.blocks.read_only", strArray27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder6.extendArray("state-", strArray27);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        java.lang.String[] strArray36 = settings34.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = settings34.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder29.put(strMap37);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder29.putArray("state-", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings60 = builder57.build();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder57.put("", "index.priority");
        java.lang.String str65 = builder63.get("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder2.settings(builder63);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder63.put("index.version.minimum_compatible", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder63.put("index.version.upgraded", (double) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + true + "'", boolean15, true);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("_all", custom5);
        java.lang.String str7 = builder3.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.number_of_shards" + "'", str7, "index.number_of_shards");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("index.shared_filesystem");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of source shards [1] must be a must be a multiple of [-1]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData1.getCustoms();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet4 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(10000, indexMetaData1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 10000");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder7.settings(builder34);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = builder7.build();
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: Failed to parse int setting [index.number_of_shards] with value [-1.0]");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        int int5 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.auto_expand_replicas");
        long long8 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.blocks.read", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.numberOfShards((int) (short) 100);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("archived.");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version(100L);
        int int8 = builder3.getRoutingNumShards();
        java.lang.String str9 = builder3.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder3.removeAlias("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.setRoutingNumShards(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "primary_terms" + "'", str9, "primary_terms");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version(100L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putMapping(mappingMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.lang.Boolean boolean13 = settings9.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version(100L);
        int int8 = builder3.getRoutingNumShards();
        java.lang.String str9 = builder3.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "primary_terms" + "'", str9, "primary_terms");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.setRoutingNumShards((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = builder9.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.creation_date_string", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.version.created]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.version.upgraded");
        java.lang.String str32 = builder30.get("index.priority=true#");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.removeAlias("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", custom12);
        long long14 = builder10.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.data_path", "index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_all");
        int int2 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.number_of_replicas", (double) 10L);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.data_path", (float) (short) 100);
        java.util.concurrent.TimeUnit timeUnit39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.priority", (long) 35, timeUnit39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder2.creationDate((long) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        java.lang.String str5 = builder3.remove("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder3.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.loadFromSource("index.uuid");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean14 = settings11.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings19.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = settings11.toXContent(xContentBuilder15, params22);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings11.getAsSize("index.blocks.metadata", sizeValue26);
        java.lang.String[] strArray29 = settings11.getAsArray("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder3.putArray("index.number_of_replicas", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder3.putNull("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNull(xContentBuilder24);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder13.mapping("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = builder17.mapping("");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.putAlias(builder20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(mappingMetaData19);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("state-");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        long long6 = indexMetaData0.primaryTerm(0);
        long long7 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = builder41.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        int int11 = indexMetaData0.getRoutingFactor();
        int int12 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putAlias(aliasMetaData3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData1.diff(indexMetaData2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData1.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData1.getMappings();
        org.apache.lucene.util.Version version8 = indexMetaData1.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData1.getAliases();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet12 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((-1), indexMetaData1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.shared_filesystem.recover_on_any_node", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("_na_", "archived.");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder6.put("index.version.minimum_compatible", (long) 32, byteSizeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings3.toXContent(xContentBuilder5, params6);
        java.lang.String str9 = settings3.get("");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings3.getGroups("index.priority", false);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean15 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.common.settings.Settings settings17 = settings14.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        java.lang.String[] strArray20 = settings18.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = settings18.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings23 = settings18.filter(strPredicate22);
        java.lang.String[] strArray25 = settings18.getAsArray("index.blocks.write");
        java.lang.String str27 = settings18.toDelimitedString('#');
        java.lang.String[] strArray29 = settings18.getAsArray("index.number_of_replicas");
        java.lang.String[] strArray31 = settings3.getAsArray("", strArray29, (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNull(xContentBuilder7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        int int10 = indexMetaData0.getNumberOfReplicas();
        boolean boolean12 = indexMetaData0.isSameUUID("index.shared_filesystem.recover_on_any_node");
        int int13 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = settings13.getAsBytesSize("active_allocations", byteSizeValue15);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = settings13.toXContent(xContentBuilder17, params18);
        org.elasticsearch.common.settings.Settings settings21 = settings13.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder12.settings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings13.getAsGroups(true);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings13.getAsSize("index.version.upgraded_string", sizeValue26);
        java.lang.Boolean boolean30 = settings13.getAsBoolean("_all", (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder7.settings(settings13);
        int int32 = builder31.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.numberOfReplicas(10000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(params18);
        org.junit.Assert.assertNull(xContentBuilder19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        int int2 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff7 = indexMetaData0.readDiffFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.numberOfReplicas((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.creationDate((long) ' ');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.put(settings47);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder46.put("hi!", "false");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("state-", (double) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        java.util.concurrent.TimeUnit timeUnit7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.put("primary_terms", (long) 10000, timeUnit7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        int int14 = builder13.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfShards(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putCustom("false", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder18.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder18.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder18.putAlias(aliasMetaData26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("100.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [100.0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        boolean boolean8 = indexMetaData0.isSameUUID("100.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.number_of_replicas", custom5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putMapping(mappingMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("archived.", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shadow_replicas", (double) (-1.0f));
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.creation_date_string", "true");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean4 = settings1.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings1.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings0.dryRun(settings8);
        org.elasticsearch.common.settings.Setting.Property property10 = indexScopedSettings0.getScope();
        java.lang.String str11 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + property10 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property10.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings0.getAsGroups(true);
        java.lang.Class<?> wildcardClass8 = settings0.getClass();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        int int7 = indexMetaData0.getNumberOfReplicas();
        boolean boolean9 = indexMetaData0.isSameUUID("active_allocations");
        int int10 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet9 = indexMetaData0.activeAllocationIds((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("archived.");
        long long13 = indexMetaData10.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.Version version17 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String str12 = settings9.get("_na_", "false");
        boolean boolean13 = settings9.isEmpty();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "false" + "'", str12, "false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version(1L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.putAlias(aliasMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        java.lang.String str35 = builder33.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean42 = settings39.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings39.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings46 = settings39.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings38.dryRun(settings46);
        java.lang.String[] strArray54 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray55 = settings47.getAsArray("index.blocks.read_only", strArray54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean60 = settings57.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings57.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings64 = settings57.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings56.dryRun(settings64);
        java.lang.String[] strArray72 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray73 = settings65.getAsArray("index.blocks.read_only", strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder33.put("index.creation_date_string", "", strArray55, strArray72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder9.settings(builder74);
        int int76 = builder75.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertEquals("'" + boolean60 + "' != '" + true + "'", boolean60, true);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        java.util.Set<java.lang.String> strSet6 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        int int7 = indexMetaData0.getNumberOfReplicas();
        int int8 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("index.number_of_shards");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = builder10.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        java.io.InputStream inputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.loadFromStream("index.blocks.read", inputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.priority=true#");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder10.extendArray("state-", strArray31);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.common.settings.Settings settings37 = settings34.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        java.lang.String[] strArray40 = settings38.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = settings38.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder33.put(strMap41);
        java.lang.String[] strArray50 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder33.putArray("state-", (java.util.List<java.lang.String>) strList51);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder33.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder59.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom62 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder60.putCustom("index.", custom62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder63.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder65.version((-1L));
        java.lang.Class<?> wildcardClass68 = builder67.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder56.put("index.shared_filesystem", (java.lang.Class) wildcardClass68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder7.settings(builder56);
        java.util.concurrent.TimeUnit timeUnit73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder74 = builder56.put("index.shared_filesystem", (long) (byte) 10, timeUnit73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("_na_", 0.0f);
        org.elasticsearch.common.settings.Settings settings31 = builder30.build();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder30.put("", (double) 10.0f);
        java.lang.String str36 = builder30.get("5000099");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.Object obj21 = null;
        boolean boolean22 = indexMetaData0.equals(obj21);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        java.lang.String str29 = builder27.remove("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.version.upgraded_string", 1L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        long long6 = indexMetaData1.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData1.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData1.mapping("index.number_of_replicas");
        org.elasticsearch.Version version10 = indexMetaData1.getUpgradedVersion();
        int int11 = indexMetaData1.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData1.requireFilters();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet14 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 1, indexMetaData1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder6.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = builder2.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder32.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.priority", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("state-", false);
        java.nio.file.Path path46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.loadFromPath(path46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.put("index.number_of_replicas", (double) (byte) 0);
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder33 = builder23.loadFromStream("index.data_path", inputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.elasticsearch.common.settings.Settings settings16 = settings13.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.lang.String[] strArray19 = settings17.getAsArray("state-");
        java.lang.String[] strArray21 = settings17.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue23 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue24 = settings17.getAsSize("index.version.created_string", sizeValue23);
        java.util.Set<java.lang.String> strSet25 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder11.putActiveAllocationIds((int) (byte) 1, strSet25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder11.version(0L);
        int int29 = builder28.numberOfShards();
        long long30 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.removeAlias("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.version((long) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(sizeValue24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.priority=true#");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings0.toXContent(xContentBuilder5, params6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("100.0");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        int int4 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexMetaData0.readFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(version6);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.setRoutingNumShards(100);
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder1.mapping("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean8 = settings5.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap10 = settings5.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings12 = settings5.getByPrefix("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings5);
        int int14 = builder13.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.state(state18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.state(state18);
        int int21 = builder13.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder13.index("index.blocks.write");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + true + "'", boolean8, true);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings62.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings69 = settings62.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings61.dryRun(settings69);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray78 = settings70.getAsArray("index.blocks.read_only", strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder56.extendArray("state-", strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder56.put("primary_terms", (float) (short) -1);
        java.util.Map<java.lang.String, java.lang.String> strMap83 = builder82.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder54.put(strMap83);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder54.put("index.blocks.read_only", "index.blocks.write");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("archived.");
        long long13 = indexMetaData10.getCreationDate();
        long long14 = indexMetaData10.getVersion();
        org.elasticsearch.index.Index index15 = indexMetaData10.getMergeSourceIndex();
        org.elasticsearch.Version version16 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData10.getCustoms();
        long long19 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.diff(indexMetaData10);
        int int21 = indexMetaData10.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.removeAlias("active_allocations");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("100.0");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("true");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("100.0");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.blocks.read", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.setRoutingNumShards((int) '4');
        long long13 = builder12.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.version.created");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(index7);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.extendArray("index.version.created", strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder24.put("", (double) 100);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder24.put("index.version.created_string", "index.version.minimum_compatible");
        java.lang.String[] strArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder44 = builder24.extendArray("primary_terms", strArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", custom5);
        int int7 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings12);
        org.elasticsearch.common.settings.Settings settings15 = settings12.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        java.lang.String[] strArray18 = settings16.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = settings16.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate20 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings21 = settings16.filter(strPredicate20);
        java.lang.String[] strArray23 = settings16.getAsArray("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings25 = settings16.getAsSettings("index.creation_date");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings25.getAsGroups(false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean33 = settings30.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings30.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings37 = settings30.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings29.dryRun(settings37);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean43 = settings40.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean46 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings45);
        org.elasticsearch.common.settings.Settings settings48 = settings45.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings48.toXContent(xContentBuilder50, params51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = settings40.toXContent(xContentBuilder44, params51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = settings37.toXContent(xContentBuilder39, params51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean57 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings56);
        org.elasticsearch.common.settings.Settings settings59 = settings56.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings59.toXContent(xContentBuilder61, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings37.toXContent(xContentBuilder55, params62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings25.toXContent(xContentBuilder28, params62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder11, params62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertEquals("'" + boolean33 + "' != '" + true + "'", boolean33, true);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + boolean43 + "' != '" + true + "'", boolean43, true);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(xContentBuilder53);
        org.junit.Assert.assertNull(xContentBuilder54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertNull(xContentBuilder64);
        org.junit.Assert.assertNull(xContentBuilder65);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.number_of_replicas", true);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder59.put("index.creation_date_string", (float) 1000);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder67 = builder65.put(objDictionary66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("index.blocks.write");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue11 = settings8.getAsRatio("index.priority", "100.0");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Ratio should be in [0-1.0], got [100.0]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData0.mapping("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNull(mappingMetaData22);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder7.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap3 = indexMetaData0.getActiveAllocationIds();
        int int4 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData1.activeAllocationIds((int) ' ');
        int int6 = indexMetaData1.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData1.getInitialRecoveryFilters();
        long long9 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData1.getAliases();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet12 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(32, indexMetaData1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (1) must be greater than the shard id: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.putNull("index.version.created");
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.loadFromStream("_na_", inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder2.putMapping(mappingMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.put("_na_", (double) 0);
        java.lang.String str29 = builder0.remove("index.version.created");
        java.lang.String str31 = builder0.get("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.creationDate((long) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.putMapping(mappingMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder7.mapping("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue2 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue3 = settings0.getAsBytesSize("active_allocations", byteSizeValue2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap4 = settings0.getAsGroups();
        boolean boolean5 = settings0.isEmpty();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNull(byteSizeValue3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.creation_date", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.version.upgraded", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings36);
        java.lang.String[] strArray39 = settings37.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = settings37.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate41 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings42 = settings37.filter(strPredicate41);
        java.lang.String[] strArray44 = settings42.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder31.extendArray("state-", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("true", true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder45.put("index.number_of_replicas", true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.loadFromSource("index.shared_filesystem.recover_on_any_node");
        java.io.InputStream inputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder56 = builder51.loadFromStream("index.version.upgraded_string", inputStream55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strPredicate41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder50.putCustom("index.", custom52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((-1L));
        java.lang.Class<?> wildcardClass58 = builder57.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder46.put("index.shared_filesystem", (java.lang.Class) wildcardClass58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder59.loadFromSource("true");
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("_all", (double) (-1L));
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.setRoutingNumShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAlias("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("hi!", custom13);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.putMapping(mappingMetaData15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.Object obj21 = null;
        boolean boolean22 = indexMetaData0.equals(obj21);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData0.mappingOrDefault("");
        int int25 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData0.diff(indexMetaData26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.blocks.read");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean19 = settings16.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings23 = settings16.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings15.dryRun(settings23);
        java.lang.String[] strArray31 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray32 = settings24.getAsArray("index.blocks.read_only", strArray31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder12.settings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings24.getGroups("index.data_path");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(aliasMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put("index.version.created", (long) (short) 10, byteSizeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.creationDate((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = builder53.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.removeAlias("index.version.created_string");
        int int11 = builder10.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        long long42 = builder41.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) "true");
        org.elasticsearch.Version version11 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("5000099");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [5000099]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas(1000);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder1.mapping("index.priority");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder6.mapping("hi!");
        int int10 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.removeAlias("index.version.created_string");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.creation_date");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = builder10.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.creation_date]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        java.lang.String str29 = builder23.remove("state-");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.number_of_shards", 10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        int int7 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.setRoutingNumShards(0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putMapping("index.blocks.metadata", "index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.state(state12);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.numberOfReplicas(10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.data_path" + "'", str14, "index.data_path");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean21 = settings18.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings18.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings25 = settings18.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings17.dryRun(settings25);
        java.lang.String[] strArray33 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray34 = settings26.getAsArray("index.blocks.read_only", strArray33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder12.extendArray("state-", strArray33);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean37 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings36);
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        java.lang.String[] strArray42 = settings40.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = settings40.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder35.put(strMap43);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData52 = indexMetaData50.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData49.diff(indexMetaData50);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData49.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData49.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData60 = indexMetaData58.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff61 = indexMetaData57.diff(indexMetaData58);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData57.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData49.diff(indexMetaData57);
        java.util.Set<java.lang.String> strSet65 = null; // flaky: indexMetaData57.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.Version version66 = indexMetaData57.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder47.put("index.number_of_shards", version66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder11.settings(builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder11.index("index.priority=true#");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNull(mappingMetaData52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNull(mappingMetaData56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(mappingMetaData60);
        org.junit.Assert.assertNotNull(indexMetaDataDiff61);
        org.junit.Assert.assertNull(discoveryNodeFilters62);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(version66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("index.blocks.write", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.version(5000099L);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.putAlias(aliasMetaData15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings4.getAsSize("true", sizeValue13);
        java.lang.String str16 = settings4.toDelimitedString('#');
        java.lang.String str19 = settings4.get("index.auto_expand_replicas", "true");
        java.lang.Boolean boolean22 = settings4.getAsBoolean("index.creation_date", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings4.getGroups("index.shadow_replicas");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "true" + "'", str19, "true");
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("archived.", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shadow_replicas", (double) (-1.0f));
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.", 0.0d);
        java.lang.String str43 = builder41.get("index.uuid");
        java.lang.String str45 = builder41.get("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("archived.", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.putNull("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.blocks.metadata", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder51.build();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder51.normalizePrefix("_all");
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.version.upgraded", 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData5.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData5.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData5.getState();
        byte byte13 = state12.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.state(state12);
        int int15 = builder1.numberOfReplicas();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings62.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings69 = settings62.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings61.dryRun(settings69);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray78 = settings70.getAsArray("index.blocks.read_only", strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder56.extendArray("state-", strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder56.put("primary_terms", (float) (short) -1);
        java.util.Map<java.lang.String, java.lang.String> strMap83 = builder82.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder54.put(strMap83);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder54.put("index.blocks.read", (long) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder54.putNull("false");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.elasticsearch.common.settings.Settings settings16 = settings13.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.lang.String[] strArray19 = settings17.getAsArray("state-");
        java.lang.String[] strArray21 = settings17.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue23 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue24 = settings17.getAsSize("index.version.created_string", sizeValue23);
        java.util.Set<java.lang.String> strSet25 = settings17.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder11.putActiveAllocationIds((int) (byte) 1, strSet25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder11.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.creationDate((long) 10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(sizeValue24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder4.putCustom("false", custom13);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.common.settings.Settings settings18 = settings15.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder4.settings(settings18);
        int int22 = builder21.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getRoutingFactor();
        int int4 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.setRoutingNumShards((int) (short) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings settings33 = builder32.build();
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.loadFromStream("index.blocks.read_only", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.creationDate((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.index("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        int int5 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.auto_expand_replicas");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        int int11 = builder2.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder2.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = builder15.mapping("primary_terms");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(mappingMetaData17);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData1.activeAllocationIds((int) ' ');
        int int6 = indexMetaData1.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData1.activeAllocationIds(10000);
        java.lang.String str9 = indexMetaData1.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("index.", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version((-1L));
        boolean boolean20 = indexMetaData1.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData1.getInitialRecoveryFilters();
        boolean boolean23 = indexMetaData1.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData1.getState();
        org.elasticsearch.Version version25 = indexMetaData1.getCreationVersion();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet27 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 100, indexMetaData1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (100) must be greater than the shard id: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version25);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.version.created_string");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings3.toXContent(xContentBuilder5, params6);
        boolean boolean8 = settings3.isEmpty();
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings3.getAsSize("index.blocks.write", sizeValue10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings3.getGroups("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings3.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNull(xContentBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("", (long) 1);
        org.elasticsearch.common.settings.Settings settings31 = builder27.build();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String str34 = builder32.remove("index.blocks.write");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.data_path", (double) (short) -1);
        java.util.concurrent.TimeUnit timeUnit40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder41 = builder32.put("index.version.upgraded", (long) (byte) 100, timeUnit40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("");
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.creationDate((long) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder23.put("index.creation_date_string", "index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder23.put(settings35);
        org.elasticsearch.common.settings.Settings settings38 = builder23.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.putCustom("index.uuid", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.setRoutingNumShards(1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.setRoutingNumShards((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mappingOrDefault("index.blocks.write");
        int int5 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.blocks.write");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings3.toXContent(xContentBuilder5, params6);
        boolean boolean8 = settings3.isEmpty();
        org.elasticsearch.common.unit.SizeValue sizeValue10 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue11 = settings3.getAsSize("index.blocks.write", sizeValue10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings3.getGroups("hi!");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings3.getGroups("index.version.upgraded_string", true);
        java.lang.Boolean boolean19 = settings3.getAsBoolean("index.auto_expand_replicas", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNull(xContentBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(sizeValue11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean3 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.elasticsearch.common.settings.Settings settings5 = settings2.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.Boolean boolean9 = settings5.getAsBoolean("index.blocks.write", (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        java.lang.String str13 = settings11.get("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.shadow_replicas");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData8);
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData8.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData8.getMappings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData8.writeTo(streamOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings settings91 = builder43.build();
        boolean boolean92 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings91);
        java.lang.String str94 = settings91.toDelimitedString(' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write " + "'", str94, "index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) 'a');
        java.lang.String str4 = builder3.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "primary_terms" + "'", str4, "primary_terms");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putMapping("index.blocks.metadata", "index.blocks.read_only");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards(10);
        int int7 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings4.getAsGroups();
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData8.requireFilters();
        org.apache.lucene.util.Version version12 = indexMetaData8.getMinimumCompatibleVersion();
        org.elasticsearch.Version version13 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.Version version14 = settings4.getAsVersion("index.priority", version13);
        java.lang.String str16 = settings4.get("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings settings18 = settings4.getAsSettings("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder7.mapping("");
        int int10 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder7.mapping("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData14);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder23.put("index.creation_date_string", "index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings settings32 = builder23.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        int int9 = builder7.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.priority=true#");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder1.mapping("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((int) (short) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "primary_terms" + "'", str2, "primary_terms");
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.elasticsearch.common.settings.Settings settings0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        int int2 = indexMetaData0.getRoutingFactor();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(version3);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = settings3.toXContent(xContentBuilder5, params6);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getAsSettings("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings21.getAsVersion("index.data_path", version24);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = settings30.toXContent(xContentBuilder32, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = settings21.toXContent(xContentBuilder26, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings9.toXContent(xContentBuilder17, params33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings3.toXContent(xContentBuilder8, params33);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNull(xContentBuilder7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(params33);
        org.junit.Assert.assertNull(xContentBuilder34);
        org.junit.Assert.assertNull(xContentBuilder35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean32 = settings29.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings29.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings36 = settings29.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings28.dryRun(settings36);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray45 = settings37.getAsArray("index.blocks.read_only", strArray44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean50 = settings47.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings47.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = settings47.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings46.dryRun(settings54);
        java.lang.String[] strArray62 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray63 = settings55.getAsArray("index.blocks.read_only", strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder23.put("index.creation_date_string", "", strArray45, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder23.put("state-", true);
        java.io.InputStream inputStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.loadFromStream("index.version.created_string", inputStream69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        long long5 = indexMetaData0.getCreationDate();
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        long long4 = indexMetaData1.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData1.getActiveAllocationIds();
        int int8 = indexMetaData1.getRoutingFactor();
        org.elasticsearch.Version version9 = indexMetaData1.getCreationVersion();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet11 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) ' ', indexMetaData1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (0) must be greater than the shard id: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap2 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        java.lang.String str32 = builder24.remove("state-");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder24.putNull("index.version.created_string");
        java.lang.String str36 = builder34.remove("archived.");
        java.util.concurrent.TimeUnit timeUnit39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.blocks.write", (long) (byte) 1, timeUnit39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created", "index.blocks.read", "primary_terms", "index.blocks.read_only", "index.blocks.metadata", "index.creation_date", "index.priority", "index.version.upgraded", "index.blocks.metadata" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder10.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder5.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder5.putCustom("_all", custom27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mapping("archived.");
        java.util.Set<java.lang.String> strSet33 = null; // flaky: indexMetaData29.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        java.lang.String str35 = indexMetaData29.getIndexUUID();
        java.lang.String str36 = indexMetaData29.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData29.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData29.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder5.state(state38);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_na_" + "'", str35, "_na_");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "_na_" + "'", str36, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder41.state(state44);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = settings13.getAsBytesSize("active_allocations", byteSizeValue15);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = settings13.toXContent(xContentBuilder17, params18);
        org.elasticsearch.common.settings.Settings settings21 = settings13.getAsSettings("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder12.settings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings13.getAsGroups(true);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings13.getAsSize("index.version.upgraded_string", sizeValue26);
        java.lang.Boolean boolean30 = settings13.getAsBoolean("_all", (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder7.settings(settings13);
        int int32 = builder31.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.removeAllAliases();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(byteSizeValue16);
        org.junit.Assert.assertNotNull(params18);
        org.junit.Assert.assertNull(xContentBuilder19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        int int9 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        java.lang.String str29 = builder23.remove("state-");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder23.put("primary_terms", false);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder23.put("index.version.created", 1000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.metadata", custom3);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.creation_date", true);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put("index.version.upgraded", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = indexMetaData0.primaryTerm((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("archived.", (long) (short) 0);
        java.lang.String str32 = builder30.get("index.number_of_shards");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings settings4 = builder0.build();
        java.lang.String str6 = builder0.remove("state-");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder0.put("_all", 5000099L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        boolean boolean6 = indexMetaData1.isSameUUID("index.creation_date");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData1.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData8.getState();
        byte byte16 = state15.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder7.state(state15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder7.index("index.blocks.read");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994");
        java.lang.String str6 = builder1.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.creation_date" + "'", str6, "index.creation_date");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData0.getMappings();
        java.lang.String str14 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder6.mapping("false");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("false");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("");
        boolean boolean9 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.readDiffFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(strSet10);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.readDiffFrom(streamInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        long long15 = builder12.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = builder16.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.putCustom("hi!", custom6);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putAlias(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        boolean boolean8 = indexMetaData0.isSameUUID("index.blocks.read");
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mapping("archived.");
        long long16 = indexMetaData13.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData13.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData13.mapping("_all");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData13.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mapping("archived.");
        long long25 = indexMetaData22.getCreationDate();
        long long26 = indexMetaData22.getVersion();
        boolean boolean28 = indexMetaData22.isSameUUID("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData22.getSettings();
        boolean boolean30 = indexMetaData0.equals((java.lang.Object) settings29);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = settings0.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getAsGroups(true);
        org.elasticsearch.common.settings.Settings settings8 = settings0.getAsSettings("index.blocks.read_only");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean4 = settings1.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings1.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings8 = settings1.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings0.dryRun(settings8);
        java.lang.String[] strArray16 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray17 = settings9.getAsArray("index.blocks.read_only", strArray16);
        java.lang.String[] strArray19 = settings9.getAsArray("index.version.created");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings9.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int5 = indexMetaData0.getRoutingNumShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version((-1L));
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean22 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = indexMetaData0.primaryTerm(1000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = settings0.getAsStructuredMap();
        boolean boolean5 = settings0.isEmpty();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder7.removeAllAliases();
        int int55 = builder7.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder7.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = builder7.mapping("false");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(mappingMetaData59);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("active_allocations", false);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder0.put("index.number_of_replicas=04index.number_of_shards=14index.version.created=50000994", (long) 52, byteSizeUnit9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder0.put("_na_", (double) 0);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder0.put("_all", (float) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean40 = settings37.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings37.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings44 = settings37.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings36.dryRun(settings44);
        java.lang.String[] strArray52 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray53 = settings45.getAsArray("index.blocks.read_only", strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder31.extendArray("state-", strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray65 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder55.extendArray("index.version.created", strArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder67 = builder0.put((java.lang.Object[]) strArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: array settings of key + value order doesn't hold correct number of arguments (5)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.setRoutingNumShards(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder53.index("index.creation_date");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = builder4.mapping("index.blocks.write");
        int int14 = builder4.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        boolean boolean6 = indexMetaData0.isSameUUID("archived.");
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("5000099");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.creationDate(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder7.mapping("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings14.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings21 = settings14.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings13.dryRun(settings21);
        java.lang.String[] strArray29 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray30 = settings22.getAsArray("index.blocks.read_only", strArray29);
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder8.extendArray("state-", strArray29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings32);
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        java.lang.String[] strArray38 = settings36.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings36.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder31.put(strMap39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder2.settings(builder40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder40.internalMap();
        java.lang.String str44 = builder40.get("index.blocks.read");
        java.lang.String str46 = builder40.get("index.shadow_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder40.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings55.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = settings55.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings54.dryRun(settings62);
        java.lang.String[] strArray70 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray71 = settings63.getAsArray("index.blocks.read_only", strArray70);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder49.extendArray("state-", strArray70);
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean74 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings73);
        org.elasticsearch.common.settings.Settings settings76 = settings73.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings76);
        java.lang.String[] strArray79 = settings77.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap80 = settings77.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder72.put(strMap80);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder81.replacePropertyPlaceholders();
        java.lang.Class<?> wildcardClass86 = builder85.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder40.put("index.uuid", (java.lang.Class) wildcardClass86);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + true + "'", boolean58, true);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.elasticsearch.common.settings.Settings settings8 = settings5.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = settings8.toXContent(xContentBuilder10, params11);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings0.toXContent(xContentBuilder4, params11);
        org.elasticsearch.common.unit.SizeValue sizeValue15 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue16 = settings0.getAsSize("index.blocks.metadata", sizeValue15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings0.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings0.getGroups("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNull(xContentBuilder12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertNull(sizeValue16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexMetaData0.readFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.blocks.read_only");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder24.putNull("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder24.put("state-", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (long) 35);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("state-", false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) 32);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder4.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.putAlias(aliasMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.putAlias(builder13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap5 = settings0.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings7 = settings0.getAsSettings("index.creation_date_string");
        java.lang.Boolean boolean10 = settings7.getAsBoolean("state-", (java.lang.Boolean) false);
        java.lang.Boolean boolean13 = settings7.getAsBoolean("", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings15 = settings7.getAsSettings("index.creation_date");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.uuid");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder2.putCustom("index.uuid", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder2.numberOfReplicas(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.putAlias(aliasMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        java.lang.String[] strArray34 = new java.lang.String[] { "index.blocks.write", "hi!", "index.creation_date", "index.blocks.write", "index.creation_date" };
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder24.extendArray("index.version.created", strArray34);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.loadFromSource("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        java.lang.Boolean boolean42 = settings38.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings44 = settings38.getByPrefix("index.priority");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean48 = settings45.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings52 = settings45.getAsSettings("index.creation_date_string");
        java.lang.String[] strArray54 = settings45.getAsArray("index.uuid");
        boolean boolean55 = settings38.equals((java.lang.Object) settings45);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder37.put(settings45);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder37.loadFromSource("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + true + "'", boolean48, true);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.write", 10L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("_na_", 0.0f);
        org.elasticsearch.common.settings.Settings settings31 = builder30.build();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.normalizePrefix("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        int int7 = indexMetaData0.getRoutingNumShards();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(settings9);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("true");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.putMapping(mappingMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings settings44 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean55 = settings52.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings52.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings59 = settings52.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings51.dryRun(settings59);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray68 = settings60.getAsArray("index.blocks.read_only", strArray67);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder46.extendArray("state-", strArray67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings70);
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        java.lang.String[] strArray76 = settings74.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings74.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder69.put(strMap77);
        java.lang.String[] strArray86 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder69.putArray("state-", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder43.putArray("index.blocks.metadata", (java.util.List<java.lang.String>) strList87);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = builder90.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder90.put("index.version.created", (-1.0f));
        java.io.InputStream inputStream96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder97 = builder94.loadFromStream("100.0", inputStream96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertEquals("'" + boolean55 + "' != '" + true + "'", boolean55, true);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        java.lang.Class<?> wildcardClass2 = indexScopedSettings0.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm((int) (short) 10, 60000L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.version(60000L);
        int int9 = builder1.numberOfReplicas();
        int int10 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        int int5 = indexMetaData1.getRoutingFactor();
        org.elasticsearch.index.Index index6 = indexMetaData1.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("100.0", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings9);
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.Version version15 = null;
        org.elasticsearch.Version version16 = settings12.getAsVersion("index.data_path", version15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings12);
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.readDiffFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(version16);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("false");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder23.put("index.", "index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder50.putCustom("index.", custom52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.version((-1L));
        java.lang.Class<?> wildcardClass58 = builder57.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder46.put("index.shared_filesystem", (java.lang.Class) wildcardClass58);
        org.elasticsearch.common.settings.Settings settings60 = builder46.build();
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings60);
        boolean boolean62 = settings60.isEmpty();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.removeAllAliases();
        int int12 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.putCustom("index.version.minimum_compatible", custom14);
        long long16 = builder4.version();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.number_of_replicas" + "'", str10, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.shared_filesystem.recover_on_any_node", (float) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("_na_", "archived.");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("hi!", (double) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        int int9 = builder7.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings4.getAsMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings4.getGroups("index.number_of_replicas", false);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean3 = settings0.getAsBoolean("index.", (java.lang.Boolean) true);
        java.lang.String str5 = settings0.toDelimitedString(' ');
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + true + "'", boolean3, true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        java.lang.String[] strArray40 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder23.putArray("state-", (java.util.List<java.lang.String>) strList41);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder43.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder45.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder45.loadFromSource("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder54.put("index.blocks.read", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("archived.", "index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        java.lang.Boolean boolean4 = settings0.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.Settings settings6 = settings0.getByPrefix("index.priority");
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean10 = settings7.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings7.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings14 = settings7.getAsSettings("index.creation_date_string");
        java.lang.String[] strArray16 = settings7.getAsArray("index.uuid");
        boolean boolean17 = settings0.equals((java.lang.Object) settings7);
        java.lang.String str20 = settings0.get("index.blocks.read", "index.version.upgraded");
        java.lang.String str23 = settings0.get("index.priority=true#", "_all");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + false + "'", boolean4, false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.version.upgraded" + "'", str20, "index.version.upgraded");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_all" + "'", str23, "_all");
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.creationDate((long) ' ');
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.index("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        int int10 = builder9.getRoutingNumShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.number_of_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        boolean boolean5 = indexMetaData0.isSameUUID("index.priority");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData8.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData8);
        org.apache.lucene.util.Version version15 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        java.lang.String str5 = settings0.toDelimitedString('a');
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = settings0.getAsStructuredMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte2 = state1.id();
        byte byte3 = state1.id();
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(version9);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version(100L);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putAlias(aliasMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.priority", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.creation_date", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.setRoutingNumShards((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet9 = indexMetaData0.activeAllocationIds((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("archived.");
        long long13 = indexMetaData10.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.Version version17 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData10.writeTo(streamOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue7 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = settings5.getAsBytesSize("active_allocations", byteSizeValue7);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings5.toXContent(xContentBuilder9, params10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = settings3.toXContent(xContentBuilder4, params10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = settings3.getAsMemory("archived.", "hi!");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [archived.] with value [hi!] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(byteSizeValue8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNull(xContentBuilder12);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.lang.String[] strArray30 = settings28.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = settings28.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read_only", (int) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder32.put("", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.loadFromSource("");
        java.util.concurrent.TimeUnit timeUnit44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("primary_terms", 0L, timeUnit44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.common.settings.Settings.Builder builder3 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean12 = settings9.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings16 = settings9.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings8.dryRun(settings16);
        java.lang.String[] strArray24 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray25 = settings17.getAsArray("index.blocks.read_only", strArray24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder3.extendArray("state-", strArray24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        java.lang.String[] strArray33 = settings31.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = settings31.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder26.put(strMap34);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder26.putArray("state-", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder26.put("index.", "index.");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.normalizePrefix("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.put("index.version.upgraded", 1.0f);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.putNull("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder1.settings(builder56);
        java.lang.String str58 = builder1.index();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "index.blocks.read_only" + "'", str58, "index.blocks.read_only");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder23.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder23.put("index.number_of_replicas", (double) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder23.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings settings34 = builder33.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder33.put("index.shared_filesystem", false);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder39.normalizePrefix("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.blocks.metadata.0=index. index.blocks.metadata.1=index.blocks.read index.blocks.metadata.2=_na_ index.blocks.metadata.3=index.auto_expand_replicas index.blocks.metadata.4=active_allocations index.blocks.metadata.5=index.blocks.write index.priority=true state-.0=index. state-.1=index.blocks.read state-.2=_na_ state-.3=index.auto_expand_replicas state-.4=active_allocations state-.5=index.blocks.write ", 100.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("_all", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.put("index.data_path", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.loadFromSource("index.");
        java.nio.file.Path path33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder28.loadFromPath(path33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings13.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings20 = settings13.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings12.dryRun(settings20);
        java.lang.String[] strArray28 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray29 = settings21.getAsArray("index.blocks.read_only", strArray28);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder7.extendArray("state-", strArray28);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.lang.String[] strArray37 = settings35.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = settings35.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder30.put(strMap38);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.", "index.blocks.read", "_na_", "index.auto_expand_replicas", "active_allocations", "index.blocks.write" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder30.putArray("state-", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.putNull("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("", (long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.", true);
        org.elasticsearch.common.settings.Settings settings59 = builder58.build();
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings59);
        java.lang.String[] strArray62 = settings59.getAsArray("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("_na_", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder24.put("index.data_path", (double) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.loadFromSource("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder35.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.setRoutingNumShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAlias("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putMapping("index.number_of_replicas", "index.blocks.write");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        int int5 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.setRoutingNumShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAlias("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.numberOfShards((int) (byte) 10);
        int int12 = builder4.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder4.mapping("primary_terms");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder4.putMapping("_all", "index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNull(mappingMetaData14);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        int int10 = indexMetaData0.getNumberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getRoutingNumShards();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        long long9 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        int int5 = indexMetaData0.getRoutingNumShards();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("100.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNull(mappingMetaData4);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("primary_terms");
        int int16 = builder15.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.putCustom("index.", custom4);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder2.mapping("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder2.putCustom("index.number_of_replicas", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 1);
        int int13 = builder12.numberOfReplicas();
        int int14 = builder12.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.numberOfShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putMapping("index.creation_date_string", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean1 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.settings.Settings settings3 = settings0.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings3);
        java.lang.String[] strArray6 = settings4.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = settings4.getAsMap();
        java.util.function.Predicate<java.lang.String> strPredicate8 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings9 = settings4.filter(strPredicate8);
        java.lang.String[] strArray11 = settings4.getAsArray("index.blocks.write");
        org.elasticsearch.common.settings.Settings settings13 = settings4.getAsSettings("index.creation_date");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings13, streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(settings13);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder0.put("primary_terms", (float) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder0.loadFromSource("false");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.blocks.write", (float) 100L);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder24.put("index.number_of_shards", (float) (-1));
        java.lang.String str32 = builder24.remove("state-");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder24.putNull("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.setRoutingNumShards(1);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.lang.String[] strArray12 = settings10.getAsArray("state-");
        java.lang.String[] strArray14 = settings10.getAsArray("index.shadow_replicas");
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings10.getAsSize("index.version.created_string", sizeValue16);
        java.util.Set<java.lang.String> strSet18 = settings10.names();
        java.util.Set<java.lang.String> strSet19 = settings10.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.putActiveAllocationIds(0, strSet19);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.putAlias(builder21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData1.mapping("archived.");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData1.getAliases();
        int int6 = indexMetaData1.getRoutingNumShards();
        int int7 = indexMetaData1.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.putMapping(mappingMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.version((long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean25 = settings22.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings22.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings29 = settings22.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings21.dryRun(settings29);
        java.lang.String[] strArray37 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray38 = settings30.getAsArray("index.blocks.read_only", strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder16.extendArray("state-", strArray37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings40);
        org.elasticsearch.common.settings.Settings settings43 = settings40.getAsSettings("index.");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.lang.String[] strArray46 = settings44.getAsArray("state-");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings44.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put(strMap47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder10.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = builder48.internalMap();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder7.settings(builder48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder7.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.putAlias(builder54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap1 = indexMetaData0.getCustoms();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("");
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        long long10 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) '#');
        java.lang.String str5 = builder1.index();
        java.lang.String str6 = builder1.index();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.creation_date_string" + "'", str5, "index.creation_date_string");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.creation_date_string" + "'", str6, "index.creation_date_string");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        long long3 = indexMetaData0.getCreationDate();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(aliasMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        int int3 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate(100L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.priority", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.lang.Boolean boolean9 = settings6.getAsBoolean("index.", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings6.getGroups("index.uuid");
        org.elasticsearch.common.settings.Settings settings13 = settings6.getByPrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings5.dryRun(settings13);
        java.lang.String[] strArray21 = new java.lang.String[] { "index.blocks.read_only", "index.blocks.read_only", "_na_", "index.data_path", "index.auto_expand_replicas" };
        java.lang.String[] strArray22 = settings14.getAsArray("index.blocks.read_only", strArray21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder0.extendArray("state-", strArray21);
        java.lang.String str25 = builder23.remove("active_allocations");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder23.internalMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "index.version.upgraded", "index.shared_filesystem.recover_on_any_node" };
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder23.extendArray("index.version.created", strArray31);
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder23.put("index.version.created_string", 0L, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putCustom("index.priority", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.creation_date", custom12);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder10.mapping("index.data_path");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder10.putAlias(builder16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version(100L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.setRoutingNumShards(10000);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getVersion();
        int int5 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mapping("archived.");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("_all");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }
}
