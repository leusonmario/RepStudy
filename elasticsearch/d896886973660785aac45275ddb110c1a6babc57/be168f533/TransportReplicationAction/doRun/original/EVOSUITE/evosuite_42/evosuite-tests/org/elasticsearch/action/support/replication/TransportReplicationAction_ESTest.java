/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 17:33:56 GMT 2021
 */

package org.elasticsearch.action.support.replication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.lucene.mockfile.FilterPath;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.LatchedActionListener;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.explain.ExplainRequest;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.support.PlainActionFuture;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.BasicReplicationRequest;
import org.elasticsearch.action.support.replication.ReplicationOperationTests;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.action.support.replication.TransportReplicationAction;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.block.ClusterBlocks;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.cluster.node.DiscoveryNodes;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.cluster.routing.RoutingTable;
import org.elasticsearch.cluster.routing.ShardRouting;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.index.translog.Translog;
import org.elasticsearch.index.translog.TranslogConfig;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.fetch.source.FetchSourceContext;
import org.elasticsearch.tasks.TaskId;
import org.elasticsearch.transport.TransportChannel;
import org.elasticsearch.transport.TransportResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportReplicationAction_ESTest extends TransportReplicationAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "";
      Index index0 = new Index(string0, string0);
      assertEquals("", index0.getName());
      assertEquals("", index0.getUUID());
      assertNotNull(index0);
      
      int int0 = 568;
      ShardId shardId0 = new ShardId(index0, int0);
      assertEquals("", index0.getName());
      assertEquals("", index0.getUUID());
      assertEquals("", shardId0.getIndexName());
      assertEquals(568, shardId0.id());
      assertEquals(568, shardId0.getId());
      assertNotNull(shardId0);
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request(shardId0);
      assertEquals("", index0.getName());
      assertEquals("", index0.getUUID());
      assertEquals("", shardId0.getIndexName());
      assertEquals(568, shardId0.id());
      assertEquals(568, shardId0.getId());
      assertEquals("", replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNotNull(replicationOperationTests_Request0);
      
      String string1 = "|-/~E7k#!]lXD";
      String string2 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", index0.getName());
      assertEquals("", index0.getUUID());
      assertEquals("", shardId0.getIndexName());
      assertEquals(568, shardId0.id());
      assertEquals(568, shardId0.getId());
      assertEquals(568L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getIndex());
      assertEquals("", updateResponse0.getId());
      assertEquals("|-/~E7k#!]lXD", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(replicationOperationTests_Request0, updateResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", index0.getName());
      assertEquals("", index0.getUUID());
      assertEquals("", shardId0.getIndexName());
      assertEquals(568, shardId0.id());
      assertEquals(568, shardId0.getId());
      assertEquals("", replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(568L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getIndex());
      assertEquals("", updateResponse0.getId());
      assertEquals("|-/~E7k#!]lXD", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(transportReplicationAction_PrimaryResult0);
      
      int int1 = (-2216);
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int1, updateResponse0.EMPTY);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals("", index0.getName());
      assertEquals("", index0.getUUID());
      assertEquals("", shardId0.getIndexName());
      assertEquals(568, shardId0.id());
      assertEquals(568, shardId0.getId());
      assertEquals(568L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getIndex());
      assertEquals("", updateResponse0.getId());
      assertEquals("|-/~E7k#!]lXD", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(568, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-2216), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertNotNull(replicationResponse_ShardInfo0);
      
      transportReplicationAction_PrimaryResult0.setShardInfo(replicationResponse_ShardInfo0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", index0.getName());
      assertEquals("", index0.getUUID());
      assertEquals("", shardId0.getIndexName());
      assertEquals(568, shardId0.id());
      assertEquals(568, shardId0.getId());
      assertEquals("", replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(568L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getIndex());
      assertEquals("", updateResponse0.getId());
      assertEquals("|-/~E7k#!]lXD", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(568, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-2216), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      String string0 = "/~cQB!QA`eb";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.id());
      assertEquals("/~cQB!QA`eb", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertNotNull(deleteRequest0);
      
      String string1 = "";
      DeleteRequest deleteRequest1 = deleteRequest0.parent(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(deleteRequest0.type());
      assertEquals("", deleteRequest0.parent());
      assertNull(deleteRequest0.id());
      assertEquals("/~cQB!QA`eb", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.routing());
      assertEquals("/~cQB!QA`eb", deleteRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("", deleteRequest1.parent());
      assertNotNull(deleteRequest1);
      
      PlainActionFuture<UpdateResponse> plainActionFuture0 = new PlainActionFuture<UpdateResponse>();
      assertNotNull(plainActionFuture0);
      
      int int0 = 0;
      CountDownLatch countDownLatch0 = new CountDownLatch(int0);
      assertNotNull(countDownLatch0);
      
      LatchedActionListener<UpdateResponse> latchedActionListener0 = new LatchedActionListener<UpdateResponse>(plainActionFuture0, countDownLatch0);
      assertNotNull(latchedActionListener0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, deleteRequest1, latchedActionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNotNull(deleteRequest0);
      
      String string0 = "+:Z`dW+&";
      int int0 = 836;
      TransportReplicationAction.ReplicasProxy transportReplicationAction_ReplicasProxy0 = transportReplicationAction0.new ReplicasProxy();
      assertNotNull(transportReplicationAction_ReplicasProxy0);
      
      ShardRouting shardRouting0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException(string0, string0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("+:Z`dW+&", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: +:Z`dW+&", sQLTransientException0.toString());
      assertEquals("+:Z`dW+&", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      Runnable runnable0 = null;
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        transportReplicationAction_ReplicasProxy0.failShard(shardRouting0, shardRouting0, string0, sQLTransientException0, runnable0, consumer0, consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicasProxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNotNull(deleteRequest0);
      
      String string0 = "+:Z`dW+&";
      int int0 = 863;
      TransportReplicationAction.ReplicasProxy transportReplicationAction_ReplicasProxy0 = transportReplicationAction0.new ReplicasProxy();
      assertNotNull(transportReplicationAction_ReplicasProxy0);
      
      ShardRouting shardRouting0 = null;
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNull(transportReplicationActionTests_Request0.index());
      assertNotNull(transportReplicationActionTests_Request0);
      
      PlainActionFuture<TransportResponse.Empty> plainActionFuture0 = new PlainActionFuture<TransportResponse.Empty>();
      assertNotNull(plainActionFuture0);
      
      // Undeclared exception!
      try { 
        transportReplicationAction_ReplicasProxy0.performOn(shardRouting0, transportReplicationActionTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicasProxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = 32768L;
      String string0 = "suggest.current";
      String string1 = "^\"(^4ngB/t8i+WHP";
      TaskId taskId0 = new TaskId(string1, long0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(32768L, taskId0.getId());
      assertEquals("^\"(^4ngB/t8i+WHP", taskId0.getNodeId());
      assertTrue(taskId0.isSet());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string1, string1, taskId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(32768L, taskId0.getId());
      assertEquals("^\"(^4ngB/t8i+WHP", taskId0.getNodeId());
      assertTrue(taskId0.isSet());
      assertEquals("^\"(^4ngB/t8i+WHP", replicationTask0.getDescription());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("suggest.current", replicationTask0.getType());
      assertEquals(32768L, replicationTask0.getId());
      assertEquals("^\"(^4ngB/t8i+WHP", replicationTask0.getAction());
      assertNotNull(replicationTask0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertNotNull(basicReplicationRequest0);
      
      String string2 = basicReplicationRequest0.getDescription();
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertNull(string2);
      
      PlainActionFuture<UpdateResponse> plainActionFuture0 = new PlainActionFuture<UpdateResponse>();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, basicReplicationRequest0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ReplicationTask replicationTask0 = null;
      String string0 = "xHw";
      TransportReplicationAction.setPhase(replicationTask0, string0);
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      TransportReplicationAction.setPhase(replicationTask0, string0);
      TransportReplicationAction<TransportReplicationActionTests.Request, TransportReplicationActionTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<TransportReplicationActionTests.Request, TransportReplicationActionTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertNull(transportReplicationActionTests_Request0.index());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNotNull(transportReplicationActionTests_Request0);
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      long long0 = 255L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        plainActionFuture0.actionGet(long0, timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.concurrent.TimeoutException: Timeout waiting for task.
         //
         verifyException("org.elasticsearch.action.support.AdapterActionFuture", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "query template cannot be null";
      String string1 = null;
      String string2 = "4";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("query template cannot be null", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("4", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertNotNull(deleteRequest0);
      
      String string3 = "t(U4%=X[FX+q[xsSa%";
      DeleteRequest deleteRequest1 = deleteRequest0.type(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(deleteRequest1, deleteRequest0);
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("query template cannot be null", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("4", deleteRequest0.id());
      assertEquals("t(U4%=X[FX+q[xsSa%", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("query template cannot be null", deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("t(U4%=X[FX+q[xsSa%", deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertEquals("4", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.parent());
      assertNotNull(deleteRequest1);
      
      UpdateResponse updateResponse0 = null;
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(deleteRequest1, updateResponse0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("query template cannot be null", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("4", deleteRequest0.id());
      assertEquals("t(U4%=X[FX+q[xsSa%", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("query template cannot be null", deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("t(U4%=X[FX+q[xsSa%", deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertEquals("4", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.parent());
      assertNotNull(transportReplicationAction_PrimaryResult0);
      
      DeleteRequest deleteRequest2 = transportReplicationAction_PrimaryResult0.replicaRequest();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("query template cannot be null", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("4", deleteRequest0.id());
      assertEquals("t(U4%=X[FX+q[xsSa%", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("query template cannot be null", deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("t(U4%=X[FX+q[xsSa%", deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertEquals("4", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("query template cannot be null", deleteRequest2.index());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("4", deleteRequest2.id());
      assertEquals("t(U4%=X[FX+q[xsSa%", deleteRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertNotNull(deleteRequest2);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "query template cannot be null";
      String string1 = null;
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string1, string0);
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("query template cannot be null", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("query template cannot be null", deleteRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNotNull(deleteRequest0);
      
      UpdateResponse updateResponse0 = null;
      TransportReplicationAction.ReplicaResult transportReplicationAction_ReplicaResult0 = transportReplicationAction0.new ReplicaResult();
      assertNotNull(transportReplicationAction_ReplicaResult0);
      
      PlainActionFuture<TransportResponse.Empty> plainActionFuture0 = new PlainActionFuture<TransportResponse.Empty>();
      assertNotNull(plainActionFuture0);
      
      transportReplicationAction_ReplicaResult0.respond(plainActionFuture0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNotNull(transportReplicationActionTests_Request0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-78);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-46);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)109;
      byteArray0[3] = byte3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-46), (byte)0, (byte)109}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-46), (byte)0, (byte)109}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(inputStreamStreamInput0);
      assertEquals(4, byteArray0.length);
      
      byte byte4 = inputStreamStreamInput0.readByte();
      assertTrue(byte4 == byte0);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte3);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-46), (byte)0, (byte)109}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertEquals((byte) (-78), byte4);
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = null;
      try {
        transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ShardId shardId0 = null;
      String string0 = "N;uGTS&";
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(shardId0, string0);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = 2621L;
      String string1 = "";
      String string2 = "#7q`E.FJ0c.>n";
      TaskId taskId0 = null;
      try {
        taskId0 = new TaskId(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed task id #7q`E.FJ0c.>n
         //
         verifyException("org.elasticsearch.tasks.TaskId", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      long long0 = 30962844000000L;
      String string0 = "0_q`u5&6;!cr";
      String string1 = "6juDyj\":AByO";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string1, string1, taskId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals("6juDyj\":AByO", replicationTask0.getAction());
      assertEquals("6juDyj\":AByO", replicationTask0.getDescription());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("0_q`u5&6;!cr", replicationTask0.getType());
      assertEquals(30962844000000L, replicationTask0.getId());
      assertNotNull(replicationTask0);
      
      TransportReplicationAction.setPhase(replicationTask0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals("6juDyj\":AByO", replicationTask0.getAction());
      assertEquals("6juDyj\":AByO", replicationTask0.getPhase());
      assertEquals("6juDyj\":AByO", replicationTask0.getDescription());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("0_q`u5&6;!cr", replicationTask0.getType());
      assertEquals(30962844000000L, replicationTask0.getId());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertNotNull(deleteRequest0);
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      String string0 = "+:Zd]W+&";
      int int0 = 853;
      TransportReplicationAction.PrimaryOperationTransportHandler transportReplicationAction_PrimaryOperationTransportHandler0 = transportReplicationAction0.new PrimaryOperationTransportHandler();
      assertNotNull(transportReplicationAction_PrimaryOperationTransportHandler0);
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertNull(transportReplicationActionTests_Request0.index());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNotNull(transportReplicationActionTests_Request0);
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, IndexRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, IndexRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "";
      IndexRequest indexRequest0 = new IndexRequest(string0, string0, string0);
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals("", indexRequest0.index());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertNotNull(indexRequest0);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      IndexRequest indexRequest1 = indexRequest0.source(xContentBuilder0);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals("", indexRequest0.index());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.index());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.type());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals("", indexRequest1.id());
      assertNotNull(indexRequest1);
      
      String string1 = "request shardId must be set in resolveRequest";
      Object object0 = new Object();
      assertNotNull(object0);
      
      IndexRequest indexRequest2 = indexRequest1.source(string1, object0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertNotSame(string1, string0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest0);
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals("", indexRequest0.index());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.index());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.type());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals("", indexRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals("", indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.parent());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.routing());
      assertEquals("", indexRequest2.index());
      assertNotNull(indexRequest2);
      
      boolean boolean0 = false;
      IndexRequest indexRequest3 = indexRequest2.create(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertNotSame(string1, string0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest0);
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals("", indexRequest0.index());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.index());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.type());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals("", indexRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals("", indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.parent());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.routing());
      assertEquals("", indexRequest2.index());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals((-3L), indexRequest3.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertNull(indexRequest3.getPipeline());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertEquals("", indexRequest3.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.timestamp());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.parent());
      assertEquals("", indexRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertNull(indexRequest3.routing());
      assertNotNull(indexRequest3);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(indexRequest3, updateResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals("", indexRequest0.index());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.index());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.type());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals("", indexRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals("", indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.parent());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.routing());
      assertEquals("", indexRequest2.index());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals((-3L), indexRequest3.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertNull(indexRequest3.getPipeline());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertEquals("", indexRequest3.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.timestamp());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.parent());
      assertEquals("", indexRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertNull(indexRequest3.routing());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotNull(transportReplicationAction_PrimaryResult0);
      
      PlainActionFuture<UpdateResponse> plainActionFuture0 = new PlainActionFuture<UpdateResponse>();
      assertNotNull(plainActionFuture0);
      
      transportReplicationAction_PrimaryResult0.respond(plainActionFuture0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertNotSame(string1, string0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest0);
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals("", indexRequest0.index());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.index());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.type());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals("", indexRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals("", indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.parent());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.routing());
      assertEquals("", indexRequest2.index());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals((-3L), indexRequest3.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertNull(indexRequest3.getPipeline());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertEquals("", indexRequest3.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.timestamp());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.parent());
      assertEquals("", indexRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertNull(indexRequest3.routing());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = 1L;
      String string0 = "d1deO7:TIY7|kwc@";
      String string1 = "YMEr`";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string1, string0, taskId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals("YMEr`", replicationTask0.getAction());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("d1deO7:TIY7|kwc@", replicationTask0.getType());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("d1deO7:TIY7|kwc@", replicationTask0.getDescription());
      assertNotNull(replicationTask0);
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertNull(replicationOperationTests_Request0.index());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNotNull(replicationOperationTests_Request0);
      
      PlainActionFuture<UpdateResponse> plainActionFuture0 = new PlainActionFuture<UpdateResponse>();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, replicationOperationTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, DeleteRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, DeleteRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationAction.ReplicasProxy transportReplicationAction_ReplicasProxy0 = transportReplicationAction0.new ReplicasProxy();
      assertNotNull(transportReplicationAction_ReplicasProxy0);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long0 = 220L;
      String string0 = "";
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      RoutingTable routingTable0 = RoutingTable.EMPTY_ROUTING_TABLE;
      assertEquals(0L, routingTable0.version());
      assertNotNull(routingTable0);
      
      DiscoveryNodes discoveryNodes0 = DiscoveryNodes.EMPTY_NODES;
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertNotNull(discoveryNodes0);
      
      ClusterBlocks clusterBlocks0 = ClusterBlocks.PROTO;
      assertNotNull(clusterBlocks0);
      
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap0 = ImmutableOpenMap.of();
      assertTrue(immutableOpenMap0.isEmpty());
      assertEquals(0, immutableOpenMap0.size());
      assertNotNull(immutableOpenMap0);
      
      boolean boolean0 = true;
      ClusterState clusterState0 = new ClusterState(clusterName0, long0, string0, metaData0, routingTable0, discoveryNodes0, clusterBlocks0, immutableOpenMap0, boolean0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0L, routingTable0.version());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(immutableOpenMap0.isEmpty());
      assertEquals(0, immutableOpenMap0.size());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(220L, clusterState0.getVersion());
      assertEquals(220L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      boolean boolean1 = false;
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0L, routingTable0.version());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertTrue(immutableOpenMap0.isEmpty());
      assertEquals(0, immutableOpenMap0.size());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(220L, clusterState0.getVersion());
      assertEquals(220L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("", clusterState0.stateUUID());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertNotNull(routingNodes0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      StreamInput streamInput0 = null;
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      
      ShardRouting shardRouting0 = null;
      try {
        shardRouting0 = new ShardRouting(namedWriteableAwareStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.FilterStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      int int0 = 3099;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3099 cap=3099]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3099, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3099, byteBuffer0.limit());
      assertEquals(3099, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3099 cap=3099]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3099, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3099, byteBuffer0.limit());
      assertEquals(3099, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      long long0 = byteBufferStreamInput0.readLong();
      assertTrue(byteBuffer0.isDirect());
      assertEquals(3091, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=8 lim=3099 cap=3099]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3099, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3099, byteBuffer0.limit());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0L, long0);
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(byteBufferStreamInput0);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      TransportReplicationAction<BasicReplicationRequest, TransportReplicationActionTests.Request, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, TransportReplicationActionTests.Request, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long1 = 2310L;
      String string0 = "";
      String string1 = "EkP9|8.[N!K.ioQ :^";
      char char0 = 'R';
      ByteBuffer byteBuffer1 = byteBuffer0.putChar(char0);
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(15, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3099, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3099, byteBuffer0.limit());
      assertEquals(3084, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=15 lim=3099 cap=3099]", byteBuffer0.toString());
      assertEquals(15, byteBuffer1.position());
      assertFalse(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=15 lim=3099 cap=3099]", byteBuffer1.toString());
      assertEquals(3084, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(3099, byteBuffer1.capacity());
      assertEquals(3099, byteBuffer1.limit());
      assertNotNull(byteBuffer1);
      
      TaskId taskId0 = null;
      try {
        taskId0 = new TaskId(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed task id EkP9|8.[N!K.ioQ :^
         //
         verifyException("org.elasticsearch.tasks.TaskId", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationAction.PrimaryOperationTransportHandler transportReplicationAction_PrimaryOperationTransportHandler0 = transportReplicationAction0.new PrimaryOperationTransportHandler();
      assertNotNull(transportReplicationAction_PrimaryOperationTransportHandler0);
      
      TransportReplicationAction<BasicReplicationRequest, IndexRequest, UpdateResponse> transportReplicationAction1 = (TransportReplicationAction<BasicReplicationRequest, IndexRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = null;
      BasicReplicationRequest basicReplicationRequest0 = null;
      PlainActionFuture<UpdateResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        plainActionFuture0.actionGet(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to parse setting [java.lang.String@0000000004] with value [java.lang.String@0000000005] as a time value: unit is missing or unrecognized
         //
         verifyException("org.elasticsearch.common.unit.TimeValue", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, DeleteRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, DeleteRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationAction.OperationTransportHandler transportReplicationAction_OperationTransportHandler0 = transportReplicationAction0.new OperationTransportHandler();
      assertNotNull(transportReplicationAction_OperationTransportHandler0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertNotNull(basicReplicationRequest0);
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<DeleteRequest, ReplicationOperationTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertNotNull(deleteRequest0);
      
      String string0 = "+:Z`dW+&";
      int int0 = 863;
      TransportReplicationAction.ReplicasProxy transportReplicationAction_ReplicasProxy0 = transportReplicationAction0.new ReplicasProxy();
      assertNotNull(transportReplicationAction_ReplicasProxy0);
      
      ShardRouting shardRouting0 = null;
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNull(transportReplicationActionTests_Request0.index());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertNotNull(transportReplicationActionTests_Request0);
      
      PlainActionFuture<TransportResponse.Empty> plainActionFuture0 = new PlainActionFuture<TransportResponse.Empty>();
      assertNotNull(plainActionFuture0);
      
      // Undeclared exception!
      try { 
        transportReplicationAction_ReplicasProxy0.performOn(shardRouting0, transportReplicationActionTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicasProxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "query template cannot be null";
      String string1 = null;
      String string2 = "4";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("query template cannot be null", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("4", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.type(string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertEquals("query template cannot be null", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("4", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("query template cannot be null", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("4", deleteRequest1.id());
      assertNotNull(deleteRequest1);
      
      UpdateResponse updateResponse0 = null;
      TransportReplicationAction.ReplicaResult transportReplicationAction_ReplicaResult0 = transportReplicationAction0.new ReplicaResult();
      assertNotNull(transportReplicationAction_ReplicaResult0);
      
      PlainActionFuture<TransportResponse.Empty> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        plainActionFuture0.actionGet(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.concurrent.TimeoutException: Timeout waiting for task.
         //
         verifyException("org.elasticsearch.action.support.AdapterActionFuture", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse> transportReplicationAction0 = (TransportReplicationAction<TransportReplicationActionTests.Request, DeleteRequest, UpdateResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "4";
      String string1 = "t(U4%=X[FX+q[xsSa%";
      UpdateResponse updateResponse0 = null;
      TransportReplicationAction.ReplicaOperationTransportHandler transportReplicationAction_ReplicaOperationTransportHandler0 = transportReplicationAction0.new ReplicaOperationTransportHandler();
      assertNotNull(transportReplicationAction_ReplicaOperationTransportHandler0);
  }
}
