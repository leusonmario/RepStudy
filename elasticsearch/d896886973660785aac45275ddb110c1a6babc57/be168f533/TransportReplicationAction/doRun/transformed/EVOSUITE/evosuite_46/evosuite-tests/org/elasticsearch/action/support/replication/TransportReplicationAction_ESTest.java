/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 21:06:14 GMT 2021
 */

package org.elasticsearch.action.support.replication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.InetAddressPoint;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.support.PlainActionFuture;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.BasicReplicationRequest;
import org.elasticsearch.action.support.replication.ReplicationOperationTests;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.action.support.replication.TransportReplicationAction;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.action.support.replication.TransportWriteActionTests;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.cluster.routing.ShardRouting;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.tasks.LoggingTaskListener;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.tasks.TaskId;
import org.elasticsearch.tasks.TaskListener;
import org.elasticsearch.transport.TransportChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportReplicationAction_ESTest extends TransportReplicationAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TransportReplicationAction<TransportWriteActionTests.TestRequest, BasicReplicationRequest, IndexResponse> transportReplicationAction0 = (TransportReplicationAction<TransportWriteActionTests.TestRequest, BasicReplicationRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      BasicReplicationRequest basicReplicationRequest0 = null;
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(basicReplicationRequest0, indexResponse0);
      assertNotNull(transportReplicationAction_PrimaryResult0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      
      BasicReplicationRequest basicReplicationRequest1 = transportReplicationAction_PrimaryResult0.replicaRequest();
      assertNull(basicReplicationRequest1);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      
      TransportReplicationAction<BasicReplicationRequest, TransportWriteActionTests.TestRequest, IndexResponse> transportReplicationAction1 = (TransportReplicationAction<BasicReplicationRequest, TransportWriteActionTests.TestRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = 2456L;
      String string0 = "*C>qjp.=\\NUjl^";
      TaskId taskId0 = new TaskId(indexResponse0.type);
      assertNotNull(taskId0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", taskId0.getNodeId());
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, indexResponse0.type, indexResponse0.type, taskId0);
      assertNotNull(replicationTask0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", taskId0.getNodeId());
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals(2456L, replicationTask0.getId());
      assertNull(replicationTask0.getAction());
      assertNull(replicationTask0.getDescription());
      assertEquals("*C>qjp.=\\NUjl^", replicationTask0.getType());
      assertEquals("starting", replicationTask0.getPhase());
      
      byte[] byteArray0 = null;
      PlainActionFuture<IndexResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction1.new ReroutePhase(replicationTask0, basicReplicationRequest1, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, TransportWriteActionTests.TestRequest, IndexResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, TransportWriteActionTests.TestRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportWriteActionTests.TestRequest transportWriteActionTests_TestRequest0 = new TransportWriteActionTests.TestRequest();
      assertNotNull(transportWriteActionTests_TestRequest0);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertNull(transportWriteActionTests_TestRequest0.index());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(transportWriteActionTests_TestRequest0, indexResponse0);
      assertNotNull(transportReplicationAction_PrimaryResult0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      transportReplicationAction_PrimaryResult0.setShardInfo(replicationResponse_ShardInfo0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertNotNull(replicationOperationTests_Request0);
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, replicationOperationTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "BIG_DECIMAL";
      String string1 = "";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string1, string1);
      assertNotNull(updateRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals("BIG_DECIMAL", updateRequest0.index());
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      
      ShardId shardId0 = updateRequest0.getShardId();
      assertNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals("BIG_DECIMAL", updateRequest0.index());
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(shardId0, string1);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      TransportReplicationAction<TransportWriteActionTests.TestRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<TransportWriteActionTests.TestRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      TransportWriteActionTests.TestRequest transportWriteActionTests_TestRequest0 = new TransportWriteActionTests.TestRequest();
      assertNotNull(transportWriteActionTests_TestRequest0);
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, transportWriteActionTests_TestRequest0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request0);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNull(transportReplicationActionTests_Request0.index());
      
      AtomicInteger atomicInteger0 = transportReplicationActionTests_Request0.getprocessedOnReplicas();
      assertNotNull(atomicInteger0);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      
      long long0 = 1L;
      TransportReplicationActionTests.Request transportReplicationActionTests_Request1 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request1);
      assertFalse(transportReplicationActionTests_Request1.equals((Object)transportReplicationActionTests_Request0));
      assertFalse(transportReplicationActionTests_Request1.getShouldPersistResult());
      assertNull(transportReplicationActionTests_Request1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request1.consistencyLevel());
      assertEquals(0L, transportReplicationActionTests_Request1.primaryTerm());
      
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertNotNull(basicReplicationRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      
      ReplicationResponse replicationResponse0 = new ReplicationResponse();
      assertNotNull(replicationResponse0);
      
      BasicReplicationRequest basicReplicationRequest1 = basicReplicationRequest0.index(transportReplicationAction0.transportReplicaAction);
      assertNotNull(basicReplicationRequest1);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest1, basicReplicationRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest1.index());
      assertFalse(basicReplicationRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest1.consistencyLevel());
      assertEquals(0L, basicReplicationRequest1.primaryTerm());
      
      BasicReplicationRequest basicReplicationRequest2 = basicReplicationRequest0.index(transportReplicationAction0.transportReplicaAction);
      assertNotNull(basicReplicationRequest2);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest0, basicReplicationRequest2);
      assertSame(basicReplicationRequest2, basicReplicationRequest1);
      assertSame(basicReplicationRequest2, basicReplicationRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest2.index());
      assertFalse(basicReplicationRequest2.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest2.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest2.consistencyLevel());
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(basicReplicationRequest0, replicationResponse0);
      assertNotNull(transportReplicationAction_PrimaryResult0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      transportReplicationAction_PrimaryResult0.respond(plainActionFuture0);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest0, basicReplicationRequest2);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      
      ReplicationResponse replicationResponse1 = transportReplicationAction_PrimaryResult0.getfinalResponse();
      assertNotNull(replicationResponse1);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest0, basicReplicationRequest2);
      assertSame(replicationResponse0, replicationResponse1);
      assertSame(replicationResponse1, replicationResponse0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      
      TaskId taskId0 = null;
      TransportReplicationAction<TransportWriteActionTests.TestRequest, IndexRequest, IndexResponse> transportReplicationAction1 = (TransportReplicationAction<TransportWriteActionTests.TestRequest, IndexRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      IndexRequest indexRequest0 = new IndexRequest();
      assertNotNull(indexRequest0);
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.timestamp());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "wJ!";
      String string1 = "~k>3-qloe@qYj<FzX6";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("wJ!", shardId0.getIndexName());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request(shardId0);
      assertNotNull(transportReplicationActionTests_Request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("wJ!", shardId0.getIndexName());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertEquals("wJ!", transportReplicationActionTests_Request0.index());
      
      AtomicInteger atomicInteger0 = transportReplicationActionTests_Request0.getprocessedOnReplicas();
      assertNotNull(atomicInteger0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("wJ!", shardId0.getIndexName());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertEquals("wJ!", transportReplicationActionTests_Request0.index());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertNotNull(basicReplicationRequest0);
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      
      TransportChannel transportChannel0 = null;
      ReplicationTask replicationTask0 = null;
      WriteConsistencyLevel writeConsistencyLevel0 = WriteConsistencyLevel.DEFAULT;
      BasicReplicationRequest basicReplicationRequest1 = basicReplicationRequest0.consistencyLevel(writeConsistencyLevel0);
      assertNotNull(basicReplicationRequest1);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest1, basicReplicationRequest0);
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertNull(basicReplicationRequest1.index());
      assertFalse(basicReplicationRequest1.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest1.consistencyLevel());
      
      TransportReplicationAction.AsyncReplicaAction transportReplicationAction_AsyncReplicaAction0 = null;
      try {
        transportReplicationAction_AsyncReplicaAction0 = transportReplicationAction0.new AsyncReplicaAction(basicReplicationRequest0, transportChannel0, replicationTask0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncReplicaAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-32);
      byteArray0[0] = byte0;
      byte byte1 = (byte)116;
      byteArray0[1] = byte1;
      byte byte2 = (byte)84;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-36);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)87;
      byteArray0[5] = byte5;
      byte byte6 = (byte)68;
      byteArray0[6] = byte6;
      int int0 = 4;
      int int1 = 562;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, int1);
      assertNotNull(streamInput0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)116, (byte)84, (byte) (-36), (byte)0, (byte)87, (byte)68}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = null;
      try {
        transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = 24L;
      String string0 = "org.elasticsearch.index.store.Store$StoreStatsCache";
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = "";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertNotNull(taskId0);
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string1, string1, taskId0);
      assertNotNull(replicationTask0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals("org.elasticsearch.index.store.Store$StoreStatsCache", replicationTask0.getType());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("", replicationTask0.getDescription());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("", replicationTask0.getAction());
      assertEquals(24L, replicationTask0.getId());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      TransportReplicationAction.setPhase(replicationTask0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals("org.elasticsearch.index.store.Store$StoreStatsCache", replicationTask0.getType());
      assertEquals("", replicationTask0.getPhase());
      assertEquals("", replicationTask0.getDescription());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("", replicationTask0.getAction());
      assertEquals(24L, replicationTask0.getId());
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, TransportWriteActionTests.TestRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, TransportWriteActionTests.TestRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationAction.PrimaryOperationTransportHandler transportReplicationAction_PrimaryOperationTransportHandler0 = transportReplicationAction0.new PrimaryOperationTransportHandler();
      assertNotNull(transportReplicationAction_PrimaryOperationTransportHandler0);
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = null;
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, IndexResponse> transportReplicationAction1 = null;
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertNotNull(basicReplicationRequest0);
      assertNull(basicReplicationRequest0.index());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.toBytesArray();
      assertNotNull(bytesArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray0.length());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray0.length());
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = null;
      try {
        transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, ReplicationOperationTests.Request, IndexResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, ReplicationOperationTests.Request, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertNotNull(replicationOperationTests_Request0);
      assertNull(replicationOperationTests_Request0.index());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(replicationOperationTests_Request0, indexResponse0);
      assertNotNull(transportReplicationAction_PrimaryResult0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(replicationOperationTests_Request0.index());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      
      ReplicationOperationTests.Request replicationOperationTests_Request1 = transportReplicationAction_PrimaryResult0.getreplicaRequest();
      assertNotNull(replicationOperationTests_Request1);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertSame(replicationOperationTests_Request0, replicationOperationTests_Request1);
      assertSame(replicationOperationTests_Request1, replicationOperationTests_Request0);
      assertNull(replicationOperationTests_Request0.index());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, replicationOperationTests_Request1.primaryTerm());
      assertNull(replicationOperationTests_Request1.index());
      assertFalse(replicationOperationTests_Request1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request1.consistencyLevel());
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request0);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      
      AtomicInteger atomicInteger0 = transportReplicationActionTests_Request0.getprocessedOnReplicas();
      assertNotNull(atomicInteger0);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals((short)0, atomicInteger0.shortValue());
      
      long long0 = 1L;
      TransportReplicationActionTests.Request transportReplicationActionTests_Request1 = transportReplicationActionTests_Request0.routedBasedOnClusterVersion(long0);
      assertNotNull(transportReplicationActionTests_Request1);
      assertSame(transportReplicationActionTests_Request0, transportReplicationActionTests_Request1);
      assertSame(transportReplicationActionTests_Request1, transportReplicationActionTests_Request0);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertEquals(0L, transportReplicationActionTests_Request1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request1.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request1.getShouldPersistResult());
      assertNull(transportReplicationActionTests_Request1.index());
      
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertNotNull(basicReplicationRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      
      ReplicationResponse replicationResponse0 = new ReplicationResponse();
      assertNotNull(replicationResponse0);
      
      BasicReplicationRequest basicReplicationRequest1 = basicReplicationRequest0.index(transportReplicationAction0.transportReplicaAction);
      assertNotNull(basicReplicationRequest1);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest1, basicReplicationRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest1.primaryTerm());
      assertNull(basicReplicationRequest1.index());
      assertFalse(basicReplicationRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest1.consistencyLevel());
      
      BasicReplicationRequest basicReplicationRequest2 = basicReplicationRequest0.index(transportReplicationAction0.transportReplicaAction);
      assertNotNull(basicReplicationRequest2);
      assertSame(basicReplicationRequest0, basicReplicationRequest2);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest2, basicReplicationRequest0);
      assertSame(basicReplicationRequest2, basicReplicationRequest1);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest2.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest2.consistencyLevel());
      assertNull(basicReplicationRequest2.index());
      assertFalse(basicReplicationRequest2.getShouldPersistResult());
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(basicReplicationRequest0, replicationResponse0);
      assertNotNull(transportReplicationAction_PrimaryResult0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      
      ReplicationResponse replicationResponse1 = transportReplicationAction_PrimaryResult0.getfinalResponse();
      assertNotNull(replicationResponse1);
      assertSame(basicReplicationRequest0, basicReplicationRequest2);
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(replicationResponse0, replicationResponse1);
      assertSame(replicationResponse1, replicationResponse0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      
      TaskId taskId0 = null;
      transportReplicationActionTests_Request0.setParentTask(taskId0);
      assertSame(transportReplicationActionTests_Request0, transportReplicationActionTests_Request1);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, TransportWriteActionTests.TestRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, TransportWriteActionTests.TestRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportWriteActionTests.TestRequest transportWriteActionTests_TestRequest0 = new TransportWriteActionTests.TestRequest();
      assertNotNull(transportWriteActionTests_TestRequest0);
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertNotNull(taskId0);
      assertEquals("", taskId0.getNodeId());
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      
      transportWriteActionTests_TestRequest0.setParentTask(taskId0);
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertEquals("", taskId0.getNodeId());
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(transportWriteActionTests_TestRequest0, deleteResponse0);
      assertNotNull(transportReplicationAction_PrimaryResult0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      transportReplicationAction_PrimaryResult0.setShardInfo(replicationResponse_ShardInfo0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      transportReplicationAction_PrimaryResult0.respond(plainActionFuture0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo1 = null;
      transportReplicationAction_PrimaryResult0.setShardInfo(replicationResponse_ShardInfo1);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(transportWriteActionTests_TestRequest0.getShouldPersistResult());
      assertNull(transportWriteActionTests_TestRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportWriteActionTests_TestRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, transportWriteActionTests_TestRequest0.getRefreshPolicy());
      assertEquals(0L, transportWriteActionTests_TestRequest0.primaryTerm());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      
      TransportReplicationAction<ReplicationOperationTests.Request, TransportWriteActionTests.TestRequest, IndexResponse> transportReplicationAction1 = (TransportReplicationAction<ReplicationOperationTests.Request, TransportWriteActionTests.TestRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, ReplicationOperationTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, ReplicationOperationTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = (-2L);
      String string0 = null;
      String string1 = "org.elasticsearch.common.inject.internal.ProviderMethodsModule";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertNotNull(taskId0);
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, transportReplicationAction0.transportReplicaAction, string1, taskId0);
      assertNotNull(replicationTask0);
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals((-2L), replicationTask0.getId());
      assertNull(replicationTask0.getType());
      assertEquals("org.elasticsearch.common.inject.internal.ProviderMethodsModule", replicationTask0.getDescription());
      assertNull(replicationTask0.getAction());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertNotNull(replicationOperationTests_Request0);
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertNull(replicationOperationTests_Request0.index());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, replicationOperationTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TransportReplicationAction<TransportWriteActionTests.TestRequest, BasicReplicationRequest, IndexResponse> transportReplicationAction0 = (TransportReplicationAction<TransportWriteActionTests.TestRequest, BasicReplicationRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      BasicReplicationRequest basicReplicationRequest0 = null;
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      
      TransportReplicationAction.PrimaryResult transportReplicationAction_PrimaryResult0 = transportReplicationAction0.new PrimaryResult(basicReplicationRequest0, indexResponse0);
      assertNotNull(transportReplicationAction_PrimaryResult0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      
      BasicReplicationRequest basicReplicationRequest1 = transportReplicationAction_PrimaryResult0.replicaRequest();
      assertNull(basicReplicationRequest1);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      
      TransportReplicationAction<BasicReplicationRequest, TransportWriteActionTests.TestRequest, IndexResponse> transportReplicationAction1 = (TransportReplicationAction<BasicReplicationRequest, TransportWriteActionTests.TestRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = 2456L;
      String string0 = "*C>qjp.=\\NUjl^";
      String string1 = "";
      String string2 = ". 1^K>fIK]7&j;qee(T";
      TaskId taskId0 = new TaskId(indexResponse0.type);
      assertNotNull(taskId0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals((-1L), taskId0.getId());
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string1, string2, taskId0);
      assertNotNull(replicationTask0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals((-1L), taskId0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals(2456L, replicationTask0.getId());
      assertEquals("*C>qjp.=\\NUjl^", replicationTask0.getType());
      assertEquals(". 1^K>fIK]7&j;qee(T", replicationTask0.getDescription());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("", replicationTask0.getAction());
      
      byte[] byteArray0 = null;
      BytesArray bytesArray0 = null;
      try {
        bytesArray0 = new BytesArray(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.bytes.BytesArray", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "BIG_DECIMAL";
      String string1 = "";
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request0);
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNull(transportReplicationActionTests_Request0.index());
      
      AtomicInteger atomicInteger0 = transportReplicationActionTests_Request0.processedOnReplicas;
      assertNotNull(atomicInteger0);
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      
      transportReplicationActionTests_Request0.setprocessedOnReplicas(atomicInteger0);
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals("0", atomicInteger0.toString());
      
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, IndexResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, IndexResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationAction.ReplicasProxy transportReplicationAction_ReplicasProxy0 = transportReplicationAction0.new ReplicasProxy();
      assertNotNull(transportReplicationAction_ReplicasProxy0);
  }
}
