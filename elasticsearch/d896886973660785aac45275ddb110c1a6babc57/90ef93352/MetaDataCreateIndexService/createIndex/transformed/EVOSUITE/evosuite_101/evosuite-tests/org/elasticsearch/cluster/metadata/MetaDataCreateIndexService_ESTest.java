/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 11:19:01 GMT 2021
 */

package org.elasticsearch.cluster.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.Dictionary;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.lucene.util.automaton.RegExp;
import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;
import org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest;
import org.elasticsearch.cluster.ClusterInfo;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.SnapshotsInProgress;
import org.elasticsearch.cluster.block.ClusterBlock;
import org.elasticsearch.cluster.block.ClusterBlocks;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;
import org.elasticsearch.cluster.node.DiscoveryNodes;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.cluster.routing.RoutingTable;
import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;
import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.index.Index;
import org.elasticsearch.search.internal.InternalScrollSearchRequest;
import org.elasticsearch.transport.TransportMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetaDataCreateIndexService_ESTest extends MetaDataCreateIndexService_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      InternalScrollSearchRequest internalScrollSearchRequest0 = new InternalScrollSearchRequest();
      assertEquals(0L, internalScrollSearchRequest0.id());
      assertNotNull(internalScrollSearchRequest0);
      
      String string0 = "IM$D6S~&$XhA3aJ-";
      boolean boolean0 = true;
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest0 = new CreateIndexClusterStateUpdateRequest(internalScrollSearchRequest0, string0, string0, boolean0);
      assertEquals(0L, internalScrollSearchRequest0.id());
      assertEquals("IM$D6S~&$XhA3aJ-", createIndexClusterStateUpdateRequest0.cause());
      assertEquals("IM$D6S~&$XhA3aJ-", createIndexClusterStateUpdateRequest0.index());
      assertTrue(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertNotNull(createIndexClusterStateUpdateRequest0);
      
      IndexTemplateMetaData indexTemplateMetaData0 = IndexTemplateMetaData.PROTO;
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertNull(indexTemplateMetaData0.template());
      assertEquals(0, indexTemplateMetaData0.order());
      assertEquals("", indexTemplateMetaData0.getName());
      assertEquals("", indexTemplateMetaData0.name());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertNotNull(indexTemplateMetaData0);
      
      IndexTemplateMetaData.Builder indexTemplateMetaData_Builder0 = IndexTemplateMetaData.builder(string0);
      assertNull(indexTemplateMetaData_Builder0.template());
      assertNotNull(indexTemplateMetaData_Builder0);
      
      boolean boolean1 = metaDataCreateIndexService_DefaultIndexTemplateFilter0.apply(createIndexClusterStateUpdateRequest0, indexTemplateMetaData0);
      assertEquals(0L, internalScrollSearchRequest0.id());
      assertEquals("IM$D6S~&$XhA3aJ-", createIndexClusterStateUpdateRequest0.cause());
      assertEquals("IM$D6S~&$XhA3aJ-", createIndexClusterStateUpdateRequest0.index());
      assertTrue(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertNull(indexTemplateMetaData0.template());
      assertEquals(0, indexTemplateMetaData0.order());
      assertEquals("", indexTemplateMetaData0.getName());
      assertEquals("", indexTemplateMetaData0.name());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter1 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter1.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter0));
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      Set<String> set0 = null;
      String string0 = "failed to build index metadata";
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 135;
      Index index0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, hashSet0, settings_Builder0, index0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter1 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter1.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter0));
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter1);
      
      TransportMessage transportMessage0 = null;
      String string0 = null;
      String string1 = "";
      boolean boolean0 = false;
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest0 = new CreateIndexClusterStateUpdateRequest(transportMessage0, string0, string1, boolean0);
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertNull(createIndexClusterStateUpdateRequest0.cause());
      assertNotNull(createIndexClusterStateUpdateRequest0);
      
      IndexMetaData.State indexMetaData_State0 = IndexMetaData.State.OPEN;
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest1 = createIndexClusterStateUpdateRequest0.state(indexMetaData_State0);
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertNull(createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertNull(createIndexClusterStateUpdateRequest1.cause());
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertNotNull(createIndexClusterStateUpdateRequest1);
      
      IndexTemplateMetaData indexTemplateMetaData0 = null;
      // Undeclared exception!
      try { 
        metaDataCreateIndexService_DefaultIndexTemplateFilter0.apply(createIndexClusterStateUpdateRequest1, indexTemplateMetaData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService$DefaultIndexTemplateFilter", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter1 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter1.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter0));
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter1);
      
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter2 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter2.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter0));
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter2.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter1));
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter2);
      
      PutStoredScriptRequest putStoredScriptRequest0 = new PutStoredScriptRequest();
      assertNull(putStoredScriptRequest0.scriptLang());
      assertNull(putStoredScriptRequest0.id());
      assertFalse(putStoredScriptRequest0.getShouldPersistResult());
      assertNotNull(putStoredScriptRequest0);
      
      String string0 = "";
      String string1 = "";
      boolean boolean0 = false;
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest0 = new CreateIndexClusterStateUpdateRequest(putStoredScriptRequest0, string0, string1, boolean0);
      assertNull(putStoredScriptRequest0.scriptLang());
      assertNull(putStoredScriptRequest0.id());
      assertFalse(putStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertNotNull(createIndexClusterStateUpdateRequest0);
      
      HashSet<ClusterBlock> hashSet0 = new HashSet<ClusterBlock>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest1 = createIndexClusterStateUpdateRequest0.blocks((Set<ClusterBlock>) hashSet0);
      assertNull(putStoredScriptRequest0.scriptLang());
      assertNull(putStoredScriptRequest0.id());
      assertFalse(putStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertNotNull(createIndexClusterStateUpdateRequest1);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest2 = createIndexClusterStateUpdateRequest1.settings(settings0);
      assertNull(putStoredScriptRequest0.scriptLang());
      assertNull(putStoredScriptRequest0.id());
      assertFalse(putStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertFalse(createIndexClusterStateUpdateRequest2.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest2.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest2.state());
      assertEquals("", createIndexClusterStateUpdateRequest2.index());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest1);
      assertNotNull(createIndexClusterStateUpdateRequest2);
      
      IndexTemplateMetaData indexTemplateMetaData0 = IndexTemplateMetaData.PROTO;
      assertNull(indexTemplateMetaData0.template());
      assertEquals("", indexTemplateMetaData0.getName());
      assertEquals("", indexTemplateMetaData0.name());
      assertEquals(0, indexTemplateMetaData0.order());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertNotNull(indexTemplateMetaData0);
      
      boolean boolean1 = metaDataCreateIndexService_DefaultIndexTemplateFilter0.apply(createIndexClusterStateUpdateRequest2, indexTemplateMetaData0);
      assertNull(putStoredScriptRequest0.scriptLang());
      assertNull(putStoredScriptRequest0.id());
      assertFalse(putStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertFalse(createIndexClusterStateUpdateRequest2.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest2.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest2.state());
      assertEquals("", createIndexClusterStateUpdateRequest2.index());
      assertNull(indexTemplateMetaData0.template());
      assertEquals("", indexTemplateMetaData0.getName());
      assertEquals("", indexTemplateMetaData0.name());
      assertEquals(0, indexTemplateMetaData0.order());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertFalse(boolean1);
      assertNotSame(metaDataCreateIndexService_DefaultIndexTemplateFilter0, metaDataCreateIndexService_DefaultIndexTemplateFilter1);
      assertNotSame(metaDataCreateIndexService_DefaultIndexTemplateFilter0, metaDataCreateIndexService_DefaultIndexTemplateFilter2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest1);
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter0.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter1));
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter0.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) settings_Builder0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) clusterState0;
      objectArray0[4] = (Object) settings_Builder0;
      objectArray0[5] = (Object) settings_Builder0;
      objectArray0[6] = (Object) clusterState0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[7] = object2;
      Settings.Builder settings_Builder1 = settings_Builder0.put(objectArray0);
      assertEquals(8, objectArray0.length);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertNotNull(settings_Builder1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = clusterState0.UNKNOWN_UUID;
      stringArray0[1] = clusterState0.UNKNOWN_UUID;
      stringArray0[2] = clusterState0.UNKNOWN_UUID;
      Settings.Builder settings_Builder2 = settings_Builder1.extendArray(clusterState0.UNKNOWN_UUID, stringArray0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertNotNull(settings_Builder2);
      
      int int0 = 146;
      Settings.Builder settings_Builder3 = settings_Builder2.put(stringArray0[0], int0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertNotNull(settings_Builder3);
      
      Settings.Builder settings_Builder4 = settings_Builder3.putArray(stringArray0[2], stringArray0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder4);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder4);
      assertNotNull(settings_Builder4);
      
      Index index0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, hashSet0, settings_Builder4, index0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 1577;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1577, byteBuffer0.limit());
      assertEquals(1577, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1577 cap=1577]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1577, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1577, byteBuffer0.limit());
      assertEquals(1577, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1577 cap=1577]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1577, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      ClusterName clusterName0 = ClusterName.readClusterName(byteBufferStreamInput0);
      assertEquals(1, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=1577 cap=1577]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1577, byteBuffer0.limit());
      assertEquals(1577, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1576, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("", clusterName0.value());
      assertNotNull(clusterName0);
      
      String string0 = "Too many unique strips, please report this to dev@lucene.apache.org";
      AllocationDeciders allocationDeciders0 = null;
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      boolean boolean0 = true;
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState0, boolean0);
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      
      ClusterInfo clusterInfo0 = ClusterInfo.EMPTY;
      assertNotNull(clusterInfo0);
      
      boolean boolean1 = true;
      RoutingAllocation routingAllocation0 = new RoutingAllocation(allocationDeciders0, routingNodes0, clusterState0, clusterInfo0, int0, boolean1);
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingAllocation0);
      
      MetaData metaData0 = routingAllocation0.metaData();
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(metaData0);
      
      RoutingTable routingTable0 = RoutingTable.PROTO;
      assertEquals(0L, routingTable0.version());
      assertNotNull(routingTable0);
      
      DiscoveryNodes discoveryNodes0 = DiscoveryNodes.PROTO;
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNotNull(discoveryNodes0);
      
      ClusterBlocks clusterBlocks0 = ClusterBlocks.EMPTY_CLUSTER_BLOCK;
      assertNotNull(clusterBlocks0);
      
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap0 = null;
      boolean boolean2 = true;
      ClusterState clusterState1 = new ClusterState(clusterName0, int0, string0, metaData0, routingTable0, discoveryNodes0, clusterBlocks0, immutableOpenMap0, boolean2);
      assertEquals(1, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=1577 cap=1577]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1577, byteBuffer0.limit());
      assertEquals(1577, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1576, byteBuffer0.remaining());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(1577L, clusterState1.getVersion());
      assertEquals(1577L, clusterState1.version());
      assertTrue(clusterState1.wasReadFromDiff());
      assertEquals("Too many unique strips, please report this to dev@lucene.apache.org", clusterState1.stateUUID());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("", clusterName0.value());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, routingTable0.version());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(clusterState1);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Hashtable<Object, Object> hashtable0 = new Hashtable<Object, Object>(metaData0.customPrototypes);
      assertFalse(hashtable0.isEmpty());
      assertEquals(4, hashtable0.size());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotNull(hashtable0);
      
      Settings.Builder settings_Builder1 = settings_Builder0.put((Dictionary<Object, Object>) hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(4, hashtable0.size());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertNotSame(clusterState0, clusterState1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotNull(settings_Builder1);
      
      String string1 = "@=m";
      String[] stringArray0 = new String[7];
      stringArray0[0] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      stringArray0[1] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[2] = metaData0.CONTEXT_MODE_PARAM;
      stringArray0[3] = metaData0.ALL;
      stringArray0[4] = metaData0.ALL;
      stringArray0[5] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[6] = clusterState0.UNKNOWN_UUID;
      Settings.Builder settings_Builder2 = settings_Builder1.extendArray(string1, stringArray0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(4, hashtable0.size());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(7, stringArray0.length);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertNotSame(string1, string0);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(settings_Builder2);
      
      Settings.Builder settings_Builder3 = settings_Builder2.loadFromSource(metaData0.CONTEXT_MODE_GATEWAY);
      assertFalse(hashtable0.isEmpty());
      assertEquals(4, hashtable0.size());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(7, stringArray0.length);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertNotSame(string1, string0);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(settings_Builder3);
      
      Map<String, String> map0 = settings_Builder1.internalMap();
      assertFalse(map0.isEmpty());
      assertEquals(12, map0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(4, hashtable0.size());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertNotSame(clusterState0, clusterState1);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotNull(map0);
      
      Settings.Builder settings_Builder4 = settings_Builder3.put(map0);
      assertFalse(map0.isEmpty());
      assertEquals(5, map0.size());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertFalse(routingAllocation0.debugDecision());
      assertEquals(1577L, routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.ignoreDisable());
      assertTrue(routingAllocation0.isRetryFailed());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(hashtable0.isEmpty());
      assertEquals(4, hashtable0.size());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(7, stringArray0.length);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder4);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder3);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertNotSame(string1, string0);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(settings_Builder4);
      
      Index index0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState1, metaData0.CLUSTER_TIME_SETTINGS, settings_Builder4, index0, stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter1 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter1.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter0));
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter1);
      
      ClusterState clusterState0 = null;
      String string0 = " is > than num shards ";
      RegExp regExp0 = new RegExp(string0);
      assertEquals(" is > than num shards ", regExp0.getOriginalString());
      assertEquals(65535, RegExp.ALL);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(0, RegExp.NONE);
      assertNotNull(regExp0);
      
      Set<String> set0 = regExp0.getIdentifiers();
      assertEquals(" is > than num shards ", regExp0.getOriginalString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(65535, RegExp.ALL);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(0, RegExp.NONE);
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      String string1 = "";
      Settings settings0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string1, settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      long long0 = 0L;
      String string0 = "Gaps can only be added to ordered near queries";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("Gaps can only be added to ordered near queries", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.version());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(clusterState1);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertNotNull(settings1);
      
      Settings settings2 = IndexMetaData.addHumanReadableSettings(settings1);
      assertSame(settings0, settings1);
      assertNotSame(settings0, settings2);
      assertNotSame(settings1, settings2);
      assertSame(settings1, settings0);
      assertNotSame(settings2, settings0);
      assertNotSame(settings2, settings1);
      assertTrue(settings2.equals((Object)settings1));
      assertTrue(settings2.equals((Object)settings0));
      assertNotNull(settings2);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState1, clusterState1.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter1 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter1.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter0));
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter1);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      Set<String> set0 = null;
      String string0 = "failed to build index metadata";
      SnapshotsInProgress snapshotsInProgress0 = clusterState0.custom(string0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNull(snapshotsInProgress0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = clusterState0.UNKNOWN_UUID;
      int int0 = (-543);
      Integer integer0 = new Integer(int0);
      assertEquals((-543), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = settings1.getAsInt(snapshotsInProgress0.TYPE, integer0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-543), (int)integer1);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      stringArray0[2] = string0;
      String[] stringArray1 = settings1.getAsArray(string0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(stringArray1);
      
      Map<String, Settings> map0 = settings1.getGroups(clusterState0.UNKNOWN_UUID);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = "] is not a sub-path of path.shared_data [";
      Settings settings0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, string0, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertEquals("elasticsearch", clusterName0.value());
      assertNotNull(clusterName0);
      
      long long0 = 3402L;
      String string0 = "}9po=0LtPF8Ir4";
      MetaData metaData0 = null;
      AllocationDeciders allocationDeciders0 = null;
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      
      RoutingNodes routingNodes0 = new RoutingNodes(clusterState0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      
      ClusterInfo clusterInfo0 = null;
      long long1 = (-359L);
      boolean boolean0 = false;
      RoutingAllocation routingAllocation0 = new RoutingAllocation(allocationDeciders0, routingNodes0, clusterState0, clusterInfo0, long1, boolean0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.isRetryFailed());
      assertFalse(routingAllocation0.debugDecision());
      assertFalse(routingAllocation0.ignoreDisable());
      assertEquals((-359L), routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(long1 == long0);
      assertNotNull(routingAllocation0);
      
      RoutingTable routingTable0 = routingAllocation0.routingTable();
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.isRetryFailed());
      assertFalse(routingAllocation0.debugDecision());
      assertFalse(routingAllocation0.ignoreDisable());
      assertEquals((-359L), routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertEquals(0L, routingTable0.version());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(long1 == long0);
      assertNotNull(routingTable0);
      
      DiscoveryNodes discoveryNodes0 = routingAllocation0.nodes();
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.isRetryFailed());
      assertFalse(routingAllocation0.debugDecision());
      assertFalse(routingAllocation0.ignoreDisable());
      assertEquals((-359L), routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(long1 == long0);
      assertNotNull(discoveryNodes0);
      
      ClusterBlocks clusterBlocks0 = ClusterBlocks.EMPTY_CLUSTER_BLOCK;
      assertNotNull(clusterBlocks0);
      
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap0 = clusterState0.getCustoms();
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertTrue(immutableOpenMap0.isEmpty());
      assertEquals(0, immutableOpenMap0.size());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(immutableOpenMap0);
      
      ClusterState clusterState1 = new ClusterState(clusterName0, long0, string0, metaData0, routingTable0, discoveryNodes0, clusterBlocks0, immutableOpenMap0, boolean0);
      assertEquals(3402L, clusterState1.version());
      assertEquals(3402L, clusterState1.getVersion());
      assertEquals("}9po=0LtPF8Ir4", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingAllocation0.isRetryFailed());
      assertFalse(routingAllocation0.debugDecision());
      assertFalse(routingAllocation0.ignoreDisable());
      assertEquals((-359L), routingAllocation0.getCurrentNanoTime());
      assertFalse(routingAllocation0.hasPendingAsyncFetch());
      assertEquals(0L, routingTable0.version());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertTrue(immutableOpenMap0.isEmpty());
      assertEquals(0, immutableOpenMap0.size());
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(clusterState1);
      
      String string1 = ".l@83-ib";
      Set<String> set0 = settings0.names();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState1, string1, set0, clusterState0.UNKNOWN_UUID, settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }
}
