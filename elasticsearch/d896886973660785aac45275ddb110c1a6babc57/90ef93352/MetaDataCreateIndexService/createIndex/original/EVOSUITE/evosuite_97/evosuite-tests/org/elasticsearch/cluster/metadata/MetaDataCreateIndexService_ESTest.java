/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 10:25:53 GMT 2021
 */

package org.elasticsearch.cluster.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.LinkedTransferQueue;
import org.apache.lucene.index.DocValuesType;
import org.apache.lucene.index.FieldInfo;
import org.apache.lucene.index.IndexOptions;
import org.elasticsearch.Version;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.engine.ShadowEngine;
import org.elasticsearch.indices.query.IndicesQueriesRegistry;
import org.elasticsearch.rest.RestController;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.search.Scroll;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.CompositeChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetaDataCreateIndexService_ESTest extends MetaDataCreateIndexService_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Index index0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, treeSet0, settings_Builder0, index0, clusterState0.UNKNOWN_UUID);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Settings settings0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, linkedHashSet0, clusterState0.UNKNOWN_UUID, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      String string0 = ") isn't a positive integer.";
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(indexMetaData0);
      
      Settings settings0 = indexMetaData0.getSettings();
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(settings0);
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      assertNotNull(linkedTransferQueue0);
      assertFalse(linkedTransferQueue0.contains(string0));
      
      SettingsFilter settingsFilter0 = new SettingsFilter(settings0, linkedTransferQueue0);
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertNotNull(settingsFilter0);
      assertFalse(linkedTransferQueue0.contains(string0));
      
      Set<String> set0 = settingsFilter0.getPatterns();
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(linkedTransferQueue0.contains(string0));
      assertFalse(set0.contains(string0));
      
      String string1 = "`;vILJP>lUX\"4ZdKEs8";
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string1, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      ClusterState clusterState0 = null;
      String string0 = "";
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      String string1 = "";
      String string2 = settings0.get(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string0, settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      long long0 = (-672L);
      String string0 = "%nD_3#>rsAA@ m0$";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals("%nD_3#>rsAA@ m0$", clusterState1.stateUUID());
      assertEquals((-672L), clusterState1.getVersion());
      assertEquals((-672L), clusterState1.version());
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(clusterState1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      IndicesQueriesRegistry indicesQueriesRegistry0 = new IndicesQueriesRegistry();
      assertNotNull(indicesQueriesRegistry0);
      
      Set<String> set0 = indicesQueriesRegistry0.getNames();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Settings.Builder settings_Builder0 = null;
      String string1 = "mappings are not allowed when shrinking indices, all mappings are copied from the source index";
      String string2 = "c^]_z(BR}gKqe,";
      Index index0 = new Index(string1, string2);
      assertEquals("mappings are not allowed when shrinking indices, all mappings are copied from the source index", index0.getName());
      assertEquals("c^]_z(BR}gKqe,", index0.getUUID());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(index0);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState1, set0, settings_Builder0, index0, string3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      String string0 = "";
      Settings.Builder settings_Builder1 = settings_Builder0.put(string0, (float) clusterState0.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertNotNull(settings_Builder1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      boolean boolean0 = true;
      Settings.Builder settings_Builder2 = settings_Builder1.put(string0, boolean0);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertNotNull(settings_Builder2);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      String string1 = "";
      int int0 = 2140;
      boolean boolean1 = true;
      IndexOptions indexOptions0 = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
      DocValuesType docValuesType0 = DocValuesType.SORTED;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertNotNull(fakeRestRequest0);
      
      Map<String, String> map0 = fakeRestRequest0.params();
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      int int1 = 554;
      FieldInfo fieldInfo0 = new FieldInfo(string1, int0, boolean0, boolean1, boolean0, indexOptions0, docValuesType0, clusterState0.UNKNOWN_VERSION, map0, int0, int1);
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(2140, fieldInfo0.getPointDimensionCount());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(554, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(fieldInfo0);
      assertEquals(2140, fieldInfo0.number);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      Map<String, String> map1 = fieldInfo0.attributes();
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(2140, fieldInfo0.getPointDimensionCount());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(554, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(map1, map0);
      assertSame(string1, string0);
      assertSame(map0, map1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(map1);
      assertEquals(2140, fieldInfo0.number);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      Settings.Builder settings_Builder3 = settings_Builder2.put(map1);
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(2140, fieldInfo0.getPointDimensionCount());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(554, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(string0, string1);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(string1, string0);
      assertSame(map0, map1);
      assertSame(map1, map0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(settings_Builder3);
      assertEquals(2140, fieldInfo0.number);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      String string2 = "]";
      Settings.Builder settings_Builder4 = settings_Builder3.putNull(string2);
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(2140, fieldInfo0.getPointDimensionCount());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(554, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(map0, map1);
      assertSame(map1, map0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder4);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(settings_Builder4);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(2140, fieldInfo0.number);
      
      String string3 = "iR";
      Index index0 = new Index(string3, string2);
      assertEquals("iR", index0.getName());
      assertEquals("]", index0.getUUID());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(index0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, set0, settings_Builder4, index0, clusterState0.UNKNOWN_UUID);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      long long0 = 0L;
      String string0 = "|tZIFR`f,!o";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertNotNull(clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals("|tZIFR`f,!o", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(clusterState1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      RestController restController0 = new RestController(settings0);
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertNotNull(restController0);
      
      Set<String> set0 = restController0.relevantHeaders();
      assertEquals(Lifecycle.State.INITIALIZED, restController0.lifecycleState());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Settings.Builder settings_Builder1 = settings_Builder0.put(clusterState1.UNKNOWN_UUID, (double) clusterState0.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals("|tZIFR`f,!o", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(settings_Builder1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) set0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) restController0;
      objectArray0[4] = (Object) clusterState1;
      objectArray0[5] = (Object) settings_Builder0;
      Settings.Builder settings_Builder2 = settings_Builder1.put(objectArray0);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals("|tZIFR`f,!o", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals(6, objectArray0.length);
      assertNotNull(settings_Builder2);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      String string1 = "/@rrHWgLZKBX!*";
      String string2 = " index operation not allowed on shadow engine";
      String[] stringArray0 = new String[6];
      stringArray0[0] = clusterState0.UNKNOWN_UUID;
      String string3 = "index.number_of_replicas";
      stringArray0[1] = string3;
      stringArray0[2] = clusterState0.UNKNOWN_UUID;
      stringArray0[3] = string1;
      stringArray0[4] = clusterState1.UNKNOWN_UUID;
      stringArray0[5] = string0;
      Settings.Builder settings_Builder3 = settings_Builder1.put(string1, string2, stringArray0, stringArray0);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals("|tZIFR`f,!o", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(clusterState1, clusterState0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, stringArray0.length);
      assertNotNull(settings_Builder3);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      
      String string4 = "1gFG5G^N:";
      Version version0 = Version.V_2_0_2;
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertNotNull(version0);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000299, version0.id);
      assertEquals((byte)2, version0.revision);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      
      Settings.Builder settings_Builder4 = settings_Builder3.put(string4, version0);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals("|tZIFR`f,!o", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(clusterState1, clusterState0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder4);
      assertSame(settings_Builder3, settings_Builder0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(6, stringArray0.length);
      assertNotNull(settings_Builder4);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000299, version0.id);
      assertEquals((byte)2, version0.revision);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      
      String string5 = "";
      String string6 = "";
      Settings.Builder settings_Builder5 = settings_Builder4.put(string5, string6);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals("|tZIFR`f,!o", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.getVersion());
      assertEquals(0L, clusterState1.version());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder5);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder0);
      assertNotSame(string5, string3);
      assertSame(string5, string6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertSame(string6, string5);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder5, settings_Builder0);
      assertSame(settings_Builder5, settings_Builder3);
      assertSame(settings_Builder5, settings_Builder2);
      assertSame(settings_Builder5, settings_Builder1);
      assertSame(settings_Builder5, settings_Builder4);
      assertNotSame(clusterState1, clusterState0);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder5);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder1, settings_Builder5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder4);
      assertSame(settings_Builder3, settings_Builder5);
      assertSame(settings_Builder3, settings_Builder0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string6);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertEquals(6, stringArray0.length);
      assertNotNull(settings_Builder5);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000299, version0.id);
      assertEquals((byte)2, version0.revision);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      
      Index index0 = null;
      String string7 = "translog is already closed";
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState1, set0, settings_Builder5, index0, string7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }
}
