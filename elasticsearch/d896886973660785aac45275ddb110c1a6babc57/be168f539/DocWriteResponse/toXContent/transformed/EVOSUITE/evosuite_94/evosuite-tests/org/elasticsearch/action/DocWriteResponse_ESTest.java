/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 09:34:26 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeSet;
import org.apache.lucene.document.InetAddressPoint;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.Version;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.admin.cluster.storedscripts.DeleteStoredScriptRequest;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.ingest.SimulateDocumentResult;
import org.elasticsearch.action.ingest.SimulatePipelineResponse;
import org.elasticsearch.action.search.ClearScrollAction;
import org.elasticsearch.action.search.ClearScrollResponse;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.termvectors.TermVectorsAction;
import org.elasticsearch.action.termvectors.TermVectorsResponse;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.ParentTaskAssigningClient;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.PagedBytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.geo.GeoDistance;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.unit.DistanceUnit;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.common.util.FloatArray;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetField;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.query.GeoValidationMethod;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.highlight.HighlightBuilder;
import org.elasticsearch.search.sort.GeoDistanceSortBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.tasks.TaskId;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.joda.time.DateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string0);
      assertNotNull(string0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotSame(string1, string0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      boolean boolean0 = false;
      String string2 = updateResponse0.getId();
      assertNull(string2);
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(pipedInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        indexResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      updateResponse0.setForcedRefresh(updateResponse0.forcedRefresh);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      ShardId shardId0 = updateResponse0.getShardId();
      assertNull(shardId0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertEquals("_id", string0);
      assertNotNull(string0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      boolean boolean0 = deleteResponse0.forcedRefresh();
      assertFalse(boolean0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      ByteBuffer byteBuffer0 = null;
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertTrue(byteBufferStreamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(byteBufferStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = (-2264);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-2264), shardId0.getId());
      assertEquals((-2264), shardId0.id());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-2264), shardId0.getId());
      assertEquals((-2264), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2264L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2264L), updateResponse0.version);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string1 = updateResponse0.toString();
      assertEquals("UpdateResponse[index=,type=,id=,version=-2264,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((-2264), shardId0.getId());
      assertEquals((-2264), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2264L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2264L), updateResponse0.version);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-2264), shardId0.getId());
      assertEquals((-2264), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2264L), updateResponse0.getVersion());
      assertEquals(17, bytesStreamOutput0.size());
      assertEquals(17L, bytesStreamOutput0.position());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2264L), updateResponse0.version);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = string2;
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(8, stringArray0.length);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder1);
      assertEquals((-2264), shardId0.getId());
      assertEquals((-2264), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2264L), updateResponse0.getVersion());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2264L), updateResponse0.version);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      boolean boolean0 = updateResponse0.isCreated();
      assertFalse(boolean0);
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      BytesArray bytesArray0 = BytesArray.EMPTY;
      assertNotNull(bytesArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      updateResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      BytesRef bytesRef0 = bytesArray0.toBytesRef();
      assertNotNull(bytesRef0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesRef0.length);
      assertEquals(0, bytesRef0.offset);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      
      DeleteResponse deleteResponse1 = deleteAction0.newResponse();
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      assertNotNull(deleteResponse1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse1.isFound());
      assertFalse(deleteResponse1.forcedRefresh());
      assertNull(deleteResponse1.getId());
      assertEquals(0L, deleteResponse1.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertNull(deleteResponse1.getType());
      assertFalse(deleteResponse1.forcedRefresh);
      assertEquals(0L, deleteResponse1.version);
      assertNotSame(deleteResponse1, deleteResponse0);
      
      long long0 = deleteResponse1.getVersion();
      assertEquals(0L, long0);
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse1.isFound());
      assertFalse(deleteResponse1.forcedRefresh());
      assertNull(deleteResponse1.getId());
      assertEquals(0L, deleteResponse1.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertNull(deleteResponse1.getType());
      assertFalse(deleteResponse1.forcedRefresh);
      assertEquals(0L, deleteResponse1.version);
      assertNotSame(deleteResponse1, deleteResponse0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasablePagedBytesReference releasablePagedBytesReference0 = releasableBytesStreamOutput0.bytes();
      assertNotNull(releasablePagedBytesReference0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(0, releasablePagedBytesReference0.length());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      StreamInput streamInput0 = releasablePagedBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(0, releasablePagedBytesReference0.length());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      try { 
        deleteResponse1.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.bytes.PagedBytesReference$PagedBytesReferenceStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "@aY";
      long long0 = 10000000000000L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(10000000000000L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("@aY", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(10000000000000L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      boolean boolean1 = updateResponse0.forcedRefresh();
      assertFalse(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertEquals(10000000000000L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("@aY", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(10000000000000L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      boolean boolean0 = false;
      deleteResponse0.setForcedRefresh(boolean0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "C-8cV0YV";
      int int0 = (-2009);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-2009), shardId0.getId());
      assertEquals((-2009), shardId0.id());
      
      long long0 = 0L;
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals((-2009), shardId0.getId());
      assertEquals((-2009), shardId0.id());
      assertEquals("C-8cV0YV", indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("C-8cV0YV", indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      String string1 = indexResponse0.toString();
      assertEquals("IndexResponse[index=C-8cV0YV,type=C-8cV0YV,id=C-8cV0YV,version=0,created=false,shards=null]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((-2009), shardId0.getId());
      assertEquals((-2009), shardId0.id());
      assertEquals("C-8cV0YV", indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("C-8cV0YV", indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      ShardId shardId0 = null;
      long long0 = (-3631L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, docWriteResponse_Fields0._ID, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("_type", updateResponse0.getId());
      assertEquals((-3631L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-3631L), updateResponse0.version);
      
      boolean boolean1 = updateResponse0.forcedRefresh();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("_type", updateResponse0.getId());
      assertEquals((-3631L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-3631L), updateResponse0.version);
      
      String string1 = updateResponse0.getId();
      assertEquals("_type", string1);
      assertTrue(boolean0 == boolean1);
      assertNotNull(string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("_type", updateResponse0.getId());
      assertEquals((-3631L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-3631L), updateResponse0.version);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertTrue(boolean0 == boolean1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("_type", updateResponse0.getId());
      assertEquals((-3631L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-3631L), updateResponse0.version);
      assertSame(string0, string1);
      
      boolean boolean2 = updateResponse0.isCreated();
      assertFalse(boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("_type", updateResponse0.getId());
      assertEquals((-3631L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-3631L), updateResponse0.version);
      assertSame(string0, string1);
      
      String string2 = docWriteResponse_Fields0.get_ID();
      assertEquals("_id", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string0);
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string1 = docWriteResponse_Fields0.get_ID();
      assertEquals("_id", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotSame(string1, string0);
      
      String string2 = "zwfk7";
      int int0 = (-1772);
      ShardId shardId0 = new ShardId(string0, string2, int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals((-1772), shardId0.id());
      assertEquals((-1772), shardId0.getId());
      
      String string3 = "";
      boolean boolean0 = false;
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string0);
      assertNotNull(string0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      boolean boolean0 = true;
      indexResponse0.forcedRefresh = boolean0;
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      
      boolean boolean1 = indexResponse0.forcedRefresh();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.version);
      assertTrue(indexResponse0.forcedRefresh);
      
      BytesArray bytesArray0 = BytesArray.EMPTY;
      assertNotNull(bytesArray0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) bytesArray0);
      assertNotNull(streamInput0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      
      try { 
        streamInput0.readOptionalDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      String string0 = indexResponse0.getType();
      assertNull(string0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string1);
      assertNotNull(string1);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertNull(shardId0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNotNull(updateRequest0);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      
      boolean boolean0 = true;
      UpdateRequest updateRequest1 = updateRequest0.scriptedUpsert(boolean0);
      assertNotNull(updateRequest1);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.index());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      String string0 = "@";
      UpdateRequest updateRequest2 = updateRequest1.id(string0);
      assertNotNull(updateRequest2);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals("@", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.index());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("@", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest2.scriptedUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertNull(updateRequest2.index());
      assertEquals("@", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.type());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(shardId0);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals("@", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.index());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("@", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest2.scriptedUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertNull(updateRequest2.index());
      assertEquals("@", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.type());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      String string1 = "";
      long long0 = 1L;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals("@", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.index());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("@", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest2.scriptedUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertNull(updateRequest2.index());
      assertEquals("@", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.type());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("@", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(1L, updateResponse0.version);
      
      int int0 = 807;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=807 cap=807]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(807, byteBuffer0.capacity());
      assertEquals(807, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(807, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=807 cap=807]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(807, byteBuffer0.capacity());
      assertEquals(807, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(807, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=807 cap=807]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(807, byteBuffer0.capacity());
      assertEquals(807, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(807, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      updateResponse0.readFrom(streamInput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals("@", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.index());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("@", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest2.scriptedUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertNull(updateRequest2.index());
      assertEquals("@", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.type());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(795, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=807 cap=807]", byteBuffer0.toString());
      assertEquals(807, byteBuffer0.capacity());
      assertEquals(807, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string0, string1);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "AN:PG0'";
      long long0 = 1012L;
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertNull(shardId1);
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string1 = docWriteResponse_Fields0.get_ID();
      assertEquals("_id", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotSame(string1, string0);
      
      String string2 = "";
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId1, string2, string0, indexResponse0.version, indexResponse0.forcedRefresh);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(deleteResponse0);
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals("AN:PG0'", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, deleteResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(1012L, deleteResponse0.version);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ByteArray byteArray0 = bigArrays0.newByteArray(deleteResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(byteArray0);
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals("AN:PG0'", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, deleteResponse0.getVersion());
      assertEquals(1012L, byteArray0.size());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(1012L, deleteResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      long long1 = (-247L);
      ByteArray byteArray1 = bigArrays0.grow(byteArray0, long1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertNotNull(byteArray1);
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals("AN:PG0'", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, deleteResponse0.getVersion());
      assertEquals(1012L, byteArray0.size());
      assertEquals(1012L, byteArray1.size());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(1012L, deleteResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int int0 = 193;
      int int1 = 2165;
      PagedBytesReference pagedBytesReference0 = new PagedBytesReference(bigArrays0, byteArray1, int0, int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(pagedBytesReference0);
      assertEquals(2165, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals("AN:PG0'", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, deleteResponse0.getVersion());
      assertEquals(1012L, byteArray0.size());
      assertEquals(1012L, byteArray1.size());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(1012L, deleteResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      BytesArray bytesArray0 = pagedBytesReference0.toBytesArray();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(bytesArray0);
      assertEquals(2165, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(2165, bytesArray0.length());
      assertEquals(193, bytesArray0.arrayOffset());
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals("AN:PG0'", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, deleteResponse0.getVersion());
      assertEquals(1012L, byteArray0.size());
      assertEquals(1012L, byteArray1.size());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(1012L, deleteResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(streamInput0);
      assertEquals(2165, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(2165, bytesArray0.length());
      assertEquals(193, bytesArray0.arrayOffset());
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals("AN:PG0'", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, deleteResponse0.getVersion());
      assertEquals(1012L, byteArray0.size());
      assertEquals(1012L, byteArray1.size());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(1012L, deleteResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals(2165, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(2165, bytesArray0.length());
      assertEquals(193, bytesArray0.arrayOffset());
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals("AN:PG0'", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, deleteResponse0.getVersion());
      assertEquals(1012L, byteArray0.size());
      assertEquals(1012L, byteArray1.size());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(1012L, deleteResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      deleteResponse0.readFrom(namedWriteableAwareStreamInput0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2165, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(2165, bytesArray0.length());
      assertEquals(193, bytesArray0.arrayOffset());
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1012L, byteArray0.size());
      assertEquals(1012L, byteArray1.size());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      ShardId shardId2 = deleteResponse0.getShardId();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(shardId2);
      assertEquals(1012L, indexResponse0.getVersion());
      assertEquals("AN:PG0'", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("AN:PG0'", indexResponse0.getType());
      assertEquals(0, shardId2.id());
      assertEquals(0, shardId2.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1012L, indexResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      String string0 = deleteResponse0.getId();
      assertNull(string0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      byte[] byteArray0 = new byte[0];
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertNotNull(updateResponse1);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse1.getId());
      assertFalse(updateResponse1.isCreated());
      assertFalse(updateResponse1.forcedRefresh());
      assertEquals(0L, updateResponse1.getVersion());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.version);
      assertFalse(updateResponse1.forcedRefresh);
      assertNotSame(updateResponse1, updateResponse0);
      
      // Undeclared exception!
      try { 
        updateResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      boolean boolean0 = true;
      updateResponse0.forcedRefresh = boolean0;
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertTrue(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string1);
      assertNotNull(string1);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "\\Z[Wn!3;rCl*(eBPV";
      int int0 = 3737;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(3737, shardId0.getId());
      assertEquals(3737, shardId0.id());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(3737, shardId0.getId());
      assertEquals(3737, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("\\Z[Wn!3;rCl*(eBPV", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(3737L, updateResponse0.getVersion());
      assertEquals("\\Z[Wn!3;rCl*(eBPV", updateResponse0.getType());
      assertEquals(3737L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      String string1 = updateResponse0.getIndex();
      assertEquals("\\Z[Wn!3;rCl*(eBPV", string1);
      assertNotNull(string1);
      assertEquals(3737, shardId0.getId());
      assertEquals(3737, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("\\Z[Wn!3;rCl*(eBPV", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(3737L, updateResponse0.getVersion());
      assertEquals("\\Z[Wn!3;rCl*(eBPV", updateResponse0.getType());
      assertEquals(3737L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "";
      String string3 = "e+Y%n0\"8v";
      long long0 = 1L;
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string2, string3, long0, updateResponse0.forcedRefresh);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(indexResponse0);
      assertEquals(3737, shardId0.getId());
      assertEquals(3737, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("\\Z[Wn!3;rCl*(eBPV", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(3737L, updateResponse0.getVersion());
      assertEquals("\\Z[Wn!3;rCl*(eBPV", updateResponse0.getType());
      assertEquals("", indexResponse0.getType());
      assertEquals("e+Y%n0\"8v", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(1L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals(3737L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1L, indexResponse0.version);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = updateResponse0.type;
      stringArray0[1] = updateAction0.NAME;
      stringArray0[2] = updateAction0.NAME;
      stringArray0[3] = updateResponse0.type;
      boolean boolean0 = false;
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, byteArrayBuilder0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(4, stringArray0.length);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      boolean boolean0 = true;
      indexResponse0.setForcedRefresh(boolean0);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.version);
      assertTrue(indexResponse0.forcedRefresh);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      ShardId shardId0 = updateResponse0.getShardId();
      assertNull(shardId0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      String string1 = "JJ;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      
      String string2 = "";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      boolean boolean1 = true;
      updateResponse0.forcedRefresh = boolean1;
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(12L, bytesStreamOutput0.position());
      assertEquals(12, bytesStreamOutput0.size());
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(33L, bytesStreamOutput0.position());
      assertEquals(33, bytesStreamOutput0.size());
      assertEquals((-2269L), updateResponse0.version);
      assertTrue(updateResponse0.forcedRefresh);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string4);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      updateResponse0.type = docWriteResponse_Fields0._VERSION;
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_version", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus0.getStatus());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      
      ByteBuffer byteBuffer0 = null;
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertTrue(streamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        ReplicationResponse.ShardInfo.readShardInfo(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "wEal4FgM>_!Y";
      long long0 = 0L;
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertTrue(deleteResponse0.isFound());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      String string1 = deleteResponse0.getType();
      assertEquals("wEal4FgM>_!Y", string1);
      assertNotNull(string1);
      assertTrue(deleteResponse0.isFound());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = 2045;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, deleteResponse0.EMPTY);
      assertNotNull(replicationResponse_ShardInfo0);
      assertTrue(deleteResponse0.isFound());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getType());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(2045, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(2045, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      
      String string2 = "";
      boolean boolean1 = false;
      boolean boolean2 = true;
      deleteResponse0.setForcedRefresh(boolean2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(deleteResponse0.isFound());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getId());
      assertTrue(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("wEal4FgM>_!Y", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.version);
      assertTrue(deleteResponse0.forcedRefresh);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)69;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-67);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-38);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)95;
      byteArray0[4] = byte4;
      byte byte5 = (byte)91;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)69, (byte) (-67), (byte) (-38), (byte)0, (byte)95, (byte)91, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertArrayEquals(new byte[] {(byte)69, (byte) (-67), (byte) (-38), (byte)0, (byte)95, (byte)91, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      try { 
        deleteResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "";
      String string1 = "JJ;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      
      String string2 = "";
      String string3 = "_id";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("_id", updateResponse0.getId());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)48;
      byteArray0[0] = byte0;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean2 = true;
      updateResponse0.forcedRefresh = boolean2;
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("_id", updateResponse0.getId());
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertEquals(12L, bytesStreamOutput0.position());
      assertEquals(12, bytesStreamOutput0.size());
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(36, bytesStreamOutput0.size());
      assertEquals(36L, bytesStreamOutput0.position());
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("_id", updateResponse0.getId());
      assertEquals((-2269L), updateResponse0.version);
      assertTrue(updateResponse0.forcedRefresh);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "";
      long long0 = (-1061L);
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertTrue(deleteResponse0.isFound());
      assertEquals((-1061L), deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals((-1061L), deleteResponse0.version);
      
      StreamInput streamInput0 = null;
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.FilterStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "fI'";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("fI'", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      String string1 = "laFHAJby2";
      DeleteRequest deleteRequest1 = deleteRequest0.routing(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest1);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("laFHAJby2", deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("fI'", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("fI'", deleteRequest1.index());
      assertNull(deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("laFHAJby2", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      
      DeleteRequest deleteRequest2 = deleteRequest1.id(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest2);
      assertEquals("laFHAJby2", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("laFHAJby2", deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("fI'", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("laFHAJby2", deleteRequest1.id());
      assertEquals("fI'", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("laFHAJby2", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("fI'", deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("laFHAJby2", deleteRequest2.routing());
      assertEquals("laFHAJby2", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.parent());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      
      VersionType versionType0 = VersionType.INTERNAL;
      DeleteRequest deleteRequest3 = deleteRequest2.versionType(versionType0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest3);
      assertEquals("laFHAJby2", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("laFHAJby2", deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("fI'", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("laFHAJby2", deleteRequest1.id());
      assertEquals("fI'", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("laFHAJby2", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("fI'", deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("laFHAJby2", deleteRequest2.routing());
      assertEquals("laFHAJby2", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals("laFHAJby2", deleteRequest3.id());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertNull(deleteRequest3.type());
      assertEquals("fI'", deleteRequest3.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals("laFHAJby2", deleteRequest3.routing());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertNull(deleteRequest3.parent());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      
      ShardId shardId0 = deleteRequest3.shardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(shardId0);
      assertEquals("laFHAJby2", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("laFHAJby2", deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("fI'", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("laFHAJby2", deleteRequest1.id());
      assertEquals("fI'", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("laFHAJby2", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("fI'", deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("laFHAJby2", deleteRequest2.routing());
      assertEquals("laFHAJby2", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals("laFHAJby2", deleteRequest3.id());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertNull(deleteRequest3.type());
      assertEquals("fI'", deleteRequest3.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals("laFHAJby2", deleteRequest3.routing());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertNull(deleteRequest3.parent());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      
      String string2 = "";
      String string3 = "";
      long long0 = 2498L;
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string3, long0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertNotNull(deleteResponse0);
      assertEquals("laFHAJby2", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("laFHAJby2", deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("fI'", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("laFHAJby2", deleteRequest1.id());
      assertEquals("fI'", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("laFHAJby2", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("fI'", deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("laFHAJby2", deleteRequest2.routing());
      assertEquals("laFHAJby2", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals("laFHAJby2", deleteRequest3.id());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertNull(deleteRequest3.type());
      assertEquals("fI'", deleteRequest3.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals("laFHAJby2", deleteRequest3.routing());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertNull(deleteRequest3.parent());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(2498L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(2498L, deleteResponse0.version);
      
      String string4 = deleteResponse0.getType();
      assertEquals("", string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("laFHAJby2", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("laFHAJby2", deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("fI'", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("laFHAJby2", deleteRequest1.id());
      assertEquals("fI'", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("laFHAJby2", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("fI'", deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("laFHAJby2", deleteRequest2.routing());
      assertEquals("laFHAJby2", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals("laFHAJby2", deleteRequest3.id());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertNull(deleteRequest3.type());
      assertEquals("fI'", deleteRequest3.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals("laFHAJby2", deleteRequest3.routing());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertNull(deleteRequest3.parent());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(2498L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(2498L, deleteResponse0.version);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string3, string4);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      boolean boolean2 = false;
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        deleteRequest1.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.tasks.TaskId", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      XContentBuilder xContentBuilder0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(hashMap0);
      assertNotNull(fakeRestRequest0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(hashMap0, fakeRestRequest0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      
      String string0 = null;
      boolean boolean0 = false;
      deleteResponse0.setForcedRefresh(boolean0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      
      String string1 = "gYcy2Wkl|Ze6";
      boolean boolean1 = true;
      IndexResponse indexResponse0 = new IndexResponse(deleteResponse0.shardId, string0, string1, deleteResponse0.version, boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(indexResponse0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("gYcy2Wkl|Ze6", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      String string2 = indexResponse0.getType();
      assertFalse(boolean1 == boolean0);
      assertNull(string2);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("gYcy2Wkl|Ze6", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArrayBuilder0.NO_BYTES);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(dataOutputStream0);
      assertNotNull(dataOutputStreamOutput0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(dataOutputStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "";
      String string1 = "JJ;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      
      String string2 = "";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      boolean boolean1 = true;
      updateResponse0.forcedRefresh = boolean1;
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertTrue(updateResponse0.forcedRefresh());
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-55);
      byteArray0[1] = byte1;
      long long0 = updateResponse0.getVersion();
      assertEquals((-2269L), long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertTrue(updateResponse0.forcedRefresh());
      assertTrue(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string2, string4);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      
      byte byte2 = (byte) (-78);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      // Undeclared exception!
      try { 
        InetAddressPoint.decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // encoded bytes are of incorrect length
         //
         verifyException("org.apache.lucene.document.InetAddressPoint", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "";
      String string1 = "JJ;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      
      String string2 = "";
      String string3 = shardId0.getIndexName();
      assertEquals("", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      
      String string4 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string4, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      boolean boolean1 = true;
      updateResponse0.forcedRefresh = boolean1;
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      String string5 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(12, bytesStreamOutput0.size());
      assertEquals(12L, bytesStreamOutput0.position());
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string5);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(33L, bytesStreamOutput0.position());
      assertEquals(33, bytesStreamOutput0.size());
      assertEquals((-2269L), updateResponse0.version);
      assertTrue(updateResponse0.forcedRefresh);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string5);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(string2, string4);
      assertSame(string4, string2);
      assertNotSame(string4, string5);
      assertSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      
      String string6 = updateResponse0.getId();
      assertEquals("", string6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertNotNull(string6);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.version);
      assertTrue(updateResponse0.forcedRefresh);
      assertSame(string0, string6);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string5);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string6, string4);
      assertNotSame(string6, string1);
      assertSame(string6, string3);
      assertSame(string6, string0);
      assertNotSame(string6, string5);
      assertSame(string6, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertSame(string2, string6);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(string2, string4);
      assertSame(string4, string6);
      assertSame(string4, string2);
      assertNotSame(string4, string5);
      assertSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      ShardId shardId0 = null;
      String string0 = "iir)SnI&W$;48";
      long long0 = (-2604L);
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("iir)SnI&W$;48", updateResponse0.getId());
      assertEquals((-2604L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertTrue(updateResponse0.isCreated());
      assertEquals("iir)SnI&W$;48", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2604L), updateResponse0.version);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-87);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-87);
      byteArray0[2] = byte2;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(3, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(3, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte) (-87)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.readBytes((int) byteArray0[1]);
      assertNotNull(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(3, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(3, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte) (-87)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(3, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(3, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte) (-87)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(3, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(3, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte) (-87)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      int int0 = 701;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(701, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=701 cap=701]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(701, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(701, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=701 cap=701]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(701, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      short short0 = byteBufferStreamInput0.readShort();
      assertEquals((short)0, short0);
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=701 cap=701]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2, byteBuffer0.position());
      assertEquals(699, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(701, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      updateResponse0.readFrom(byteBufferStreamInput0);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(687, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=14 lim=701 cap=701]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(14, byteBuffer0.position());
      assertEquals(701, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      DiscoveryNode discoveryNode0 = new DiscoveryNode(byteBufferStreamInput0);
      assertNotNull(discoveryNode0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=701 cap=701]", byteBuffer0.toString());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(701, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(678, byteBuffer0.remaining());
      assertEquals(701, byteBuffer0.limit());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("", discoveryNode0.getName());
      assertEquals("", discoveryNode0.getHostName());
      assertEquals("", discoveryNode0.getHostAddress());
      assertEquals("", discoveryNode0.getId());
      
      long long0 = 893L;
      String string0 = "kNM0Ml.6QxD0]u$,";
      String string1 = "";
      TaskId taskId0 = null;
      try {
        taskId0 = new TaskId(indexAction0.NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed task id indices:data/write/index
         //
         verifyException("org.elasticsearch.tasks.TaskId", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      String string1 = "JJ;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      
      String string2 = "";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      boolean boolean1 = true;
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(12L, bytesStreamOutput0.position());
      assertEquals(12, bytesStreamOutput0.size());
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(33, bytesStreamOutput0.size());
      assertEquals(33L, bytesStreamOutput0.position());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      
      String string5 = updateResponse0.getIndex();
      assertEquals("", string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertSame(string5, string3);
      assertSame(string5, string0);
      assertSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      
      String string6 = updateResponse0.getIndex();
      assertEquals("", string6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string6);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(string2, string0);
      assertSame(string2, string6);
      assertSame(string2, string3);
      assertSame(string3, string6);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(string6, string2);
      assertSame(string6, string5);
      assertSame(string6, string3);
      assertNotSame(string6, string1);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      String string1 = "Jq;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      
      String string2 = "";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals(12L, bytesStreamOutput0.position());
      assertEquals(12, bytesStreamOutput0.size());
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(33L, bytesStreamOutput0.position());
      assertEquals(33, bytesStreamOutput0.size());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string2;
      stringArray0[1] = docWriteResponse_Fields0._INDEX;
      stringArray0[2] = string3;
      stringArray0[3] = updateResponse0.type;
      stringArray0[4] = string0;
      String string5 = "";
      stringArray0[5] = string5;
      stringArray0[6] = string3;
      stringArray0[7] = updateResponse0.id;
      GeoDistanceSortBuilder geoDistanceSortBuilder0 = new GeoDistanceSortBuilder(string3, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(geoDistanceSortBuilder0);
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(8, stringArray0.length);
      
      double double0 = 0.0;
      GeoDistanceSortBuilder geoDistanceSortBuilder1 = geoDistanceSortBuilder0.point(updateResponse0.version, double0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertNotNull(geoDistanceSortBuilder1);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      GeoDistanceSortBuilder geoDistanceSortBuilder2 = geoDistanceSortBuilder1.validation(geoDistanceSortBuilder0.DEFAULT_VALIDATION);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertNotNull(geoDistanceSortBuilder2);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      String string6 = "?";
      boolean boolean3 = true;
      ArrayList<SimulateDocumentResult> arrayList0 = new ArrayList<SimulateDocumentResult>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SimulatePipelineResponse simulatePipelineResponse0 = new SimulatePipelineResponse(string6, boolean3, arrayList0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(simulatePipelineResponse0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(8, stringArray0.length);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder1 = simulatePipelineResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(xContentBuilder1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertEquals(8, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = geoDistanceSortBuilder2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(xContentBuilder2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertSame(string3, string0);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertEquals(8, stringArray0.length);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(xContentBuilder3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder3.contentType());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertSame(string3, string0);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      String string1 = "Jq;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      
      String string2 = "";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(12, bytesStreamOutput0.size());
      assertEquals(12L, bytesStreamOutput0.position());
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(33L, bytesStreamOutput0.position());
      assertEquals(33, bytesStreamOutput0.size());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string2;
      stringArray0[1] = docWriteResponse_Fields0._INDEX;
      stringArray0[2] = string3;
      stringArray0[3] = updateResponse0.type;
      stringArray0[4] = string0;
      String string5 = "";
      stringArray0[5] = docWriteResponse_Fields0._ID;
      stringArray0[6] = string3;
      stringArray0[7] = updateResponse0.id;
      GeoDistanceSortBuilder geoDistanceSortBuilder0 = new GeoDistanceSortBuilder(string3, stringArray0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(geoDistanceSortBuilder0);
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals(8, stringArray0.length);
      
      double double0 = 0.0;
      GeoDistanceSortBuilder geoDistanceSortBuilder1 = geoDistanceSortBuilder0.point(updateResponse0.version, double0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertNotNull(geoDistanceSortBuilder1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertSame(string2, string3);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(string3, string5);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      GeoDistanceSortBuilder geoDistanceSortBuilder2 = geoDistanceSortBuilder1.validation(geoDistanceSortBuilder0.DEFAULT_VALIDATION);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertNotNull(geoDistanceSortBuilder2);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertSame(string2, string3);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(string3, string5);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      String string6 = "t?";
      boolean boolean3 = true;
      ArrayList<SimulateDocumentResult> arrayList0 = new ArrayList<SimulateDocumentResult>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      SimulatePipelineResponse simulatePipelineResponse0 = new SimulatePipelineResponse(string6, boolean3, arrayList0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotNull(simulatePipelineResponse0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("t?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(8, stringArray0.length);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder1 = simulatePipelineResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotNull(xContentBuilder1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("t?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertEquals(8, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = geoDistanceSortBuilder2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotNull(xContentBuilder2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("t?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string6);
      assertSame(string0, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(string2, string3);
      assertNotSame(string2, string6);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(string3, string5);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string6);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertEquals(8, stringArray0.length);
      
      try { 
        updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      String string1 = "Jq;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      
      String string2 = "No up-and-running loopback addresses found, got ";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("No up-and-running loopback addresses found, got ", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(12L, bytesStreamOutput0.position());
      assertEquals(12, bytesStreamOutput0.size());
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("No up-and-running loopback addresses found, got ", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(81L, bytesStreamOutput0.position());
      assertEquals(81, bytesStreamOutput0.size());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string2;
      stringArray0[1] = docWriteResponse_Fields0._INDEX;
      stringArray0[2] = string3;
      stringArray0[3] = updateResponse0.type;
      stringArray0[4] = string0;
      String string5 = "";
      stringArray0[5] = string5;
      stringArray0[6] = string3;
      stringArray0[7] = updateResponse0.id;
      GeoDistanceSortBuilder geoDistanceSortBuilder0 = new GeoDistanceSortBuilder(string3, stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(geoDistanceSortBuilder0);
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(8, stringArray0.length);
      
      double double0 = 0.0;
      GeoDistanceSortBuilder geoDistanceSortBuilder1 = geoDistanceSortBuilder0.point(updateResponse0.version, double0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertNotNull(geoDistanceSortBuilder1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("No up-and-running loopback addresses found, got ", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string3, string5);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      GeoDistanceSortBuilder geoDistanceSortBuilder2 = geoDistanceSortBuilder1.validation(geoDistanceSortBuilder0.DEFAULT_VALIDATION);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertNotNull(geoDistanceSortBuilder2);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("No up-and-running loopback addresses found, got ", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string3, string5);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertEquals(8, stringArray0.length);
      
      String string6 = "?";
      boolean boolean3 = true;
      ArrayList<SimulateDocumentResult> arrayList0 = new ArrayList<SimulateDocumentResult>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SimulatePipelineResponse simulatePipelineResponse0 = new SimulatePipelineResponse(string6, boolean3, arrayList0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(simulatePipelineResponse0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(8, stringArray0.length);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder1 = simulatePipelineResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(xContentBuilder1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertEquals(8, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = geoDistanceSortBuilder2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(xContentBuilder2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(updateResponse0.isCreated());
      assertEquals("No up-and-running loopback addresses found, got ", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(string3, string5);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertEquals(8, stringArray0.length);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertNotNull(xContentBuilder3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(updateResponse0.isCreated());
      assertEquals("No up-and-running loopback addresses found, got ", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(string3, string5);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      String string1 = "Jq;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      
      String string2 = "";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(12, bytesStreamOutput0.size());
      assertEquals(12L, bytesStreamOutput0.position());
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(33, bytesStreamOutput0.size());
      assertEquals(33L, bytesStreamOutput0.position());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string2;
      stringArray0[1] = docWriteResponse_Fields0._INDEX;
      stringArray0[2] = string3;
      stringArray0[3] = updateResponse0.type;
      stringArray0[4] = string0;
      String string5 = "";
      stringArray0[5] = string5;
      stringArray0[6] = string3;
      stringArray0[7] = updateResponse0.id;
      GeoDistanceSortBuilder geoDistanceSortBuilder0 = new GeoDistanceSortBuilder(string3, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(geoDistanceSortBuilder0);
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(8, stringArray0.length);
      
      double double0 = 0.0;
      GeoDistanceSortBuilder geoDistanceSortBuilder1 = geoDistanceSortBuilder0.point(updateResponse0.version, double0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertNotNull(geoDistanceSortBuilder1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      GeoDistanceSortBuilder geoDistanceSortBuilder2 = geoDistanceSortBuilder1.validation(geoDistanceSortBuilder0.DEFAULT_VALIDATION);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertNotNull(geoDistanceSortBuilder2);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertEquals(8, stringArray0.length);
      
      String string6 = "?";
      boolean boolean3 = true;
      ArrayList<SimulateDocumentResult> arrayList0 = new ArrayList<SimulateDocumentResult>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SimulatePipelineResponse simulatePipelineResponse0 = new SimulatePipelineResponse(string6, boolean3, arrayList0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotNull(simulatePipelineResponse0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertTrue(simulatePipelineResponse0.isVerbose());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(8, stringArray0.length);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder1 = YamlXContent.contentBuilder();
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotSame(xContentBuilder1, xContentBuilder0);
      
      XContentBuilder xContentBuilder2 = geoDistanceSortBuilder2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(xContentBuilder2.equals((Object)xContentBuilder0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertNotNull(xContentBuilder2);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string2, string6);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string2, string5);
      assertNotSame(string2, string4);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string6);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertNotSame(xContentBuilder2, xContentBuilder0);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=_index)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      String string1 = "Jq;o";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      
      String string2 = "";
      String string3 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      boolean boolean1 = true;
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(shardId0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(12L, bytesStreamOutput0.position());
      assertEquals(12, bytesStreamOutput0.size());
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(33L, bytesStreamOutput0.position());
      assertEquals(33, bytesStreamOutput0.size());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string2;
      stringArray0[1] = docWriteResponse_Fields0._INDEX;
      stringArray0[2] = string3;
      stringArray0[3] = updateResponse0.type;
      stringArray0[4] = string0;
      String string5 = "";
      stringArray0[5] = string5;
      stringArray0[6] = string3;
      stringArray0[7] = updateResponse0.id;
      GeoDistanceSortBuilder geoDistanceSortBuilder0 = new GeoDistanceSortBuilder(string3, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(geoDistanceSortBuilder0);
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals(8, stringArray0.length);
      
      double double0 = 0.0;
      GeoDistanceSortBuilder geoDistanceSortBuilder1 = geoDistanceSortBuilder0.point(updateResponse0.version, double0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertNotNull(geoDistanceSortBuilder1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      GeoDistanceSortBuilder geoDistanceSortBuilder2 = geoDistanceSortBuilder1.validation(geoDistanceSortBuilder0.DEFAULT_VALIDATION);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertNotNull(geoDistanceSortBuilder2);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertEquals(8, stringArray0.length);
      
      String string6 = "?";
      boolean boolean2 = true;
      ArrayList<SimulateDocumentResult> arrayList0 = new ArrayList<SimulateDocumentResult>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SimulatePipelineResponse simulatePipelineResponse0 = new SimulatePipelineResponse(string6, boolean2, arrayList0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertNotNull(simulatePipelineResponse0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(8, stringArray0.length);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder1 = simulatePipelineResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertNotNull(xContentBuilder1);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertEquals(8, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = geoDistanceSortBuilder2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertNotNull(xContentBuilder2);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertEquals(8, stringArray0.length);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertNotNull(xContentBuilder3);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals("", geoDistanceSortBuilder0.fieldName());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder1.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertEquals("", geoDistanceSortBuilder1.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertNull(geoDistanceSortBuilder2.getNestedPath());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder2.order());
      assertEquals("", geoDistanceSortBuilder2.fieldName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder2.unit());
      assertEquals("_geo_distance", geoDistanceSortBuilder2.getWriteableName());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder2.geoDistance());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder2.validation());
      assertNull(geoDistanceSortBuilder2.sortMode());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("?", simulatePipelineResponse0.getPipelineId());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder2);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder2, geoDistanceSortBuilder0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertEquals(8, stringArray0.length);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertNotNull(shardId1);
      assertEquals((-2269), shardId0.getId());
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId1.getId());
      assertEquals((-2269), shardId1.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-2269L), updateResponse0.version);
      assertSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(shardId0, shardId1);
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertSame(string2, string5);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertSame(string3, string5);
      assertSame(shardId1, shardId0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "PnEs_2B:|Oa1i";
      int int0 = 595;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(595, shardId0.getId());
      assertEquals(595, shardId0.id());
      
      String string1 = "";
      long long0 = 1773L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(595, shardId0.getId());
      assertEquals(595, shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(1773L, updateResponse0.getVersion());
      assertEquals(1773L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      String string2 = updateResponse0.toString();
      assertEquals("UpdateResponse[index=PnEs_2B:|Oa1i,type=,id=,version=1773,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(595, shardId0.getId());
      assertEquals(595, shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(1773L, updateResponse0.getVersion());
      assertEquals(1773L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      long long1 = updateResponse0.getVersion();
      assertEquals(1773L, long1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(long1 == long0);
      assertEquals(595, shardId0.getId());
      assertEquals(595, shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(1773L, updateResponse0.getVersion());
      assertEquals(1773L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      boolean boolean2 = indexResponse0.isCreated();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string0);
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotSame(string1, string0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      long long0 = (-1507L);
      boolean boolean0 = false;
      boolean boolean1 = updateResponse0.isCreated();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)83;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-84);
      byteArray0[1] = byte1;
      byte byte2 = (byte)90;
      byteArray0[2] = byte2;
      byte byte3 = (byte)109;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-45);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-32);
      byteArray0[5] = byte5;
      int int0 = 932;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte4, int0);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte0);
      assertFalse(byte4 == byte5);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte1);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-84), (byte)90, (byte)109, (byte) (-45), (byte) (-32)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -45
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "";
      int int0 = 207;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(207, shardId0.id());
      assertEquals(207, shardId0.getId());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(207, shardId0.id());
      assertEquals(207, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(207L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(207L, updateResponse0.version);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertNotSame(string1, string0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(207, shardId0.id());
      assertEquals(207, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(207L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(14L, bytesStreamOutput0.position());
      assertEquals(14, bytesStreamOutput0.size());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(207L, updateResponse0.version);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = docWriteResponse_Fields0._INDEX;
      stringArray0[7] = updateResponse0.id;
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(8, stringArray0.length);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(207, shardId0.id());
      assertEquals(207, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(207L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(207L, updateResponse0.version);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(8, stringArray0.length);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertNotNull(shardId1);
      assertEquals(207, shardId1.id());
      assertEquals(207, shardId1.getId());
      assertEquals(207, shardId0.id());
      assertEquals(207, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(207L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(207L, updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(shardId1, shardId0);
      assertSame(shardId0, shardId1);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      int int0 = (-2269);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-2269), shardId0.id());
      assertEquals((-2269), shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2269L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2269L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotSame(string1, string0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      TimeZone timeZone0 = LuceneTestCase.randomTimeZone(mockRandom0);
      assertNotNull(timeZone0);
      assertEquals("Africa/Abidjan", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("Africa/Abidjan", timeZone0.getID());
      assertEquals("Africa/Abidjan", dateTimeZone0.getID());
      assertEquals("Africa/Abidjan", dateTimeZone0.toString());
      
      bytesStreamOutput0.writeTimeZone(dateTimeZone0);
      assertEquals(15L, bytesStreamOutput0.position());
      assertEquals(15, bytesStreamOutput0.size());
      assertEquals("Africa/Abidjan", timeZone0.getID());
      assertEquals("Africa/Abidjan", dateTimeZone0.getID());
      assertEquals("Africa/Abidjan", dateTimeZone0.toString());
      
      bytesStreamOutput0.skip(int0);
      assertEquals((-2254), bytesStreamOutput0.size());
      assertEquals((-2254L), bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2254
         //
         verifyException("org.elasticsearch.common.util.BigArrays$ByteArrayWrapper", e);
      }
  }
}
