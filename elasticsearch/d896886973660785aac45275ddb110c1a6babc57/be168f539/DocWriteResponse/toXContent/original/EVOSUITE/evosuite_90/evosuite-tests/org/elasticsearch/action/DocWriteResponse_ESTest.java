/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 08:46:13 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.sql.SQLException;
import java.sql.SQLTimeoutException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.ingest.SimulateDocumentResult;
import org.elasticsearch.action.ingest.SimulatePipelineResponse;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.termvectors.TermVectorsRequest;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.geo.builders.CoordinatesBuilder;
import org.elasticsearch.common.geo.builders.PolygonBuilder;
import org.elasticsearch.common.geo.builders.ShapeBuilder;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamInputReader;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ObjectArray;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentGenerator;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.fielddata.plain.AbstractGeoPointDVIndexFieldData;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.recovery.RecoveryState;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.bucket.children.ChildrenAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.missing.MissingAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.max.MaxAggregationBuilder;
import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;
import org.elasticsearch.search.fetch.source.FetchSourceContext;
import org.elasticsearch.search.highlight.HighlightBuilder;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      
      String string0 = deleteResponse0.getId();
      assertNull(string0);
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      long long0 = updateResponse0.getVersion();
      assertEquals(0L, long0);
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)34;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-58);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-2);
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte3, (int) byte5);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte5);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte7);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte6);
      assertFalse(byte5 == byte2);
      assertFalse(byte5 == byte0);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte4);
      assertFalse(byte5 == byte1);
      assertFalse(byte5 == byte7);
      assertEquals(8, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)34, (byte) (-58), (byte) (-1), (byte) (-2), (byte)1, (byte)1, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "/_cat/count";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertTrue(deleteResponse0.isFound());
      assertEquals("/_cat/count", deleteResponse0.getId());
      assertEquals("/_cat/count", deleteResponse0.getType());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      
      boolean boolean0 = true;
      updateResponse0.setForcedRefresh(boolean0);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.forcedRefresh());
      
      boolean boolean1 = updateResponse0.forcedRefresh();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.forcedRefresh());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byteArray0[0], (int) byte0);
      assertEquals(1, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "s @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("s @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("s @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(206L, updateResponse0.getVersion());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("s @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("s @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(206L, updateResponse0.getVersion());
      assertEquals(54L, releasableBytesStreamOutput0.position());
      assertEquals(54, releasableBytesStreamOutput0.size());
      
      String string1 = updateResponse0.getIndex();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("s @6J(u3=C", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("s @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("s @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(206L, updateResponse0.getVersion());
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertSame(string0, string1);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      assertNotNull(shardId1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("s @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("s @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(206L, updateResponse0.getVersion());
      assertEquals(206, shardId1.id());
      assertEquals(206, shardId1.getId());
      
      RestStatus restStatus0 = updateResponse0.status();
      assertSame(string0, string1);
      assertSame(shardId0, shardId1);
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("s @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("s @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(206L, updateResponse0.getVersion());
      assertEquals(200, restStatus0.getStatus());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "$Z)A;I,HA1AKZ+";
      int int0 = 714;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(714, shardId0.id());
      assertEquals(714, shardId0.getId());
      
      String string1 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(714, shardId0.id());
      assertEquals(714, shardId0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(714L, updateResponse0.getVersion());
      assertEquals("$Z)A;I,HA1AKZ+", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      
      boolean boolean0 = false;
      updateResponse0.setForcedRefresh(boolean0);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNull(shardId0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "=y(S\\q[fy_B_GOD";
      String string1 = "";
      long long0 = 0L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteResponse0);
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("=y(S\\q[fy_B_GOD", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      
      long long1 = deleteResponse0.getVersion();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("=y(S\\q[fy_B_GOD", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      
      String string0 = indexResponse0.getId();
      assertNull(string0);
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      StreamOutput streamOutput0 = null;
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(streamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = " f";
      long long0 = 1784L;
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(" f", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(" f", indexResponse0.getType());
      assertEquals(1784L, indexResponse0.getVersion());
      
      TransportAddress transportAddress0 = null;
      indexResponse0.remoteAddress(transportAddress0);
      assertEquals(" f", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(" f", indexResponse0.getType());
      assertEquals(1784L, indexResponse0.getVersion());
      
      long long1 = indexResponse0.getVersion();
      assertTrue(long1 == long0);
      assertEquals(1784L, long1);
      assertEquals(" f", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(" f", indexResponse0.getType());
      assertEquals(1784L, indexResponse0.getVersion());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(404, restStatus0.getStatus());
      
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      
      boolean boolean0 = indexResponse0.forcedRefresh();
      assertFalse(boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      
      ByteBuffer byteBuffer0 = null;
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertTrue(byteBufferStreamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(byteBufferStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = "_id";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(deleteRequest0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest0.index());
      assertEquals("_id", deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNull(shardId0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest0.index());
      assertEquals("_id", deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      
      String string3 = "";
      long long0 = (-1L);
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string3, string2, long0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(indexResponse0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest0.index());
      assertEquals("_id", deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("_id", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getVersion());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertEquals(RestStatus.CREATED, restStatus0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest0.index());
      assertEquals("_id", deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("_id", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertNotSame(indexResponse1, indexResponse0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotNull(indexResponse1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      
      String string0 = indexResponse1.getId();
      assertNotSame(indexResponse1, indexResponse0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNull(string0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      
      String string1 = "MN^EV? /eOK";
      String string2 = "W[^{J4tuFH_";
      DeleteRequest deleteRequest0 = new DeleteRequest(string1, indexAction0.NAME, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(deleteRequest0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("W[^{J4tuFH_", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("MN^EV? /eOK", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("indices:data/write/index", deleteRequest0.type());
      
      VersionType versionType0 = VersionType.EXTERNAL_GTE;
      DeleteRequest deleteRequest1 = deleteRequest0.versionType(versionType0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(deleteRequest1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("W[^{J4tuFH_", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("MN^EV? /eOK", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("indices:data/write/index", deleteRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("MN^EV? /eOK", deleteRequest1.index());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("indices:data/write/index", deleteRequest1.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("W[^{J4tuFH_", deleteRequest1.id());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      
      long long0 = 0L;
      DeleteRequest deleteRequest2 = deleteRequest1.version(long0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(deleteRequest2);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("W[^{J4tuFH_", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("MN^EV? /eOK", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("indices:data/write/index", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("MN^EV? /eOK", deleteRequest1.index());
      assertEquals("indices:data/write/index", deleteRequest1.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("W[^{J4tuFH_", deleteRequest1.id());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("indices:data/write/index", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.version());
      assertNull(deleteRequest2.routing());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("W[^{J4tuFH_", deleteRequest2.id());
      assertEquals("MN^EV? /eOK", deleteRequest2.index());
      assertNull(deleteRequest2.parent());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNull(shardId0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("W[^{J4tuFH_", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("MN^EV? /eOK", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("indices:data/write/index", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("MN^EV? /eOK", deleteRequest1.index());
      assertEquals("indices:data/write/index", deleteRequest1.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("W[^{J4tuFH_", deleteRequest1.id());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("indices:data/write/index", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.version());
      assertNull(deleteRequest2.routing());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("W[^{J4tuFH_", deleteRequest2.id());
      assertEquals("MN^EV? /eOK", deleteRequest2.index());
      assertNull(deleteRequest2.parent());
      
      String string3 = "";
      long long1 = 0L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string3, string0, long1, boolean0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("W[^{J4tuFH_", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("MN^EV? /eOK", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("indices:data/write/index", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("MN^EV? /eOK", deleteRequest1.index());
      assertEquals("indices:data/write/index", deleteRequest1.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("W[^{J4tuFH_", deleteRequest1.id());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("indices:data/write/index", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.version());
      assertNull(deleteRequest2.routing());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("W[^{J4tuFH_", deleteRequest2.id());
      assertEquals("MN^EV? /eOK", deleteRequest2.index());
      assertNull(deleteRequest2.parent());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)46;
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)1, (byte)46}, byteArray0);
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      File file0 = null;
      String string0 = "Y";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      int int0 = 0;
      mockPrintStream0.write(int0);
      assertEquals("Y", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Y", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      assertEquals("Y", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Y", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(dataOutputStream0);
      assertNotNull(dataOutputStreamOutput0);
      assertEquals("Y", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Y", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(dataOutputStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)78;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-90);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-111);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)39;
      byteArray0[7] = byte7;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)78, (byte) (-90), (byte) (-111), (byte)0, (byte)39}, byteArray0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(streamInput0);
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertEquals(8, byteArray0.length);
      assertNotNull(inputStreamStreamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)78, (byte) (-90), (byte) (-111), (byte)0, (byte)39}, byteArray0);
      
      try { 
        updateResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "\"/ tzaRyR$";
      long long0 = (-1L);
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals("\"/ tzaRyR$", updateResponse0.getId());
      
      int int0 = 2950;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertEquals(2950, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2950 cap=2950]", byteBuffer0.toString());
      assertEquals(2950, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2950, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertEquals(2950, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2950 cap=2950]", byteBuffer0.toString());
      assertEquals(2950, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2950, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(byteBufferStreamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals(2950, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2950 cap=2950]", byteBuffer0.toString());
      assertEquals(2950, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2950, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      StreamInputReader<AbstractGeoPointDVIndexFieldData.GeoPointDVIndexFieldData> streamInputReader0 = (StreamInputReader<AbstractGeoPointDVIndexFieldData.GeoPointDVIndexFieldData>) mock(StreamInputReader.class, new ViolatedAssumptionAnswer());
      List<AbstractGeoPointDVIndexFieldData.GeoPointDVIndexFieldData> list0 = namedWriteableAwareStreamInput0.readList(streamInputReader0);
      assertNotNull(list0);
      assertEquals(2950, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2949, byteBuffer0.remaining());
      assertEquals(2950, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=2950 cap=2950]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      updateResponse0.readFrom(namedWriteableAwareStreamInput0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(2950, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(13, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=13 lim=2950 cap=2950]", byteBuffer0.toString());
      assertEquals(2950, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2937, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      String string2 = "I0#VRh+)HVEYCu";
      boolean boolean1 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, string1, int0, boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertNotNull(indexResponse0);
      assertEquals(2950L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("I0#VRh+)HVEYCu", indexResponse0.getType());
      assertEquals("\"/ tzaRyR$", indexResponse0.getId());
      
      FetchSourceContext fetchSourceContext0 = new FetchSourceContext(boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(fetchSourceContext0);
      assertTrue(fetchSourceContext0.fetchSource());
      
      MissingAggregationBuilder missingAggregationBuilder0 = null;
      try {
        missingAggregationBuilder0 = new MissingAggregationBuilder(namedWriteableAwareStreamInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Map
         //
         verifyException("org.elasticsearch.common.io.stream.StreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      boolean boolean0 = deleteResponse0.forcedRefresh();
      assertFalse(boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      int int0 = 1;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, deleteResponse0.EMPTY);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(1, replicationResponse_ShardInfo0.getSuccessful());
      
      deleteResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(1, replicationResponse_ShardInfo0.getSuccessful());
      
      XContentBuilder xContentBuilder0 = SmileXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      
      boolean boolean0 = true;
      updateResponse0.setForcedRefresh(boolean0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertTrue(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      
      boolean boolean1 = updateResponse0.forcedRefresh();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertTrue(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)21;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-42);
      byteArray0[2] = byte2;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte2, (int) byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertEquals(3, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte) (-42)}, byteArray0);
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      boolean boolean0 = indexResponse0.isCreated();
      assertFalse(boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      boolean boolean1 = true;
      LinkedList<SimulateDocumentResult> linkedList0 = new LinkedList<SimulateDocumentResult>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimulatePipelineResponse simulatePipelineResponse0 = new SimulatePipelineResponse(indexAction0.NAME, boolean1, linkedList0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(simulatePipelineResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, linkedList0.size());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("indices:data/write/index", simulatePipelineResponse0.getPipelineId());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)13;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-125);
      byteArray0[1] = byte1;
      int int0 = 0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte0, int0);
      assertFalse(byte0 == byte1);
      assertEquals(2, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-125)}, byteArray0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(streamInput0);
      assertFalse(byte0 == byte1);
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertEquals(2, byteArray0.length);
      assertNotNull(inputStreamStreamInput0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-125)}, byteArray0);
      
      SimpleModel simpleModel0 = new SimpleModel(inputStreamStreamInput0);
      assertFalse(byte0 == byte1);
      assertFalse(streamInput0.equals((Object)inputStreamStreamInput0));
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertEquals(2, byteArray0.length);
      assertNotNull(simpleModel0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-125)}, byteArray0);
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertFalse(simpleModel0.canBeMinimized());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      String[] stringArray0 = new String[1];
      String string0 = "forced_refresh";
      stringArray0[0] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      Map<String, String> map1 = fakeRestRequest0.params();
      assertNull(map1);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map1, fakeRestRequest0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder1 = simpleModel0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(streamInput0, inputStreamStreamInput0);
      assertNotSame(inputStreamStreamInput0, streamInput0);
      assertFalse(byte0 == byte1);
      assertFalse(streamInput0.equals((Object)inputStreamStreamInput0));
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(xContentBuilder1);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-125)}, byteArray0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      XContentBuilder xContentBuilder2 = simulatePipelineResponse0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertNotSame(streamInput0, inputStreamStreamInput0);
      assertNotSame(inputStreamStreamInput0, streamInput0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertFalse(boolean1 == boolean0);
      assertFalse(byte0 == byte1);
      assertFalse(streamInput0.equals((Object)inputStreamStreamInput0));
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(xContentBuilder2);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-125)}, byteArray0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, linkedList0.size());
      assertTrue(simulatePipelineResponse0.isVerbose());
      assertEquals("indices:data/write/index", simulatePipelineResponse0.getPipelineId());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder2, toXContent_DelegatingMapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-92);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-112);
      byteArray0[3] = byte3;
      byte byte4 = (byte)62;
      byteArray0[4] = byte4;
      byte byte5 = (byte)52;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-24);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      BytesArray bytesArray0 = new BytesArray(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bytesArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-92), (byte)0, (byte) (-112), (byte)62, (byte)52, (byte) (-24), (byte)0}, byteArray0);
      assertEquals(8, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(8, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-92), (byte)0, (byte) (-112), (byte)62, (byte)52, (byte) (-24), (byte)0}, byteArray0);
      assertEquals(8, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(53, releasableBytesStreamOutput0.size());
      assertEquals(53L, releasableBytesStreamOutput0.position());
      
      String string2 = updateResponse0.getIndex();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string2);
      assertNotNull(string2);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      XContentBuilder xContentBuilder0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      int int0 = 0;
      int int1 = (-1045);
      String string0 = "";
      Throwable throwable0 = null;
      ParsingException parsingException0 = new ParsingException(int0, int1, string0, throwable0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(parsingException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(shardId0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals((-1045), parsingException0.getColumnNumber());
      
      String string1 = "";
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, parsingException0.REST_EXCEPTION_SKIP_CAUSE, int0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(updateResponse0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals((-1045), parsingException0.getColumnNumber());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("rest.exception.cause.skip", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      
      String string2 = updateResponse0.getId();
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("rest.exception.cause.skip", string2);
      assertNotNull(string2);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals((-1045), parsingException0.getColumnNumber());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("rest.exception.cause.skip", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-118);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)80;
      byteArray0[3] = byte3;
      byte byte4 = (byte)117;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-125);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)1, (byte)0, (byte)80, (byte)117, (byte)0, (byte) (-125), (byte)0}, byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteBufferStreamInput0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)1, (byte)0, (byte)80, (byte)117, (byte)0, (byte) (-125), (byte)0}, byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      try { 
        updateResponse0.readFrom(byteBufferStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(53L, releasableBytesStreamOutput0.position());
      assertEquals(53, releasableBytesStreamOutput0.size());
      
      String string2 = updateResponse0.getIndex();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string2);
      assertNotNull(string2);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      XContentBuilder xContentBuilder0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      ShardId shardId1 = null;
      String string3 = "@c;P!!U6Zh";
      String[] stringArray0 = fakeRestRequest0.paramAsStringArrayOrEmptyIfAll(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      String string4 = "OPeqd8%;C;r$`T}A";
      String string5 = "org.apache.lucene.util.AttributeSource$2";
      long long2 = (-134L);
      boolean boolean2 = true;
      String string6 = "Njdl3C{PqdhU";
      IndexResponse indexResponse0 = new IndexResponse(shardId1, string4, string5, long2, boolean2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals((-134L), indexResponse0.getVersion());
      assertEquals("OPeqd8%;C;r$`T}A", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.apache.lucene.util.AttributeSource$2", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      ShardId shardId2 = updateResponse0.getShardId();
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(shardId0, shardId2);
      assertSame(shardId2, shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId2);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(206, shardId2.getId());
      assertEquals(206, shardId2.id());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(RestStatus.CREATED, restStatus0);
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals((-134L), indexResponse0.getVersion());
      assertEquals("OPeqd8%;C;r$`T}A", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.apache.lucene.util.AttributeSource$2", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(201, restStatus0.getStatus());
      
      long long3 = indexResponse0.getVersion();
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals((-134L), long3);
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals((-134L), indexResponse0.getVersion());
      assertEquals("OPeqd8%;C;r$`T}A", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.apache.lucene.util.AttributeSource$2", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(releasableBytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertNotSame(indexResponse1, indexResponse0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotNull(indexResponse1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      
      BytesArray bytesArray0 = new BytesArray(indexAction0.NAME);
      assertNotNull(bytesArray0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(24, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      
      ChannelBuffer channelBuffer0 = bytesArray0.toChannelBuffer();
      assertNotNull(channelBuffer0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(24, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(24, channelBuffer0.readableBytes());
      assertEquals(24, channelBuffer0.capacity());
      assertEquals(24, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(24, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(24, channelBuffer0.readableBytes());
      assertEquals(24, channelBuffer0.capacity());
      assertEquals(24, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(24, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(24, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(24, channelBuffer0.readableBytes());
      assertEquals(24, channelBuffer0.capacity());
      assertEquals(24, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(24, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(24, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 24
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(53L, releasableBytesStreamOutput0.position());
      assertEquals(53, releasableBytesStreamOutput0.size());
      
      String string2 = updateResponse0.getIndex();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string2);
      assertNotNull(string2);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      XContentBuilder xContentBuilder0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      ShardId shardId1 = null;
      String string3 = "@c;P!!U6Zh";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = fakeRestRequest0.paramAsStringArrayOrEmptyIfAll(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      String string4 = "OPeqd8%;C;r$`T}A";
      String string5 = "org.apache.lucene.util.AttributeSource$2";
      long long2 = (-134L);
      boolean boolean2 = true;
      String string6 = "Njdl3C{PqdhU";
      IndexResponse indexResponse0 = new IndexResponse(shardId1, string4, string5, long2, boolean2);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(indexResponse0);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("OPeqd8%;C;r$`T}A", indexResponse0.getType());
      assertEquals("org.apache.lucene.util.AttributeSource$2", indexResponse0.getId());
      assertEquals((-134L), indexResponse0.getVersion());
      
      ShardId shardId2 = updateResponse0.getShardId();
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(shardId0, shardId2);
      assertSame(shardId2, shardId0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId2);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(206, shardId2.id());
      assertEquals(206, shardId2.getId());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(RestStatus.CREATED, restStatus0);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("OPeqd8%;C;r$`T}A", indexResponse0.getType());
      assertEquals("org.apache.lucene.util.AttributeSource$2", indexResponse0.getId());
      assertEquals((-134L), indexResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(shardId0, shardId2);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(53, bytesStreamOutput0.size());
      assertEquals(53L, bytesStreamOutput0.position());
      
      Hashtable<RecoveryState.Stage, InputStream> hashtable0 = new Hashtable<RecoveryState.Stage, InputStream>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Enumeration<InputStream> enumeration0 = hashtable0.elements();
      assertNotNull(enumeration0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(sequenceInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      try { 
        updateResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(53L, releasableBytesStreamOutput0.position());
      assertEquals(53, releasableBytesStreamOutput0.size());
      
      String string2 = updateResponse0.getIndex();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string2);
      assertNotNull(string2);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      XContentBuilder xContentBuilder0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      
      ShardId shardId1 = null;
      String string3 = "@c;P!!U6Zh";
      String[] stringArray0 = fakeRestRequest0.paramAsStringArrayOrEmptyIfAll(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      
      String string4 = "OPeqd8%;C;r$`T}A";
      String string5 = "org.apache.lucene.util.AttributeSource$2";
      long long2 = (-134L);
      boolean boolean2 = true;
      String string6 = "Njdl3C{PqdhU";
      ShardId shardId2 = updateResponse0.getShardId();
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(shardId0, shardId2);
      assertSame(shardId2, shardId0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertNotNull(shardId2);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(206, shardId2.id());
      assertEquals(206, shardId2.getId());
      
      String string7 = updateResponse0.getType();
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotSame(string0, string6);
      assertSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(shardId0, shardId2);
      assertSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertSame(string7, string0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string7);
      assertNotNull(string7);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = (-2720);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-2720), shardId0.id());
      assertEquals((-2720), shardId0.getId());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-2720), shardId0.id());
      assertEquals((-2720), shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][-2720]", string1);
      assertNotNull(string1);
      assertEquals((-2720), shardId0.id());
      assertEquals((-2720), shardId0.getId());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals((-2720), shardId0.id());
      assertEquals((-2720), shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(56, releasableBytesStreamOutput0.size());
      assertEquals(56L, releasableBytesStreamOutput0.position());
      
      String string2 = updateResponse0.getIndex();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string2);
      assertNotNull(string2);
      assertEquals((-2720), shardId0.id());
      assertEquals((-2720), shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-2720), shardId0.id());
      assertEquals((-2720), shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      
      XContentBuilder xContentBuilder0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      ShardId shardId1 = null;
      String string3 = "@c;P!!U6Zh";
      String[] stringArray0 = fakeRestRequest0.paramAsStringArrayOrEmptyIfAll(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      String string4 = "OPeqd8%;C;r$`T}A";
      String string5 = "org.apache.lucene.util.AttributeSource$2";
      long long2 = (-134L);
      boolean boolean2 = true;
      String string6 = "Njdl3C{PqdhU";
      ShardId shardId2 = updateResponse0.getShardId();
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertSame(shardId0, shardId2);
      assertSame(shardId2, shardId0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId2);
      assertEquals((-2720), shardId0.id());
      assertEquals((-2720), shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2720), shardId2.getId());
      assertEquals((-2720), shardId2.id());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      XContentBuilder xContentBuilder0 = null;
      String string2 = "OPeqd8%;C;r$`T}A";
      String string3 = "org.apache.lucene.util.AttributeSource$2";
      long long2 = (-134L);
      boolean boolean1 = true;
      int int1 = 0;
      int int2 = 507;
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[7];
      String string4 = "Zy73-&!+R4~;RBZ8 g0";
      String string5 = "]kU&Il#;Q6cuu$J";
      String string6 = "";
      int int3 = 454;
      String string7 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string7, string1, bigArrays0.BYTE_PAGE_SIZE);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertNotNull(sQLTimeoutException0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("[Q @6J(u3=C][206]", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning(string5, string6, int3, sQLTimeoutException0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertNotNull(sQLWarning0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("[Q @6J(u3=C][206]", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLWarning: ]kU&Il#;Q6cuu$J", sQLWarning0.toString());
      assertEquals(454, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("]kU&Il#;Q6cuu$J", sQLWarning0.getMessage());
      
      RestStatus restStatus0 = RestStatus.MULTIPLE_CHOICES;
      boolean boolean2 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure(shardId0, string4, sQLWarning0, restStatus0, boolean2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(boolean2 == boolean1);
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("[Q @6J(u3=C][206]", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLWarning: ]kU&Il#;Q6cuu$J", sQLWarning0.toString());
      assertEquals(454, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("]kU&Il#;Q6cuu$J", sQLWarning0.getMessage());
      assertEquals(206, replicationResponse_ShardInfo_Failure0.shardId());
      assertEquals(RestStatus.MULTIPLE_CHOICES, replicationResponse_ShardInfo_Failure0.status());
      assertFalse(replicationResponse_ShardInfo_Failure0.primary());
      assertEquals("Zy73-&!+R4~;RBZ8 g0", replicationResponse_ShardInfo_Failure0.nodeId());
      
      replicationResponse_ShardInfo_FailureArray0[0] = replicationResponse_ShardInfo_Failure0;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure1 = new ReplicationResponse.ShardInfo.Failure(shardId0, string5, sQLTimeoutException0, restStatus0, boolean0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(replicationResponse_ShardInfo_Failure1.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertNotNull(replicationResponse_ShardInfo_Failure1);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("[Q @6J(u3=C][206]", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals(RestStatus.MULTIPLE_CHOICES, replicationResponse_ShardInfo_Failure1.status());
      assertEquals(206, replicationResponse_ShardInfo_Failure1.shardId());
      assertEquals("]kU&Il#;Q6cuu$J", replicationResponse_ShardInfo_Failure1.nodeId());
      assertFalse(replicationResponse_ShardInfo_Failure1.primary());
      
      replicationResponse_ShardInfo_FailureArray0[1] = replicationResponse_ShardInfo_Failure1;
      String string8 = "_type";
      boolean boolean3 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure2 = new ReplicationResponse.ShardInfo.Failure(shardId0, string8, sQLWarning0, restStatus0, boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(replicationResponse_ShardInfo_Failure2);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, replicationResponse_ShardInfo_Failure2.shardId());
      assertEquals(RestStatus.MULTIPLE_CHOICES, replicationResponse_ShardInfo_Failure2.status());
      assertEquals("_type", replicationResponse_ShardInfo_Failure2.nodeId());
      assertFalse(replicationResponse_ShardInfo_Failure2.primary());
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("[Q @6J(u3=C][206]", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLWarning: ]kU&Il#;Q6cuu$J", sQLWarning0.toString());
      assertEquals(454, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("]kU&Il#;Q6cuu$J", sQLWarning0.getMessage());
      
      replicationResponse_ShardInfo_FailureArray0[2] = replicationResponse_ShardInfo_Failure2;
      String string9 = "e\"?jgjLGB";
      String string10 = "h-)sDHXv!w7yj`Q:";
      String string11 = null;
      int int4 = (-2445);
      SQLException sQLException0 = new SQLException(string10, string11, int4);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: h-)sDHXv!w7yj`Q:", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals((-2445), sQLException0.getErrorCode());
      assertEquals("h-)sDHXv!w7yj`Q:", sQLException0.getMessage());
      
      RestStatus restStatus1 = RestStatus.NON_AUTHORITATIVE_INFORMATION;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure3 = new ReplicationResponse.ShardInfo.Failure(shardId0, string9, sQLException0, restStatus1, boolean2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(restStatus1.equals((Object)restStatus0));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(boolean2 == boolean1);
      assertNotNull(replicationResponse_ShardInfo_Failure3);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("java.sql.SQLException: h-)sDHXv!w7yj`Q:", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals((-2445), sQLException0.getErrorCode());
      assertEquals("h-)sDHXv!w7yj`Q:", sQLException0.getMessage());
      assertEquals("e\"?jgjLGB", replicationResponse_ShardInfo_Failure3.nodeId());
      assertEquals(206, replicationResponse_ShardInfo_Failure3.shardId());
      assertFalse(replicationResponse_ShardInfo_Failure3.primary());
      assertEquals(RestStatus.NON_AUTHORITATIVE_INFORMATION, replicationResponse_ShardInfo_Failure3.status());
      
      replicationResponse_ShardInfo_FailureArray0[3] = replicationResponse_ShardInfo_Failure3;
      String string12 = ", mergeId='";
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure4 = new ReplicationResponse.ShardInfo.Failure(shardId0, string12, sQLException0, restStatus1, boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string12));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(restStatus1.equals((Object)restStatus0));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure3));
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertNotNull(replicationResponse_ShardInfo_Failure4);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("java.sql.SQLException: h-)sDHXv!w7yj`Q:", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals((-2445), sQLException0.getErrorCode());
      assertEquals("h-)sDHXv!w7yj`Q:", sQLException0.getMessage());
      assertEquals(RestStatus.NON_AUTHORITATIVE_INFORMATION, replicationResponse_ShardInfo_Failure4.status());
      assertEquals(206, replicationResponse_ShardInfo_Failure4.shardId());
      assertFalse(replicationResponse_ShardInfo_Failure4.primary());
      assertEquals(", mergeId='", replicationResponse_ShardInfo_Failure4.nodeId());
      
      replicationResponse_ShardInfo_FailureArray0[4] = replicationResponse_ShardInfo_Failure4;
      String string13 = "";
      RestStatus restStatus2 = RestStatus.HTTP_VERSION_NOT_SUPPORTED;
      boolean boolean4 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure5 = new ReplicationResponse.ShardInfo.Failure(shardId0, string13, sQLTimeoutException0, restStatus2, boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string12));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure4));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure3));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string13));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string10));
      assertFalse(restStatus2.equals((Object)restStatus1));
      assertFalse(restStatus2.equals((Object)restStatus0));
      assertNotNull(replicationResponse_ShardInfo_Failure5);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(RestStatus.HTTP_VERSION_NOT_SUPPORTED, replicationResponse_ShardInfo_Failure5.status());
      assertEquals(206, replicationResponse_ShardInfo_Failure5.shardId());
      assertFalse(replicationResponse_ShardInfo_Failure5.primary());
      assertEquals("", replicationResponse_ShardInfo_Failure5.nodeId());
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("[Q @6J(u3=C][206]", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      
      replicationResponse_ShardInfo_FailureArray0[5] = replicationResponse_ShardInfo_Failure5;
      RestStatus restStatus3 = RestStatus.PRECONDITION_FAILED;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure6 = new ReplicationResponse.ShardInfo.Failure(shardId0, string13, sQLTimeoutException0, restStatus3, boolean2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string12));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(restStatus3.equals((Object)restStatus0));
      assertFalse(restStatus3.equals((Object)restStatus1));
      assertFalse(restStatus3.equals((Object)restStatus2));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure5));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure3));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string13));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string12));
      assertFalse(boolean2 == boolean1);
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string10));
      assertNotNull(replicationResponse_ShardInfo_Failure6);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo_Failure6.status());
      assertEquals("", replicationResponse_ShardInfo_Failure6.nodeId());
      assertFalse(replicationResponse_ShardInfo_Failure6.primary());
      assertEquals(206, replicationResponse_ShardInfo_Failure6.shardId());
      assertEquals("[Q @6J(u3=C][206]", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      
      replicationResponse_ShardInfo_FailureArray0[6] = replicationResponse_ShardInfo_Failure6;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int1, int2, replicationResponse_ShardInfo_FailureArray0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertEquals(7, replicationResponse_ShardInfo_FailureArray0.length);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(7, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(507, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string14 = "";
      String string15 = "L,=tu^l`pO_S";
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string14, string15, bigArrays0.PAGE_SIZE_IN_BYTES, boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string15));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string14));
      assertFalse(string0.equals((Object)string7));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string6));
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertEquals(7, replicationResponse_ShardInfo_FailureArray0.length);
      assertNotNull(updateResponse0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals(7, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(507, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("L,=tu^l`pO_S", updateResponse0.getId());
      assertEquals(16384L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      
      String string16 = updateResponse0.getType();
      assertNotSame(string0, string3);
      assertNotSame(string0, string16);
      assertNotSame(string0, string15);
      assertNotSame(string0, string9);
      assertNotSame(string0, string13);
      assertNotSame(string0, string8);
      assertNotSame(string0, string10);
      assertNotSame(string0, string12);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string14);
      assertNotSame(string0, string7);
      assertNotSame(string14, string9);
      assertNotSame(string14, string15);
      assertNotSame(string14, string2);
      assertSame(string14, string16);
      assertNotSame(string14, string3);
      assertNotSame(string14, string10);
      assertSame(string14, string13);
      assertSame(string14, string6);
      assertNotSame(string14, string8);
      assertNotSame(string14, string12);
      assertSame(string14, string7);
      assertNotSame(string14, string5);
      assertNotSame(string14, string4);
      assertNotSame(string14, string0);
      assertNotSame(string14, string1);
      assertNotSame(string15, string9);
      assertNotSame(string15, string13);
      assertNotSame(string15, string2);
      assertNotSame(string15, string14);
      assertNotSame(string15, string16);
      assertNotSame(string15, string3);
      assertNotSame(string15, string10);
      assertNotSame(string15, string12);
      assertNotSame(string15, string1);
      assertNotSame(string15, string0);
      assertNotSame(string15, string8);
      assertNotSame(string15, string4);
      assertNotSame(string15, string7);
      assertNotSame(string15, string5);
      assertNotSame(string15, string6);
      assertNotSame(string16, string9);
      assertNotSame(string16, string10);
      assertNotSame(string16, string3);
      assertNotSame(string16, string15);
      assertSame(string16, string14);
      assertSame(string16, string7);
      assertNotSame(string16, string0);
      assertNotSame(string16, string8);
      assertSame(string16, string6);
      assertNotSame(string16, string1);
      assertNotSame(string16, string12);
      assertNotSame(string16, string4);
      assertSame(string16, string13);
      assertNotSame(string16, string2);
      assertNotSame(string16, string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string15));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string14));
      assertFalse(string0.equals((Object)string7));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(boolean4 == boolean1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string5));
      assertEquals("", string16);
      assertEquals(7, replicationResponse_ShardInfo_FailureArray0.length);
      assertNotNull(string16);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals(7, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(507, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("L,=tu^l`pO_S", updateResponse0.getId());
      assertEquals(16384L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      long long0 = 31L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(31L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      
      long long1 = 1333L;
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(31L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(13, releasableBytesStreamOutput0.size());
      assertEquals(13L, releasableBytesStreamOutput0.position());
      
      String string2 = updateResponse0.getIndex();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(31L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(31L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      
      XContentBuilder xContentBuilder0 = null;
      String string3 = "OPeqd8%;C;r$`T}A";
      long long2 = (-134L);
      ShardId shardId1 = updateResponse0.getShardId();
      assertSame(shardId1, shardId0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(shardId0, shardId1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId1);
      assertEquals(206, shardId1.getId());
      assertEquals(206, shardId1.id());
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(31L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(53L, releasableBytesStreamOutput0.position());
      assertEquals(53, releasableBytesStreamOutput0.size());
      
      String string2 = updateResponse0.getIndex();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string2);
      assertNotNull(string2);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      XContentBuilder xContentBuilder0 = null;
      String string3 = "OPeqd8%;C;r$`T}A";
      String string4 = "org.apache.lucene.util.AttributeSource$2";
      long long2 = (-134L);
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(shardId1, shardId0);
      assertSame(shardId0, shardId1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId1);
      assertEquals(206, shardId1.id());
      assertEquals(206, shardId1.getId());
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      String string5 = updateResponse0.toString();
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(shardId0, shardId1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertEquals("UpdateResponse[index=Q @6J(u3=C,type=Q @6J(u3=C,id=Q @6J(u3=C,version=-4,created=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string5);
      assertNotNull(string5);
      assertEquals(206, shardId0.getId());
      assertEquals(206, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(pipedInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        updateResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-4L), updateResponse0.getVersion());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      
      long long1 = 1333L;
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(objectArray0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(1333L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(bigArrays0.INT_PAGE_SIZE);
      assertNotNull(byteBuffer0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4096, byteBuffer0.remaining());
      assertEquals(4096, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4096, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4096 cap=4096]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4096, byteBuffer0.remaining());
      assertEquals(4096, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4096, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4096 cap=4096]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(byteBufferStreamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4096, byteBuffer0.remaining());
      assertEquals(4096, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4096, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4096 cap=4096]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      shardId0.readFrom(namedWriteableAwareStreamInput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=4096 cap=4096]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4096, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4096, byteBuffer0.limit());
      assertEquals(3, byteBuffer0.position());
      assertEquals(4093, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(32L, releasableBytesStreamOutput0.position());
      assertEquals(32, releasableBytesStreamOutput0.size());
      
      String string2 = updateResponse0.getIndex();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-4L), updateResponse0.getVersion());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(long0 == long1);
      assertFalse(boolean1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-4L), updateResponse0.getVersion());
      
      XContentBuilder xContentBuilder0 = null;
      String string3 = "org.apache.lucene.util.AttributeSource$2";
      long long2 = (-134L);
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals(0, shardId1.id());
      assertEquals(0, shardId1.getId());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "Q @6J(u3=C";
      int int0 = 206;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      long long0 = (-4L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      ObjectArray<String> objectArray0 = bigArrays0.newObjectArray((long) int0);
      assertNotNull(objectArray0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(206L, objectArray0.size());
      
      String string1 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Q @6J(u3=C][206]", string1);
      assertNotNull(string1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(53, releasableBytesStreamOutput0.size());
      assertEquals(53L, releasableBytesStreamOutput0.position());
      
      String string2 = updateResponse0.getIndex();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q @6J(u3=C", string2);
      assertNotNull(string2);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals((-4L), updateResponse0.getVersion());
      assertEquals("Q @6J(u3=C", updateResponse0.getType());
      assertEquals("Q @6J(u3=C", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      XContentBuilder xContentBuilder0 = null;
      String string3 = "org.apache.lucene.util.AttributeSource$2";
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(bigArrays0.LONG_PAGE_SIZE);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2048, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      
      int int1 = 495;
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(byteBuffer0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(495, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=495 lim=701 cap=2048]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertEquals(2048, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(206, byteBuffer0.remaining());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2048, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(495, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=495 lim=701 cap=2048]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertEquals(2048, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(206, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2048, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(streamInput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(495, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=495 lim=701 cap=2048]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertEquals(2048, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(206, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2048, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      
      updateResponse0.readFrom(streamInput0);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals("java.nio.HeapByteBuffer[pos=507 lim=701 cap=2048]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertEquals(2048, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(194, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(507, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertTrue(streamInput0.markSupported());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2048, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      
      deleteResponse0.readFrom(streamInput0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(183, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(701, byteBuffer0.limit());
      assertEquals(2048, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(518, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=518 lim=701 cap=2048]", byteBuffer0.toString());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2048, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      
      String string4 = updateResponse0.getId();
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(206, shardId0.id());
      assertEquals(206, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "QyI[hTCC,4a=rJ7";
      String string1 = "";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string2 = "u}v[_IZ^n}vQ\"";
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertTrue(deleteResponse0.isFound());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getType());
      
      String string3 = "";
      HighlightBuilder.Field highlightBuilder_Field0 = new HighlightBuilder.Field(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(highlightBuilder_Field0);
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      HighlightBuilder.Field highlightBuilder_Field1 = highlightBuilder_Field0.matchedFields(stringArray0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field1);
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.noMatchSize());
      
      HighlightBuilder.Field highlightBuilder_Field2 = highlightBuilder_Field1.fragmentOffset(int0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field2);
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertEquals("", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.highlighterType());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.highlightFilter());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.noMatchSize());
      
      String string4 = "v+1NS^Y/T";
      String string5 = "908[";
      ChildrenAggregationBuilder childrenAggregationBuilder0 = new ChildrenAggregationBuilder(string4, string5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(childrenAggregationBuilder0);
      assertNull(childrenAggregationBuilder0.valueType());
      assertNull(childrenAggregationBuilder0.format());
      assertNull(childrenAggregationBuilder0.field());
      assertEquals("v+1NS^Y/T", childrenAggregationBuilder0.getName());
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder1 = childrenAggregationBuilder0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder1);
      assertNull(childrenAggregationBuilder0.valueType());
      assertNull(childrenAggregationBuilder0.format());
      assertNull(childrenAggregationBuilder0.field());
      assertEquals("v+1NS^Y/T", childrenAggregationBuilder0.getName());
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      XContentBuilder xContentBuilder2 = highlightBuilder_Field2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder2);
      assertNull(childrenAggregationBuilder0.valueType());
      assertNull(childrenAggregationBuilder0.format());
      assertNull(childrenAggregationBuilder0.field());
      assertEquals("v+1NS^Y/T", childrenAggregationBuilder0.getName());
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertEquals("", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.highlighterType());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.highlightFilter());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.noMatchSize());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "QyI[hTCC,4a=rJ7";
      String string1 = "";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string2 = "u}v[_IZ^n}vQ\"";
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(deleteResponse0.isFound());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getId());
      
      String string3 = "";
      HighlightBuilder.Field highlightBuilder_Field0 = new HighlightBuilder.Field(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(highlightBuilder_Field0);
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.forceSource());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      HighlightBuilder.Field highlightBuilder_Field1 = highlightBuilder_Field0.matchedFields(stringArray0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field1);
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      
      HighlightBuilder.Field highlightBuilder_Field2 = new HighlightBuilder.Field(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(highlightBuilder_Field2.equals((Object)highlightBuilder_Field0));
      assertFalse(highlightBuilder_Field2.equals((Object)highlightBuilder_Field1));
      assertNotNull(highlightBuilder_Field2);
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertEquals("QyI[hTCC,4a=rJ7", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.noMatchSize());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertNull(highlightBuilder_Field2.highlightFilter());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.highlighterType());
      
      String string4 = "v+19NS^Y/T";
      String string5 = "908[";
      ChildrenAggregationBuilder childrenAggregationBuilder0 = new ChildrenAggregationBuilder(string4, string5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(childrenAggregationBuilder0);
      assertEquals("v+19NS^Y/T", childrenAggregationBuilder0.getName());
      assertNull(childrenAggregationBuilder0.field());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder1 = YamlXContent.contentBuilder();
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertNotNull(xContentBuilder1);
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      
      XContentBuilder xContentBuilder2 = highlightBuilder_Field2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertNotSame(xContentBuilder2, xContentBuilder0);
      assertNotSame(highlightBuilder_Field2, highlightBuilder_Field0);
      assertNotSame(highlightBuilder_Field2, highlightBuilder_Field1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertFalse(xContentBuilder2.equals((Object)xContentBuilder0));
      assertFalse(highlightBuilder_Field2.equals((Object)highlightBuilder_Field0));
      assertFalse(highlightBuilder_Field2.equals((Object)highlightBuilder_Field1));
      assertNotNull(xContentBuilder2);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertEquals("QyI[hTCC,4a=rJ7", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.noMatchSize());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertNull(highlightBuilder_Field2.highlightFilter());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.highlighterType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=found)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "QyI[hTCC,4a=rJ7";
      String string1 = "";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string2 = "u}v[_IZ^n}vQ\"";
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getId());
      
      String string3 = "";
      HighlightBuilder.Field highlightBuilder_Field0 = new HighlightBuilder.Field(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(highlightBuilder_Field0);
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.noMatchSize());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      HighlightBuilder.Field highlightBuilder_Field1 = highlightBuilder_Field0.matchedFields(stringArray0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field1);
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.forceSource());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.phraseLimit());
      
      HighlightBuilder.Field highlightBuilder_Field2 = new HighlightBuilder.Field(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(highlightBuilder_Field2.equals((Object)highlightBuilder_Field0));
      assertFalse(highlightBuilder_Field2.equals((Object)highlightBuilder_Field1));
      assertNotNull(highlightBuilder_Field2);
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.highlightFilter());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertNull(highlightBuilder_Field2.noMatchSize());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.highlighterType());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertEquals("QyI[hTCC,4a=rJ7", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.order());
      
      String string4 = "v+19NS^Y/T";
      String string5 = "908[";
      ChildrenAggregationBuilder childrenAggregationBuilder0 = new ChildrenAggregationBuilder(string4, string5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(childrenAggregationBuilder0);
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("v+19NS^Y/T", childrenAggregationBuilder0.getName());
      assertNull(childrenAggregationBuilder0.field());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder1 = YamlXContent.contentBuilder();
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      
      XContentBuilder xContentBuilder2 = JsonXContent.contentBuilder();
      assertNotSame(xContentBuilder2, xContentBuilder0);
      assertNotSame(xContentBuilder2, xContentBuilder1);
      assertFalse(xContentBuilder2.equals((Object)xContentBuilder0));
      assertFalse(xContentBuilder2.equals((Object)xContentBuilder1));
      assertNotNull(xContentBuilder2);
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      try { 
        deleteResponse0.toXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "QyI[hTCC,4a=rJ7";
      String string1 = "";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string2 = "u}v[_IZ^n}vQ\"";
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getId());
      
      String string3 = "";
      HighlightBuilder.Field highlightBuilder_Field0 = new HighlightBuilder.Field(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(highlightBuilder_Field0);
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      HighlightBuilder.Field highlightBuilder_Field1 = highlightBuilder_Field0.matchedFields(stringArray0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field1);
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.fragmenter());
      
      HighlightBuilder.Field highlightBuilder_Field2 = highlightBuilder_Field1.fragmentOffset(int0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field2);
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field2.noMatchSize());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertEquals("", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertNull(highlightBuilder_Field2.highlighterType());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.highlightFilter());
      
      String string4 = "v+1NS^Y/T";
      String string5 = "908[";
      ChildrenAggregationBuilder childrenAggregationBuilder0 = new ChildrenAggregationBuilder(string4, string5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(childrenAggregationBuilder0);
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("v+1NS^Y/T", childrenAggregationBuilder0.getName());
      assertNull(childrenAggregationBuilder0.field());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder1 = childrenAggregationBuilder0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder1);
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("v+1NS^Y/T", childrenAggregationBuilder0.getName());
      assertNull(childrenAggregationBuilder0.field());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      
      XContentBuilder xContentBuilder2 = highlightBuilder_Field2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertSame(string3, string1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder2);
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("v+1NS^Y/T", childrenAggregationBuilder0.getName());
      assertNull(childrenAggregationBuilder0.field());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field2.noMatchSize());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertEquals("", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertNull(highlightBuilder_Field2.highlighterType());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.highlightFilter());
      
      FakeRestRequest fakeRestRequest1 = new FakeRestRequest(map0);
      assertFalse(fakeRestRequest1.equals((Object)fakeRestRequest0));
      assertNotNull(fakeRestRequest1);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest1.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest1.method());
      assertEquals("/", fakeRestRequest1.uri());
      assertEquals("/", fakeRestRequest1.rawPath());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder2, fakeRestRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "QyI[hTCC,4a=rJ7";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string1 = "u}v[_IZ^n}vQ\"";
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string1, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("u}v[_IZ^n}vQ\"", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      
      String string2 = "";
      HighlightBuilder.Field highlightBuilder_Field0 = new HighlightBuilder.Field(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(highlightBuilder_Field0);
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.order());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      HighlightBuilder.Field highlightBuilder_Field1 = highlightBuilder_Field0.matchedFields(stringArray0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field1);
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      
      HighlightBuilder.Field highlightBuilder_Field2 = highlightBuilder_Field1.fragmentOffset(int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertNotNull(highlightBuilder_Field2);
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field2.highlightFilter());
      assertNull(highlightBuilder_Field2.highlighterType());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertEquals("", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertNull(highlightBuilder_Field2.noMatchSize());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.forceSource());
      
      ChildrenAggregationBuilder childrenAggregationBuilder0 = new ChildrenAggregationBuilder(string1, stringArray0[0]);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(childrenAggregationBuilder0);
      assertNull(childrenAggregationBuilder0.field());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      assertEquals("u}v[_IZ^n}vQ\"", childrenAggregationBuilder0.getName());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder1 = childrenAggregationBuilder0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder1);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertNull(childrenAggregationBuilder0.field());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      assertEquals("u}v[_IZ^n}vQ\"", childrenAggregationBuilder0.getName());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      
      XContentBuilder xContentBuilder2 = highlightBuilder_Field2.toXContent(xContentBuilder1, fakeRestRequest0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field1);
      assertSame(highlightBuilder_Field0, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field2);
      assertSame(highlightBuilder_Field1, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field0);
      assertSame(highlightBuilder_Field2, highlightBuilder_Field1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder2);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertNull(highlightBuilder_Field0.fragmenter());
      assertNull(highlightBuilder_Field0.forceSource());
      assertNull(highlightBuilder_Field0.requireFieldMatch());
      assertNull(highlightBuilder_Field0.phraseLimit());
      assertNull(highlightBuilder_Field0.noMatchSize());
      assertNull(highlightBuilder_Field0.numOfFragments());
      assertNull(highlightBuilder_Field0.highlightFilter());
      assertNull(highlightBuilder_Field0.highlighterType());
      assertEquals("", highlightBuilder_Field0.name());
      assertNull(highlightBuilder_Field0.boundaryMaxScan());
      assertNull(highlightBuilder_Field0.fragmentSize());
      assertNull(highlightBuilder_Field0.order());
      assertNull(highlightBuilder_Field1.fragmenter());
      assertNull(highlightBuilder_Field1.forceSource());
      assertNull(highlightBuilder_Field1.highlighterType());
      assertNull(highlightBuilder_Field1.fragmentSize());
      assertEquals("", highlightBuilder_Field1.name());
      assertNull(highlightBuilder_Field1.order());
      assertNull(highlightBuilder_Field1.boundaryMaxScan());
      assertNull(highlightBuilder_Field1.phraseLimit());
      assertNull(highlightBuilder_Field1.highlightFilter());
      assertNull(highlightBuilder_Field1.noMatchSize());
      assertNull(highlightBuilder_Field1.numOfFragments());
      assertNull(highlightBuilder_Field1.requireFieldMatch());
      assertNull(highlightBuilder_Field2.highlightFilter());
      assertNull(highlightBuilder_Field2.highlighterType());
      assertNull(highlightBuilder_Field2.numOfFragments());
      assertEquals("", highlightBuilder_Field2.name());
      assertNull(highlightBuilder_Field2.order());
      assertNull(highlightBuilder_Field2.boundaryMaxScan());
      assertNull(highlightBuilder_Field2.noMatchSize());
      assertNull(highlightBuilder_Field2.phraseLimit());
      assertNull(highlightBuilder_Field2.fragmenter());
      assertNull(highlightBuilder_Field2.requireFieldMatch());
      assertNull(highlightBuilder_Field2.fragmentSize());
      assertNull(highlightBuilder_Field2.forceSource());
      assertNull(childrenAggregationBuilder0.field());
      assertNull(childrenAggregationBuilder0.valueType());
      assertEquals("children", childrenAggregationBuilder0.getWriteableName());
      assertNull(childrenAggregationBuilder0.format());
      assertEquals("u}v[_IZ^n}vQ\"", childrenAggregationBuilder0.getName());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      
      String string3 = "index.analysis.analyzer.";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(mockPrintStream0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      String string4 = "_index";
      boolean boolean1 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string4, string3, int0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("index.analysis.analyzer.", updateResponse0.getId());
      assertEquals("_index", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentBuilder3);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("index.analysis.analyzer.", updateResponse0.getId());
      assertEquals("_index", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(XContentType.SMILE, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      
      boolean boolean2 = false;
      XContentGenerator xContentGenerator0 = smileXContent0.createGenerator((OutputStream) mockPrintStream0, stringArray0, boolean2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, stringArray0.length);
      assertNotNull(xContentGenerator0);
      assertEquals(XContentType.SMILE, xContentGenerator0.contentType());
      assertFalse(xContentGenerator0.isPrettyPrint());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "QyI[hTCC,4a=rJ7";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean1 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("QyI[hTCC,4a=rJ7", deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("QyI[hTCC,4a=rJ7", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int1 = 372;
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int1);
      assertFalse(int1 == int0);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(372, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      
      int int2 = 0;
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(int2, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertNotNull(byteBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(372, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(372, byteBuffer0.capacity());
      assertEquals(372, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(372, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=372 cap=372]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertNotNull(byteBufferStreamInput0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(372, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(372, byteBuffer0.capacity());
      assertEquals(372, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(372, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=372 cap=372]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(372, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(361, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=372 cap=372]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(372, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(372, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(11, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile0, stringArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      long long0 = 0L;
      XContentBuilder xContentBuilder1 = xContentBuilder0.dateValueField(string0, stringArray0[0], long0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder1);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      
      XContentBuilder xContentBuilder2 = deleteResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder2);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
  }
}
