/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 06:19:35 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.Map;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.lucene.index.SegmentInfos;
import org.apache.lucene.store.SimpleFSDirectory;
import org.apache.lucene.store.SingleInstanceLockFactory;
import org.apache.lucene.util.BytesRef;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.Version;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.routing.OperationRouting;
import org.elasticsearch.cluster.routing.allocation.decider.AwarenessAllocationDecider;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.util.PageCacheRecycler;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetField;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.CircuitBreakerStats;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.pipeline.movavg.models.LinearModel;
import org.elasticsearch.search.rescore.QueryRescorerBuilder;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.elasticsearch.transport.TransportException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.CompositeChannelBuffer;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", string0);
      
      String string1 = docWriteResponse_Fields0.get_INDEX();
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", string1);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      String string2 = "SwF9b^;.z5iq!PYJY";
      int int0 = 158;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._TYPE, string2, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(158, shardId0.id());
      assertEquals(158, shardId0.getId());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, docWriteResponse_Fields0._SHARD_ID, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(158L, updateResponse0.version);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(158, shardId0.id());
      assertEquals(158, shardId0.getId());
      assertEquals("SwF9b^;.z5iq!PYJY", updateResponse0.getType());
      assertEquals(158L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(158L, updateResponse0.version);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(158, shardId0.id());
      assertEquals(158, shardId0.getId());
      assertEquals("SwF9b^;.z5iq!PYJY", updateResponse0.getType());
      assertEquals(158L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(64L, bytesStreamOutput0.position());
      assertEquals(64, bytesStreamOutput0.size());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      int int0 = 412;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = false;
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(bigArrays0.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(byteBuffer0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(bytesArray0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(streamInput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      
      updateResponse0.readFrom(streamInput0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(12L, releasableBytesStreamOutput0.position());
      assertEquals(12, releasableBytesStreamOutput0.size());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", string0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      ShardId shardId0 = updateResponse0.getShardId();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNull(shardId0);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-55);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)77;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)113;
      byteArray0[5] = byte5;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)1, (byte)77, (byte)0, (byte)113}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      
      int int0 = 0;
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int0, (int) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)1, (byte)77, (byte)0, (byte)113}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotNull(channelBuffer0);
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.capacity());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)1, (byte)77, (byte)0, (byte)113}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotNull(channelBufferBytesReference0);
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)1, (byte)77, (byte)0, (byte)113}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotNull(streamInput0);
      assertEquals(6, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(6, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(6, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", string0);
      
      Index index0 = new Index(docWriteResponse_Fields0._INDEX, docWriteResponse_Fields0._ID);
      assertNotNull(index0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", index0.getUUID());
      
      int int0 = (-1611);
      ShardId shardId0 = new ShardId(index0, int0);
      assertNotNull(shardId0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", index0.getUUID());
      assertEquals((-1611), shardId0.id());
      assertEquals((-1611), shardId0.getId());
      
      String string1 = "_id";
      long long0 = 1821L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, docWriteResponse_Fields0._INDEX, long0, long0, boolean0);
      assertEquals(1821L, deleteResponse0.seqNo);
      assertEquals(1821L, deleteResponse0.version);
      assertNotNull(deleteResponse0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", index0.getUUID());
      assertEquals((-1611), shardId0.id());
      assertEquals((-1611), shardId0.getId());
      assertEquals(1821L, deleteResponse0.getVersion());
      assertEquals("_id", deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_index", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1821L, deleteResponse0.getSeqNo());
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertEquals(1821L, deleteResponse0.seqNo);
      assertEquals(1821L, deleteResponse0.version);
      assertSame(shardId0, shardId1);
      assertSame(string1, string0);
      assertSame(shardId1, shardId0);
      assertNotNull(shardId1);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", index0.getUUID());
      assertEquals((-1611), shardId0.id());
      assertEquals((-1611), shardId0.getId());
      assertEquals(1821L, deleteResponse0.getVersion());
      assertEquals("_id", deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_index", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1821L, deleteResponse0.getSeqNo());
      assertEquals((-1611), shardId1.getId());
      assertEquals((-1611), shardId1.id());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", string0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", string0);
      
      String string1 = "(~u_hcx'#tmB9:qcXq4";
      String string2 = "";
      boolean boolean0 = true;
      String string3 = null;
      String string4 = "iI";
      long long0 = (-1566L);
      boolean boolean1 = true;
      ShardId shardId0 = null;
      String string5 = "";
      String string6 = "RMAm>8O";
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string5, string6, long0, boolean0);
      assertEquals((-1566L), updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(updateResponse0);
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("RMAm>8O", updateResponse0.getId());
      assertEquals((-1566L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      String string7 = updateResponse0.getType();
      assertEquals((-1566L), updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertSame(string5, string2);
      assertSame(string5, string7);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertSame(string7, string2);
      assertSame(string7, string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("RMAm>8O", updateResponse0.getId());
      assertEquals((-1566L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", string7);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string0, string0, updateResponse0.version, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      
      String string1 = indexResponse0.toString();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,A4l;b2|J.5T:PM,id=,A4l;b2|J.5T:PM,version=0,created=true,seqNo=0,shards=null]", string1);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(updateResponse0.type);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      
      Map<String, String> map0 = null;
      updateResponse0.seqNo = updateResponse0.version;
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(updateResponse0.type);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotNull(xContentBuilder2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", string0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      long long0 = updateResponse0.getSeqNo();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, long0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(pipedOutputStream0);
      assertNotNull(outputStreamStreamOutput0);
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(outputStreamStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      String string0 = "6d{f(ucKb!V~?r";
      File file0 = MockFile.createTempFile(string0, string0);
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/6d{f(ucKb!V~?r06d{f(ucKb!V~?r", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("6d{f(ucKb!V~?r06d{f(ucKb!V~?r", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(mockFileInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/6d{f(ucKb!V~?r06d{f(ucKb!V~?r", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("6d{f(ucKb!V~?r06d{f(ucKb!V~?r", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, mockFileInputStream0.available());
      
      try { 
        indexResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", string0);
      
      DocWriteResponse.Fields docWriteResponse_Fields1 = new DocWriteResponse.Fields();
      assertFalse(docWriteResponse_Fields1.equals((Object)docWriteResponse_Fields0));
      assertNotNull(docWriteResponse_Fields1);
      assertEquals("_index", docWriteResponse_Fields1.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields1.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields1.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields1.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields1.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields1.get_ID());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      boolean boolean0 = indexResponse0.isCreated();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(boolean0);
      
      String string1 = "";
      String string2 = "";
      long long0 = 0L;
      DeleteResponse deleteResponse0 = new DeleteResponse(indexResponse0.shardId, string1, string2, indexResponse0.seqNo, long0, boolean0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(deleteResponse0);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(404, restStatus0.getStatus());
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      
      deleteResponse0.shardId = updateResponse0.shardId;
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      
      boolean boolean0 = deleteResponse0.isFound();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(boolean0);
      
      boolean boolean1 = updateResponse0.isCreated();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertFalse(boolean1);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_seq_no", string0);
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", string0);
      
      long long0 = updateResponse0.getVersion();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, long0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      // Undeclared exception!
      try { 
        updateResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      
      String string0 = null;
      indexResponse0.type = string0;
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      
      String string1 = indexResponse0.getType();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNull(string1);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      TreeSet<ChannelBuffer> treeSet0 = new TreeSet<ChannelBuffer>();
      assertNotNull(treeSet0);
      
      Vector<ChannelBuffer> vector0 = new Vector<ChannelBuffer>(treeSet0);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      
      boolean boolean0 = true;
      CompositeChannelBuffer compositeChannelBuffer0 = new CompositeChannelBuffer(byteOrder0, vector0, boolean0);
      assertNotNull(compositeChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertFalse(compositeChannelBuffer0.isDirect());
      assertEquals(0, compositeChannelBuffer0.readableBytes());
      assertEquals(0, compositeChannelBuffer0.readerIndex());
      assertEquals(0, compositeChannelBuffer0.numComponents());
      assertEquals(0, compositeChannelBuffer0.capacity());
      assertEquals(0, compositeChannelBuffer0.writerIndex());
      assertFalse(compositeChannelBuffer0.readable());
      assertFalse(compositeChannelBuffer0.hasArray());
      
      int int0 = 1665;
      // Undeclared exception!
      try { 
        compositeChannelBuffer0.toByteBuffer(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Too many bytes to convert - Needs3330, maximum is 0
         //
         verifyException("org.jboss.netty.buffer.CompositeChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      
      VersionType versionType0 = VersionType.EXTERNAL;
      DeleteRequest deleteRequest1 = deleteRequest0.versionType(versionType0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      
      String string1 = null;
      DeleteRequest deleteRequest2 = deleteRequest1.type(string1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotNull(deleteRequest2);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals((-3L), deleteRequest2.version());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNull(shardId0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals((-3L), deleteRequest2.version());
      
      String string2 = "";
      long long0 = 1638L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string2, long0, boolean0);
      assertEquals(1638L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(1638L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(1638L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNotSame(string0, string2);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(1638L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(RestStatus.OK, restStatus0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string3 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_shard_id", string3);
      
      String string4 = updateResponse0.getType();
      assertEquals(1638L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(1638L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", string4);
      
      long long1 = updateResponse0.getVersion();
      assertEquals(1638L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertTrue(long1 == long0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(1638L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(1638L, long1);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      int int0 = 141;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=141 cap=141]", byteBuffer0.toString());
      assertEquals(141, byteBuffer0.capacity());
      assertEquals(141, byteBuffer0.remaining());
      assertEquals(141, byteBuffer0.limit());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=141 cap=141]", byteBuffer0.toString());
      assertEquals(141, byteBuffer0.capacity());
      assertEquals(141, byteBuffer0.remaining());
      assertEquals(141, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      int int1 = byteBufferBytesReference0.length();
      assertTrue(int1 == int0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=141 cap=141]", byteBuffer0.toString());
      assertEquals(141, byteBuffer0.capacity());
      assertEquals(141, byteBuffer0.remaining());
      assertEquals(141, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(141, int1);
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertTrue(int0 == int1);
      assertNotNull(streamInput0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=141 cap=141]", byteBuffer0.toString());
      assertEquals(141, byteBuffer0.capacity());
      assertEquals(141, byteBuffer0.remaining());
      assertEquals(141, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      boolean boolean0 = streamInput0.readBoolean();
      assertTrue(int0 == int1);
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=141 cap=141]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(141, byteBuffer0.capacity());
      assertEquals(140, byteBuffer0.remaining());
      assertEquals(141, byteBuffer0.limit());
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertFalse(boolean0);
      
      updateResponse0.readFrom(streamInput0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertTrue(int0 == int1);
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=13 lim=141 cap=141]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(128, byteBuffer0.remaining());
      assertEquals(141, byteBuffer0.capacity());
      assertEquals(13, byteBuffer0.position());
      assertEquals(141, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      int int2 = (-561);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        byteBuffer0.putLong(int2, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      
      String string0 = indexResponse0.getId();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNull(string0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_version", string0);
      
      ShardId shardId0 = null;
      String string1 = "jU(";
      long long0 = (-1L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, docWriteResponse_Fields0._ID, string1, long0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-1L), updateResponse0.version);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals("jU(", updateResponse0.getId());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      
      String string2 = updateResponse0.getId();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-1L), updateResponse0.version);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals("jU(", updateResponse0.getId());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("jU(", string2);
      
      long long1 = updateResponse0.getSeqNo();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-1L), updateResponse0.version);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long1 == long0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals("jU(", updateResponse0.getId());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals((-2L), long1);
      
      String string3 = null;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, docWriteResponse_Fields0._TYPE, string3, updateResponse0.seqNo, updateResponse0.seqNo, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-1L), updateResponse0.version);
      assertEquals((-2L), deleteResponse0.seqNo);
      assertEquals((-2L), deleteResponse0.version);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertNotNull(deleteResponse0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals("jU(", updateResponse0.getId());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_type", deleteResponse0.getType());
      assertEquals((-2L), deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals((-2L), deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      String string0 = updateResponse0.getType();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNull(string0);
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      byte[] byteArray0 = new byte[0];
      int int0 = 0;
      int int1 = 564;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(streamInput0);
      
      Class<QueryRescorerBuilder> class0 = QueryRescorerBuilder.class;
      try { 
        streamInput0.readOptionalNamedWriteable(class0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "_version";
      String string1 = "org.elasticsearch.action.DocWriteResponse";
      int int0 = 17;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(17, shardId0.id());
      assertEquals(17, shardId0.getId());
      
      long long0 = (-687L);
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long0, int0, boolean0);
      assertEquals(17L, indexResponse0.version);
      assertEquals((-687L), indexResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexResponse0);
      assertEquals(17, shardId0.id());
      assertEquals(17, shardId0.getId());
      assertEquals("_version", indexResponse0.getId());
      assertEquals((-687L), indexResponse0.getSeqNo());
      assertEquals("_version", indexResponse0.getType());
      assertEquals(17L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      
      String string2 = indexResponse0.getIndex();
      assertEquals(17L, indexResponse0.version);
      assertEquals((-687L), indexResponse0.seqNo);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(17, shardId0.id());
      assertEquals(17, shardId0.getId());
      assertEquals("_version", indexResponse0.getId());
      assertEquals((-687L), indexResponse0.getSeqNo());
      assertEquals("_version", indexResponse0.getType());
      assertEquals(17L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("_version", string2);
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      int int0 = 1559;
      int int1 = 352;
      String string0 = ".";
      TransportException transportException0 = new TransportException(string0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotNull(transportException0);
      
      ParsingException parsingException0 = new ParsingException(int0, int1, string0, transportException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(parsingException0);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(shardId0);
      assertEquals(1559, parsingException0.getLineNumber());
      assertEquals(352, parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      
      String string1 = null;
      long long0 = 0L;
      long long1 = 2297L;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, string0, long0, long1, parsingException0.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(2297L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1559, parsingException0.getLineNumber());
      assertEquals(352, parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(2297L, updateResponse0.getVersion());
      assertEquals(".", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      int int2 = 0;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertNull(shardId0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      
      int int0 = 505;
      ShardId shardId1 = null;
      try {
        shardId1 = new ShardId(deleteResponse0.id, deleteResponse0.id, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      String string0 = "_version";
      deleteResponse0.type = string0;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, long0);
      
      String string1 = ": contains segment over maxMergeSize or maxMergeDocs; skipping";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(deleteResponse0.shardId, deleteResponse0.id, string1, deleteResponse0.seqNo, boolean0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(": contains segment over maxMergeSize or maxMergeDocs; skipping", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(": contains segment over maxMergeSize or maxMergeDocs; skipping", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      int int0 = 547;
      BytesRef bytesRef0 = new BytesRef(byteArray0, byteArray0[0], int0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(bytesRef0);
      
      BytesRef bytesRef1 = BytesRef.deepCopyOf(bytesRef0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, bytesRef1.offset);
      assertEquals(547, bytesRef1.length);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(bytesRef1, bytesRef0);
      assertNotSame(bytesRef0, bytesRef1);
      assertNotNull(bytesRef1);
      
      boolean boolean2 = false;
      BytesArray bytesArray0 = new BytesArray(bytesRef0, boolean2);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertNotNull(bytesArray0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(547, bytesArray0.length());
      assertEquals(1, bytesArray0.arrayOffset());
      
      BytesArray bytesArray1 = bytesArray0.copyBytesArray();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray1, bytesArray0);
      assertNotSame(bytesRef0, bytesRef1);
      assertTrue(boolean2 == boolean1);
      assertNotNull(bytesArray1);
      assertTrue(bytesArray0.hasArray());
      assertEquals(547, bytesArray0.length());
      assertEquals(1, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(547, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      
      BytesRef bytesRef2 = bytesArray1.toBytesRef();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, bytesRef2.offset);
      assertEquals(547, bytesRef2.length);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray1, bytesArray0);
      assertNotSame(bytesRef2, bytesRef1);
      assertNotSame(bytesRef2, bytesRef0);
      assertNotSame(bytesRef0, bytesRef1);
      assertNotSame(bytesRef0, bytesRef2);
      assertTrue(boolean2 == boolean1);
      assertTrue(bytesRef2.equals((Object)bytesRef1));
      assertNotNull(bytesRef2);
      assertTrue(bytesArray0.hasArray());
      assertEquals(547, bytesArray0.length());
      assertEquals(1, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(547, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      
      BytesRef bytesRef3 = bytesRef0.clone();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(1, bytesRef3.offset);
      assertEquals(547, bytesRef3.length);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(bytesRef3, bytesRef1);
      assertNotSame(bytesRef3, bytesRef2);
      assertNotSame(bytesRef3, bytesRef0);
      assertNotSame(bytesRef0, bytesRef1);
      assertNotSame(bytesRef0, bytesRef2);
      assertNotSame(bytesRef0, bytesRef3);
      assertNotNull(bytesRef3);
      
      BytesArray bytesArray2 = bytesArray1.toBytesArray();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray0, bytesArray2);
      assertSame(bytesArray1, bytesArray2);
      assertNotSame(bytesArray1, bytesArray0);
      assertSame(bytesArray2, bytesArray1);
      assertNotSame(bytesArray2, bytesArray0);
      assertNotSame(bytesRef0, bytesRef1);
      assertNotSame(bytesRef0, bytesRef2);
      assertNotSame(bytesRef0, bytesRef3);
      assertTrue(boolean2 == boolean1);
      assertNotNull(bytesArray2);
      assertTrue(bytesArray0.hasArray());
      assertEquals(547, bytesArray0.length());
      assertEquals(1, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(547, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      assertTrue(bytesArray2.hasArray());
      assertEquals(0, bytesArray2.arrayOffset());
      assertEquals(547, bytesArray2.length());
      
      StreamInput streamInput0 = bytesArray2.streamInput();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray0, bytesArray2);
      assertSame(bytesArray1, bytesArray2);
      assertNotSame(bytesArray1, bytesArray0);
      assertSame(bytesArray2, bytesArray1);
      assertNotSame(bytesArray2, bytesArray0);
      assertNotSame(bytesRef0, bytesRef1);
      assertNotSame(bytesRef0, bytesRef2);
      assertNotSame(bytesRef0, bytesRef3);
      assertTrue(boolean2 == boolean1);
      assertNotNull(streamInput0);
      assertTrue(bytesArray0.hasArray());
      assertEquals(547, bytesArray0.length());
      assertEquals(1, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(547, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      assertTrue(bytesArray2.hasArray());
      assertEquals(0, bytesArray2.arrayOffset());
      assertEquals(547, bytesArray2.length());
      
      updateResponse0.readFrom(streamInput0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(1, bytesRef0.offset);
      assertEquals(547, bytesRef0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray0, bytesArray2);
      assertSame(bytesArray1, bytesArray2);
      assertNotSame(bytesArray1, bytesArray0);
      assertNotSame(string1, string0);
      assertSame(bytesArray2, bytesArray1);
      assertNotSame(bytesArray2, bytesArray0);
      assertNotSame(bytesRef0, bytesRef1);
      assertNotSame(bytesRef0, bytesRef2);
      assertNotSame(bytesRef0, bytesRef3);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertTrue(bytesArray0.hasArray());
      assertEquals(547, bytesArray0.length());
      assertEquals(1, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(547, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      assertTrue(bytesArray2.hasArray());
      assertEquals(0, bytesArray2.arrayOffset());
      assertEquals(547, bytesArray2.length());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(404, restStatus0.getStatus());
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      
      String string2 = updateResponse0.toString();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("UpdateResponse[index=,type=,id=,version=0,created=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string2);
      
      ShardId shardId0 = updateResponse0.getShardId();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      
      String string3 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(string3, deleteResponse0.type);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"_version\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = ";K!s";
      String string1 = "";
      long long0 = 1275L;
      long long1 = (-2144L);
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long0, long1, boolean0);
      assertEquals((-2144L), deleteResponse0.version);
      assertEquals(1275L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(deleteResponse0);
      assertEquals("", deleteResponse0.getId());
      assertEquals(";K!s", deleteResponse0.getType());
      assertEquals((-2144L), deleteResponse0.getVersion());
      assertEquals(1275L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)12;
      byteArray0[0] = byte0;
      byte byte1 = (byte)50;
      byteArray0[1] = byte1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte1, byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)12, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byte1 == byte0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-48), byteArrayInputStream0.available());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte)50}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byte1 == byte0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals((-48), byteArrayInputStream0.available());
      
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(404, restStatus0.getStatus());
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertNotNull(jsonXContent0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      
      String[] stringArray0 = null;
      boolean boolean0 = false;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0, boolean0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertNotNull(xContentBuilder0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "_shard_id";
      int int0 = (-1313);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1313), shardId0.id());
      assertEquals((-1313), shardId0.getId());
      
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertEquals((-1313L), deleteResponse0.seqNo);
      assertEquals((-1313L), deleteResponse0.version);
      assertNotNull(deleteResponse0);
      assertEquals((-1313), shardId0.id());
      assertEquals((-1313), shardId0.getId());
      assertEquals((-1313L), deleteResponse0.getVersion());
      assertEquals((-1313L), deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_shard_id", deleteResponse0.getId());
      assertEquals("_shard_id", deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals((-1313L), deleteResponse0.seqNo);
      assertEquals((-1313L), deleteResponse0.version);
      assertEquals((-1313), shardId0.id());
      assertEquals((-1313), shardId0.getId());
      assertEquals((-1313L), deleteResponse0.getVersion());
      assertEquals((-1313L), deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_shard_id", deleteResponse0.getId());
      assertEquals("_shard_id", deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals((-1313L), long0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = deleteResponse0.type;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = deleteResponse0.id;
      stringArray0[4] = deleteResponse0.id;
      bytesStreamOutput0.writeStringArray(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(51L, bytesStreamOutput0.position());
      assertEquals(51, bytesStreamOutput0.size());
      
      byte byte0 = (byte)0;
      bytesStreamOutput0.writeByte(byte0);
      assertEquals(52, bytesStreamOutput0.size());
      assertEquals(52L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      long long0 = 617L;
      deleteResponse0.seqNo = long0;
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(617L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      
      long long1 = deleteResponse0.getSeqNo();
      assertEquals(617L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertTrue(long1 == long0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(617L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(617L, long1);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      XContentBuilder xContentBuilder0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpVersion.valueOf(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("org.jboss.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "All readers must have same maxDoc: ";
      String string1 = "org.elasticsearch.cluster.metadata.MetaData$MetaDataDiff";
      int int0 = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      
      String string2 = "";
      String string3 = "[.V0W%";
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string3, int0, int0, boolean0);
      assertEquals(1L, deleteResponse0.seqNo);
      assertEquals(1L, deleteResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(deleteResponse0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertTrue(deleteResponse0.isFound());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertEquals("[.V0W%", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.getVersion());
      
      String string4 = deleteResponse0.toString();
      assertEquals(1L, deleteResponse0.seqNo);
      assertEquals(1L, deleteResponse0.version);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertTrue(deleteResponse0.isFound());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertEquals("[.V0W%", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.getVersion());
      assertEquals("DeleteResponse[index=All readers must have same maxDoc: ,type=,id=[.V0W%,version=1,found=true,shards=null]", string4);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-81);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-66);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      int int1 = shardId0.compareTo(deleteResponse0.shardId);
      assertEquals(1L, deleteResponse0.seqNo);
      assertEquals(1L, deleteResponse0.version);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertTrue(deleteResponse0.isFound());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertEquals("[.V0W%", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.getVersion());
      assertEquals(0, int1);
      
      byteArray0[2] = byte2;
      deleteResponse0.type = string2;
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertTrue(deleteResponse0.isFound());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertEquals("[.V0W%", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.getVersion());
      
      byteArray0[3] = byteArray0[1];
      byte byte3 = (byte) (-41);
      byteArray0[4] = byte3;
      byte byte4 = (byte)0;
      byte byte5 = (byte)0;
      byteArray0[6] = byte5;
      ShardId shardId1 = deleteResponse0.getShardId();
      assertEquals(1L, deleteResponse0.seqNo);
      assertEquals(1L, deleteResponse0.version);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(shardId0, shardId1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(shardId1, shardId0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(shardId1);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertTrue(deleteResponse0.isFound());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertEquals("[.V0W%", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.getVersion());
      assertEquals(1, shardId1.id());
      assertEquals(1, shardId1.getId());
      
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-66), (byte) (-1), (byte) (-66), (byte) (-41), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(streamInput0);
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      
      VersionType versionType0 = VersionType.EXTERNAL;
      String string1 = null;
      DeleteRequest deleteRequest1 = deleteRequest0.type(string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(shardId0);
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      
      String string2 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      indexResponse0.shardId = shardId0;
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      TransportAddress transportAddress0 = indexResponse0.remoteAddress();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNull(transportAddress0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      deleteRequest1.remoteAddress(transportAddress0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotSame(string0, string2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertFalse(string0.equals((Object)string2));
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      String string3 = "&9\\LoC+v`";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean0);
      
      long long0 = 1638L;
      DeleteRequest deleteRequest2 = deleteRequest1.id(string3);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(deleteRequest2);
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("&9\\LoC+v`", deleteRequest2.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertNull(deleteRequest0.routing());
      assertEquals("&9\\LoC+v`", deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("&9\\LoC+v`", deleteRequest1.id());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string2, long0, boolean1);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(1638L, updateResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(updateResponse0);
      assertNull(deleteRequest0.routing());
      assertEquals("&9\\LoC+v`", deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(1638L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("&9\\LoC+v`", deleteRequest1.id());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(1638L, updateResponse0.version);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNull(deleteRequest0.routing());
      assertEquals("&9\\LoC+v`", deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(1638L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(200, restStatus0.getStatus());
      assertEquals("&9\\LoC+v`", deleteRequest1.id());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals(RestStatus.OK, restStatus0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string4 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", string4);
      
      String string5 = updateResponse0.getType();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(1638L, updateResponse0.version);
      assertNotSame(string0, string2);
      assertSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertTrue(boolean1 == boolean0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(string5);
      assertNull(deleteRequest0.routing());
      assertEquals("&9\\LoC+v`", deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(1638L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("&9\\LoC+v`", deleteRequest1.id());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals("org.elasticsearch.action.DocWriteResponse", string5);
      
      String string6 = updateResponse0.getId();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(1638L, updateResponse0.version);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertTrue(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertNull(deleteRequest0.routing());
      assertEquals("&9\\LoC+v`", deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(1638L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("&9\\LoC+v`", deleteRequest1.id());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals("", string6);
      
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1638L, (long)long1);
      
      String string7 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", string7);
      
      IndexResponse indexResponse1 = new IndexResponse();
      assertEquals(0L, indexResponse1.seqNo);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotNull(indexResponse1);
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getSeqNo());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      long long0 = (-1461L);
      String string0 = docWriteResponse_Fields0.get_ID();
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_id", string0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string1 = "";
      String string2 = "2h1M;o>@Gh3";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string1, string2, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string3 = "-~dGSP\\";
      String string4 = "";
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string3, string4, int0, int0, boolean0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals("-~dGSP\\", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      String string5 = updateResponse0.getIndex();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertSame(string4, string5);
      assertNotSame(string4, string3);
      assertSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(string5, string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals("-~dGSP\\", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("", string5);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      String string1 = "";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string2 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("[,A4l;b2|J.5T:PM][0]", string2);
      
      long long0 = (-909L);
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string1, long0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      
      String string3 = "QsquWj;zNrnWm";
      long long1 = 1426L;
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string1, string3, updateResponse0.version, long1, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertEquals((-909L), indexResponse0.seqNo);
      assertEquals(1426L, indexResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(long1 == long0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals(1426L, indexResponse0.getVersion());
      assertEquals((-909L), indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals("QsquWj;zNrnWm", indexResponse0.getId());
      
      String string4 = updateResponse0.getIndex();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", string4);
      
      String string5 = indexResponse0.toString();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertEquals((-909L), indexResponse0.seqNo);
      assertEquals(1426L, indexResponse0.version);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(long1 == long0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals(1426L, indexResponse0.getVersion());
      assertEquals((-909L), indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals("QsquWj;zNrnWm", indexResponse0.getId());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,id=QsquWj;zNrnWm,version=1426,created=true,seqNo=-909,shards=null]", string5);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      try { 
        updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      long long0 = updateResponse0.getSeqNo();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, long0);
      
      int int0 = 412;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = false;
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      String string0 = "UTC chronology must not be null";
      CircuitBreakerStats circuitBreakerStats0 = noneCircuitBreakerService0.stats(string0);
      assertNotNull(circuitBreakerStats0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals("fielddata", circuitBreakerStats0.getName());
      assertEquals((-1L), circuitBreakerStats0.getEstimated());
      assertEquals(0L, circuitBreakerStats0.getTrippedCount());
      assertEquals((-1L), circuitBreakerStats0.getLimit());
      assertEquals(0.0, circuitBreakerStats0.getOverhead(), 0.01);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(bigArrays0.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(byteBuffer0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.remaining());
      assertEquals(16384, byteBuffer0.limit());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.remaining());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(bytesArray0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.remaining());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(streamInput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.remaining());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      updateResponse0.readFrom(streamInput0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(16384, byteBuffer0.remaining());
      assertEquals(16384, byteBuffer0.limit());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(12, releasableBytesStreamOutput0.size());
      assertEquals(12L, releasableBytesStreamOutput0.position());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      
      long long0 = updateResponse0.getSeqNo();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, long0);
      
      int int0 = 412;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = false;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      String string0 = "UTC chronology must not be null";
      CircuitBreakerStats circuitBreakerStats0 = noneCircuitBreakerService0.stats(string0);
      assertNotNull(circuitBreakerStats0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, circuitBreakerStats0.getTrippedCount());
      assertEquals((-1L), circuitBreakerStats0.getLimit());
      assertEquals("fielddata", circuitBreakerStats0.getName());
      assertEquals((-1L), circuitBreakerStats0.getEstimated());
      assertEquals(0.0, circuitBreakerStats0.getOverhead(), 0.01);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(bigArrays0.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(16384, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(byteBufferBytesReference0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(16384, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bytesArray0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(16384, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      
      int int1 = 0;
      byte byte0 = byteBuffer0.get(int1);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(int1 == int0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(16384, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertEquals((byte)0, byte0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(streamInput0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(16384, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      
      updateResponse0.readFrom(streamInput0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(16384, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(16384, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(16384, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(int0 == int1);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(int0 == int1);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(12, releasableBytesStreamOutput0.size());
      assertEquals(12L, releasableBytesStreamOutput0.position());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNull(getResult0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(int0 == int1);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(24, releasableBytesStreamOutput0.size());
      assertEquals(24L, releasableBytesStreamOutput0.position());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      String string1 = "";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string2 = shardId0.toString();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("[,A4l;b2|J.5T:PM][0]", string2);
      
      long long0 = (-909L);
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string1, long0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      String string3 = "QsquWj;zNrnWm";
      long long1 = 1422L;
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string1, string3, updateResponse0.version, long1, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertEquals(1422L, indexResponse0.version);
      assertEquals((-909L), indexResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(long1 == long0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(1422L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals((-909L), indexResponse0.getSeqNo());
      assertEquals("QsquWj;zNrnWm", indexResponse0.getId());
      
      String string4 = updateResponse0.getIndex();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string4, string1);
      assertSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", string4);
      
      String string5 = indexResponse0.toString();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((-909L), updateResponse0.version);
      assertEquals(1422L, indexResponse0.version);
      assertEquals((-909L), indexResponse0.seqNo);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-909L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(1422L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals((-909L), indexResponse0.getSeqNo());
      assertEquals("QsquWj;zNrnWm", indexResponse0.getId());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,id=QsquWj;zNrnWm,version=1422,created=true,seqNo=-909,shards=null]", string5);
      
      XContentBuilder xContentBuilder0 = YamlXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=,A4l;b2|J.5T:PM)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      Long long0 = new Long(updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      int int0 = 412;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = false;
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      String string0 = "UTC chronology must not be null";
      CircuitBreakerStats circuitBreakerStats0 = noneCircuitBreakerService0.stats(string0);
      assertNotNull(circuitBreakerStats0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, circuitBreakerStats0.getTrippedCount());
      assertEquals((-1L), circuitBreakerStats0.getEstimated());
      assertEquals(0.0, circuitBreakerStats0.getOverhead(), 0.01);
      assertEquals((-1L), circuitBreakerStats0.getLimit());
      assertEquals("fielddata", circuitBreakerStats0.getName());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(bigArrays0.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(byteBuffer0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.limit());
      assertEquals(16384, byteBuffer0.capacity());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.limit());
      assertEquals(16384, byteBuffer0.capacity());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(bytesArray0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.limit());
      assertEquals(16384, byteBuffer0.capacity());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(16384, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(streamInput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.limit());
      assertEquals(16384, byteBuffer0.capacity());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(16384, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      
      updateResponse0.readFrom(streamInput0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16384 cap=16384]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(16384, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16384, byteBuffer0.limit());
      assertEquals(16384, byteBuffer0.capacity());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(16384, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(12, releasableBytesStreamOutput0.size());
      assertEquals(12L, releasableBytesStreamOutput0.position());
      
      String string1 = "";
      String string2 = "jU}\"@D:";
      long long1 = 923L;
      boolean boolean1 = true;
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string1, string2, long1, long1, boolean1);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(923L, indexResponse0.version);
      assertEquals(923L, indexResponse0.seqNo);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("jU}\"@D:", indexResponse0.getId());
      assertEquals(923L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getType());
      assertEquals(923L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      boolean boolean2 = indexResponse0.isCreated();
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(923L, indexResponse0.version);
      assertEquals(923L, indexResponse0.seqNo);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("jU}\"@D:", indexResponse0.getId());
      assertEquals(923L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getType());
      assertEquals(923L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertTrue(boolean2);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = null;
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string0 = DocWriteResponse.Fields._SHARD_ID;
      assertNotNull(string0);
      assertEquals("_shard_id", string0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-17);
      byteArray0[0] = byte0;
      int int0 = 53;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte0, int0);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(streamInput0);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", string0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(mockFileInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        indexResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string0, string0, updateResponse0.version, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      LocalTransportAddress localTransportAddress0 = new LocalTransportAddress(updateResponse0.id);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertNotNull(localTransportAddress0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(",A4l;b2|J.5T:PM", localTransportAddress0.id());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      
      indexResponse0.remoteAddress((TransportAddress) localTransportAddress0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(",A4l;b2|J.5T:PM", localTransportAddress0.id());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      
      String string1 = indexResponse0.toString();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,A4l;b2|J.5T:PM,id=,A4l;b2|J.5T:PM,version=0,created=true,seqNo=0,shards=null]", string1);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(updateResponse0.type);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      
      Random.setNextRandom(localTransportAddress0.TYPE_ID);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(",A4l;b2|J.5T:PM", localTransportAddress0.id());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      boolean boolean0 = true;
      String string1 = null;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, int0, boolean0);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string0, string0, updateResponse0.version, int0, boolean0);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      String string2 = indexResponse0.toString();
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,A4l;b2|J.5T:PM,id=,A4l;b2|J.5T:PM,version=0,created=true,seqNo=0,shards=null]", string2);
      
      LocalTransportAddress localTransportAddress0 = new LocalTransportAddress(updateResponse0.id);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertFalse(string0.equals((Object)string2));
      assertNotNull(localTransportAddress0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertNull(localTransportAddress0.id());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      
      indexResponse0.remoteAddress((TransportAddress) localTransportAddress0);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertNull(localTransportAddress0.id());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      
      String string3 = indexResponse0.toString();
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,A4l;b2|J.5T:PM,id=,A4l;b2|J.5T:PM,version=0,created=true,seqNo=0,shards=null]", string3);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(updateResponse0.type);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(xContentBuilder1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      Random.setNextRandom(localTransportAddress0.TYPE_ID);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertNull(localTransportAddress0.id());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(xContentBuilder2);
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string0, string0, updateResponse0.version, int0, boolean0);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      String string1 = indexResponse0.toString();
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,A4l;b2|J.5T:PM,id=,A4l;b2|J.5T:PM,version=0,created=true,seqNo=0,shards=null]", string1);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(updateResponse0.type);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      Map<String, String> map0 = null;
      updateResponse0.seqNo = indexResponse0.seqNo;
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = ",A4l;b2|J.5T:PM";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, string0, string0, updateResponse0.version, int0, boolean0);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      
      long long0 = 1220L;
      indexResponse0.seqNo = long0;
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(1220L, indexResponse0.getSeqNo());
      
      String string1 = indexResponse0.toString();
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(1220L, indexResponse0.seqNo);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(1220L, indexResponse0.getSeqNo());
      assertEquals("IndexResponse[index=,A4l;b2|J.5T:PM,type=,A4l;b2|J.5T:PM,id=,A4l;b2|J.5T:PM,version=0,created=true,seqNo=1220,shards=null]", string1);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(updateResponse0.type);
      assertEquals(0L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      
      Map<String, String> map0 = null;
      updateResponse0.seqNo = indexResponse0.seqNo;
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(1220L, updateResponse0.getSeqNo());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(",A4l;b2|J.5T:PM", indexResponse0.getId());
      assertEquals(1220L, indexResponse0.getSeqNo());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(1220L, updateResponse0.seqNo);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(xContentBuilder2);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(",A4l;b2|J.5T:PM", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(1220L, updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
  }
}
