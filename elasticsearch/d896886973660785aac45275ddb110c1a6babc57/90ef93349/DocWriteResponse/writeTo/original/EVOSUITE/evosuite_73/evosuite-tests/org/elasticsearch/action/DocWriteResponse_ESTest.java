/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 05:33:10 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.sql.SQLNonTransientException;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.Predicate;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.Version;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.routing.allocation.decider.Decision;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.settings.IndexScopedSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.text.Text;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.unit.ByteSizeValue;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetField;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.query.QueryParseContext;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.index.shard.ShardPath;
import org.elasticsearch.index.store.FsDirectoryService;
import org.elasticsearch.index.store.IndexStore;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.metrics.sum.SumAggregationBuilder;
import org.elasticsearch.search.aggregations.pipeline.bucketscript.BucketScriptPipelineAggregatorBuilder;
import org.elasticsearch.search.aggregations.support.ValuesSource;
import org.elasticsearch.search.internal.ShardSearchTransportRequest;
import org.elasticsearch.search.rescore.QueryRescorerBuilder;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.elasticsearch.transport.TransportRequestOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "org.elasticsearch.aption.DocWriteRsponse";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getType());
      
      String string1 = indexResponse0.toString();
      assertNotNull(string1);
      assertEquals("IndexResponse[index=org.elasticsearch.aption.DocWriteRsponse,type=org.elasticsearch.aption.DocWriteRsponse,id=org.elasticsearch.aption.DocWriteRsponse,version=0,created=true,seqNo=0,shards=null]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getType());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(172L, bytesStreamOutput0.position());
      assertEquals(172, bytesStreamOutput0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0);
      assertNotNull(xContentBuilder0);
      assertEquals(172L, bytesStreamOutput0.position());
      assertEquals(172, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      indexResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getType());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(string0);
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(172L, bytesStreamOutput0.position());
      assertEquals(172, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(string0.equals((Object)string1));
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(172L, bytesStreamOutput0.position());
      assertEquals(172, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder3 = indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder3);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(XContentType.CBOR, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.aption.DocWriteRsponse", indexResponse0.getType());
      assertEquals(172L, bytesStreamOutput0.position());
      assertEquals(172, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertNull(shardId0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-51);
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      byte byte2 = (byte)39;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-124);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-84);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-24);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-43);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-57);
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)13, (byte)39, (byte) (-124), (byte) (-84), (byte) (-24), (byte) (-43), (byte) (-57), (byte)0}, byteArray0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)13, (byte)39, (byte) (-124), (byte) (-84), (byte) (-24), (byte) (-43), (byte) (-57), (byte)0}, byteArray0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertNotNull(bytesArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)13, (byte)39, (byte) (-124), (byte) (-84), (byte) (-24), (byte) (-43), (byte) (-57), (byte)0}, byteArray0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(9, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)13, (byte)39, (byte) (-124), (byte) (-84), (byte) (-24), (byte) (-43), (byte) (-57), (byte)0}, byteArray0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(9, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      
      // Undeclared exception!
      indexResponse0.readFrom(streamInput0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      ByteSizeValue byteSizeValue0 = null;
      ByteSizeValue byteSizeValue1 = settings0.getAsBytesSize(indexAction0.NAME, byteSizeValue0);
      assertNull(byteSizeValue1);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      TransportRequestOptions transportRequestOptions0 = indexAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(transportRequestOptions0.compress());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      long long0 = indexResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = null;
      long long0 = (-1364L);
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertTrue(indexResponse0.isCreated());
      assertEquals((-1364L), indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getType());
      assertEquals((-1364L), indexResponse0.getVersion());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertTrue(indexResponse0.isCreated());
      assertEquals((-1364L), indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getType());
      assertEquals((-1364L), indexResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "_id";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string1 = "LlVKvtL\"rQ*]WS2{g";
      String string2 = "";
      long long0 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = indexResponse0.toString();
      assertNotNull(string3);
      assertEquals("IndexResponse[index=_id,type=LlVKvtL\"rQ*]WS2{g,id=,version=0,created=true,seqNo=0,shards=null]", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = indexResponse0.toString();
      assertNotNull(string4);
      assertEquals("IndexResponse[index=_id,type=LlVKvtL\"rQ*]WS2{g,id=,version=0,created=true,seqNo=0,shards=null]", string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = indexResponse0.getId();
      assertNotNull(string5);
      assertEquals("", string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string2, string4);
      assertSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      BigArrays bigArrays1 = bigArrays0.withCircuitBreaking();
      assertNotNull(bigArrays1);
      assertNotSame(bigArrays0, bigArrays1);
      assertNotSame(bigArrays1, bigArrays0);
      assertFalse(bigArrays1.equals((Object)bigArrays0));
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays1);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertFalse(bigArrays0.equals((Object)bigArrays1));
      assertFalse(bigArrays1.equals((Object)bigArrays0));
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(releasableBytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNotNull(updateRequest0);
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      
      boolean boolean0 = true;
      UpdateRequest updateRequest1 = updateRequest0.detectNoop(boolean0);
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.id());
      
      String string0 = "&e";
      String string1 = null;
      UpdateRequest updateRequest2 = updateRequest1.doc(string0, (Object) string1);
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptString());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.parent());
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(shardId0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptString());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.parent());
      
      String string2 = "&<%0%NPOR:+yu`=";
      long long0 = 2495L;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string1, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptString());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.parent());
      assertTrue(deleteResponse0.isFound());
      assertEquals(2495L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals("&<%0%NPOR:+yu`=", deleteResponse0.getType());
      assertEquals(2495L, deleteResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 1843;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      long long0 = deleteResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      XContentBuilder xContentBuilder0 = YamlXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      String string0 = ", lang: ";
      // Undeclared exception!
      try { 
        Version.fromString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the version needs to contain major, minor, and revision, and optionally the build: , lang: 
         //
         verifyException("org.elasticsearch.Version", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(404, restStatus0.getStatus());
      
      String string0 = deleteResponse0.getId();
      assertNull(string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      boolean boolean0 = deleteResponse0.isFound();
      assertFalse(boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-35);
      byteArray0[4] = byte4;
      byte byte5 = (byte)97;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-90);
      byteArray0[7] = byte7;
      int int0 = (-1);
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, (int) byteArray0[2]);
      assertNotNull(streamInput0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte) (-35), (byte)97, (byte)0, (byte) (-90)}, byteArray0);
      
      try { 
        ReplicationResponse.ShardInfo.readShardInfo(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertNotNull(updateResponse1);
      assertNotSame(updateResponse1, updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse1.getId());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.isCreated());
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      
      ShardId shardId0 = updateResponse1.getShardId();
      assertNull(shardId0);
      assertNotSame(updateResponse1, updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse1.getId());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.isCreated());
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      
      // Undeclared exception!
      try { 
        updateResponse1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertNotNull(updateResponse1);
      assertNotSame(updateResponse1, updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertNull(updateResponse1.getId());
      assertFalse(updateResponse1.isCreated());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus0.getStatus());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      XContentBuilder xContentBuilder0 = null;
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      SocketAddress socketAddress0 = fakeRestRequest0.getRemoteAddress();
      assertNull(socketAddress0);
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Map<String, String> map0 = settings_Builder0.internalMap();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = deleteAction0.NAME;
      stringArray0[1] = deleteAction0.NAME;
      stringArray0[2] = deleteAction0.NAME;
      Settings.Builder settings_Builder1 = settings_Builder0.putArray(deleteAction0.NAME, stringArray0);
      assertNotNull(settings_Builder1);
      assertEquals(3, stringArray0.length);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      Settings settings0 = SettingsFilter.filterSettings(toXContent_MapParams0, settings_Builder0.EMPTY_SETTINGS);
      assertNotNull(settings0);
      assertSame(settings_Builder0, settings_Builder1);
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      TransportRequestOptions transportRequestOptions0 = deleteAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertSame(settings_Builder0, settings_Builder1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(transportRequestOptions0.compress());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      
      DeleteResponse deleteResponse1 = deleteAction0.newResponse();
      assertNotNull(deleteResponse1);
      assertNotSame(deleteResponse1, deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse1.getType());
      assertEquals(0L, deleteResponse1.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertNull(deleteResponse1.getId());
      assertFalse(deleteResponse1.isFound());
      assertEquals(0L, deleteResponse1.getSeqNo());
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      
      int int0 = 1;
      InetSocketTransportAddress inetSocketTransportAddress0 = new InetSocketTransportAddress(inetAddress0, int0);
      assertNotNull(inetSocketTransportAddress0);
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals(1, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      updateResponse0.remoteAddress((TransportAddress) inetSocketTransportAddress0);
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals(1, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      boolean boolean0 = updateResponse0.isCreated();
      assertFalse(boolean0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      XContentBuilder xContentBuilder0 = SmileXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      // Undeclared exception!
      try { 
        deleteResponse1.toXContent(xContentBuilder0, toXContent_MapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-47);
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-80);
      byteArray0[5] = byte5;
      BytesArray bytesArray0 = new BytesArray(byteArray0);
      assertNotNull(bytesArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-47), (byte)1, (byte) (-80)}, byteArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(6, bytesArray0.length());
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) bytesArray0);
      assertNotNull(streamInput0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-47), (byte)1, (byte) (-80)}, byteArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(6, bytesArray0.length());
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "rx'u?$\"/~";
      String string1 = " to Double";
      int int0 = (-1715);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals((-1715), shardId0.id());
      assertEquals((-1715), shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      long long0 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string2, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-1715), shardId0.id());
      assertEquals((-1715), shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long1 = updateResponse0.getSeqNo();
      assertEquals((-2L), long1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals((-1715), shardId0.id());
      assertEquals((-1715), shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      
      String string3 = "l4)Z";
      boolean boolean1 = false;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int1 = 779;
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int1);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(779, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(int1 == int0);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(dynamicChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(779, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertFalse(int1 == int0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        channelBufferBytesReference0.slice(int2, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid readerIndex: 0 - Maximum is -1715
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNotNull(updateRequest0);
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      
      HashMap<ValuesSource.WithScript, QueryRescorerBuilder> hashMap0 = new HashMap<ValuesSource.WithScript, QueryRescorerBuilder>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      UpdateRequest updateRequest1 = updateRequest0.doc((Map) hashMap0);
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      
      String string0 = "";
      UpdateRequest updateRequest2 = updateRequest1.type(string0);
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals("", updateRequest2.type());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.id());
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(shardId0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals("", updateRequest2.type());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.id());
      
      String string1 = "cluster state update task [{}] timed out after [{}]";
      long long0 = (-2L);
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals("", updateRequest2.type());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.id());
      assertEquals("cluster state update task [{}] timed out after [{}]", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      int int0 = 0;
      int int1 = (-1008);
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int1, updateResponse0.EMPTY);
      assertNotNull(replicationResponse_ShardInfo0);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-1008), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      updateResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-1008), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus0.getStatus());
      
      RestStatus restStatus1 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus1);
      assertSame(restStatus1, restStatus0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus1.getStatus());
      
      int int2 = 954;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int2);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(954, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(bigEndianHeapChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(954, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(954, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      
      long long0 = indexResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      
      int int0 = (-1);
      BytesStreamOutput bytesStreamOutput0 = null;
      try {
        bytesStreamOutput0 = new BytesStreamOutput(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.util.BigArrays", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      int int0 = 2175;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2175, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2175 cap=2175]", byteBuffer0.toString());
      assertEquals(2175, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2175, byteBuffer0.remaining());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2175, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2175 cap=2175]", byteBuffer0.toString());
      assertEquals(2175, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2175, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      Text text0 = byteBufferStreamInput0.readOptionalText();
      assertNotNull(text0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2175, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2175, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2171, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=2175 cap=2175]", byteBuffer0.toString());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertFalse(text0.hasString());
      assertTrue(text0.hasBytes());
      
      indexResponse0.readFrom(byteBufferStreamInput0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(2160, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=15 lim=2175 cap=2175]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2175, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2175, byteBuffer0.capacity());
      assertEquals(15, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      TransportRequestOptions transportRequestOptions0 = updateAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(transportRequestOptions0.compress());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte0, (int) byteArray0[0]);
      assertNotNull(streamInput0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "_id";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string1 = "LlVKvtL\"rQ*]WS2{g";
      String string2 = "";
      long long0 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = indexResponse0.getIndex();
      assertNotNull(string3);
      assertEquals("_id", string3);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = indexResponse0.toString();
      assertNotNull(string4);
      assertEquals("IndexResponse[index=_id,type=LlVKvtL\"rQ*]WS2{g,id=,version=0,created=true,seqNo=0,shards=null]", string4);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = indexResponse0.getType();
      assertNotNull(string5);
      assertEquals("LlVKvtL\"rQ*]WS2{g", string5);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string1, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      long long1 = 1824L;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string4, string2, long1, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(deleteResponse0.isFound());
      assertEquals(1824L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertEquals("IndexResponse[index=_id,type=LlVKvtL\"rQ*]WS2{g,id=,version=0,created=true,seqNo=0,shards=null]", deleteResponse0.getType());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(long0 == long1);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "_id";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string1 = "LlVKvtL\"rQ*]WS2{g";
      String string2 = "";
      long long0 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = indexResponse0.toString();
      assertNotNull(string3);
      assertEquals("IndexResponse[index=_id,type=LlVKvtL\"rQ*]WS2{g,id=,version=0,created=true,seqNo=0,shards=null]", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "L<jp>";
      String string5 = "{";
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string4, string5, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals("{", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals("{", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(24, bytesStreamOutput0.size());
      assertEquals(24L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TransportAddress transportAddress0 = null;
      StreamInput streamInput0 = null;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      String string0 = "_version";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      long long0 = 0L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_version", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      String string1 = deleteResponse0.getId();
      assertNotNull(string1);
      assertEquals("_version", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_version", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("_version", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "_id";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string1 = "";
      long long0 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = indexResponse0.toString();
      assertNotNull(string2);
      assertEquals("IndexResponse[index=_id,type=_id,id=,version=0,created=true,seqNo=0,shards=null]", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "L<jp>";
      String string4 = "{";
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string3, string4, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("L<jp>", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("{", updateResponse0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      String string5 = indexResponse0.getIndex();
      assertNotNull(string5);
      assertEquals("_id", string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string5, string3);
      assertSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean0 == boolean1);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("L<jp>", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("{", updateResponse0.getId());
      assertEquals(24L, bytesStreamOutput0.position());
      assertEquals(24, bytesStreamOutput0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "_id";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string1 = "LlVKvtL\"rQ*]WS2{g";
      String string2 = "";
      long long0 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = indexResponse0.toString();
      assertNotNull(string3);
      assertEquals("IndexResponse[index=_id,type=LlVKvtL\"rQ*]WS2{g,id=,version=0,created=true,seqNo=0,shards=null]", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "L<jp>";
      String string5 = "{";
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string4, string5, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("L<jp>", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("{", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      int int1 = 525;
      Integer integer0 = new Integer(int1);
      assertNotNull(integer0);
      assertEquals(525, (int)integer0);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger(string1, integer0);
      assertNotNull(integer1);
      assertEquals(525, (int)integer1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      bytesStreamOutput0.writeOptionalVInt(integer1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertEquals(3, bytesStreamOutput0.size());
      assertEquals(3L, bytesStreamOutput0.position());
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("L<jp>", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("{", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(27, bytesStreamOutput0.size());
      assertEquals(27L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      
      long long1 = updateResponse0.getSeqNo();
      assertEquals((-2L), long1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("L<jp>", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("{", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId1.getId());
      assertEquals(0, shardId1.id());
      assertEquals("L<jp>", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("{", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "_index";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Settings settings0 = null;
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      int int0 = 0;
      XContentLocation xContentLocation0 = new XContentLocation(int0, int0);
      assertNotNull(xContentLocation0);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) evoSuiteFile0;
      objectArray0[1] = (Object) evoSuiteFile0;
      objectArray0[2] = (Object) string0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) evoSuiteFile0;
      objectArray0[5] = (Object) indexAction0;
      objectArray0[6] = (Object) evoSuiteFile0;
      objectArray0[7] = (Object) xContentLocation0;
      objectArray0[8] = (Object) xContentLocation0;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, indexAction0.NAME, objectArray0);
      assertNotNull(parsingException0);
      assertEquals(9, objectArray0.length);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertNull(shardId0);
      assertEquals(9, objectArray0.length);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      String string1 = "$";
      String string2 = "tribe.blocks.read.indices";
      long long0 = 0L;
      long long1 = 2249L;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string2, long0, long1, parsingException0.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertNotNull(deleteResponse0);
      assertEquals(9, objectArray0.length);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals("tribe.blocks.read.indices", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("$", deleteResponse0.getType());
      assertEquals(2249L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      long long2 = deleteResponse0.getVersion();
      assertEquals(2249L, long2);
      assertEquals(9, objectArray0.length);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals("tribe.blocks.read.indices", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("$", deleteResponse0.getType());
      assertEquals(2249L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "";
      String string1 = "b$:_swV";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "y-v1re~`z";
      long long0 = (-5687L);
      long long1 = 86400000000000L;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string3 = shardId0.getIndexName();
      assertNotNull(string3);
      assertEquals("", string3);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string2, long0, long1, boolean1);
      assertNotNull(deleteResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("b$:_swV", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(86400000000000L, deleteResponse0.getVersion());
      assertEquals((-5687L), deleteResponse0.getSeqNo());
      assertEquals("y-v1re~`z", deleteResponse0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(boolean1 == boolean0);
      
      String string4 = deleteResponse0.getIndex();
      assertNotNull(string4);
      assertEquals("", string4);
      assertSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("b$:_swV", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(86400000000000L, deleteResponse0.getVersion());
      assertEquals((-5687L), deleteResponse0.getSeqNo());
      assertEquals("y-v1re~`z", deleteResponse0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      long long2 = deleteResponse0.getVersion();
      assertEquals(86400000000000L, long2);
      assertSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("b$:_swV", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(86400000000000L, deleteResponse0.getVersion());
      assertEquals((-5687L), deleteResponse0.getSeqNo());
      assertEquals("y-v1re~`z", deleteResponse0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(boolean1 == boolean0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)90;
      byteArray0[0] = byte0;
      byte byte1 = (byte)117;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)47;
      byteArray0[3] = byte3;
      byte byte4 = (byte)18;
      byteArray0[4] = byte4;
      byte byte5 = (byte)27;
      byteArray0[5] = byte5;
      byte byte6 = (byte)120;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)117, (byte)0, (byte)47, (byte)18, (byte)27, (byte)120, (byte)0}, byteArray0);
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      String string0 = "w.;%rF/</8xY;";
      String string1 = "";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "LocationInfo will use pre-JDK 1.4 methods to determine location.";
      String string3 = "";
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("LocationInfo will use pre-JDK 1.4 methods to determine location.", updateResponse0.getType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertSame(shardId0, shardId1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(shardId1, shardId0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("LocationInfo will use pre-JDK 1.4 methods to determine location.", updateResponse0.getType());
      assertEquals((-1), shardId1.id());
      assertEquals((-1), shardId1.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "/)'";
      String string1 = "";
      long long0 = 4531L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(4531L, deleteResponse0.getVersion());
      assertEquals("/)'", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(4531L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(mockFileInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      XContentLocation xContentLocation0 = new XContentLocation(int0, int0);
      assertNotNull(xContentLocation0);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      String string0 = "minMergeSize=";
      String string1 = null;
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string1, string0, mockIOException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("minMergeSize=", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) xContentLocation0;
      objectArray0[2] = (Object) xContentLocation0;
      objectArray0[3] = (Object) sQLNonTransientException0;
      objectArray0[4] = (Object) mockIOException0;
      objectArray0[5] = (Object) xContentLocation0;
      objectArray0[6] = (Object) string1;
      objectArray0[7] = (Object) string1;
      objectArray0[8] = (Object) string1;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, sQLNonTransientException0, objectArray0);
      assertNotNull(parsingException0);
      assertEquals(9, objectArray0.length);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertNull(shardId0);
      assertEquals(9, objectArray0.length);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals("minMergeSize=", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      String string2 = "";
      long long0 = 3074L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, parsingException0.REST_EXCEPTION_SKIP_CAUSE, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(9, objectArray0.length);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(3074L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("rest.exception.cause.skip", deleteResponse0.getId());
      assertEquals(3074L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("minMergeSize=", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      
      long long1 = deleteResponse0.getSeqNo();
      assertEquals(3074L, long1);
      assertEquals(9, objectArray0.length);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(3074L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("rest.exception.cause.skip", deleteResponse0.getId());
      assertEquals(3074L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("minMergeSize=", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(long1 == long0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "_id";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string1 = "LlVKvtL\"rQ*]WS2{g";
      String string2 = "";
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = indexResponse0.toString();
      assertNotNull(string3);
      assertEquals("IndexResponse[index=_id,type=LlVKvtL\"rQ*]WS2{g,id=,version=0,created=true,seqNo=0,shards=null]", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "L<jp>";
      String string5 = "{";
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string4, string5, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("{", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("{", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(24, bytesStreamOutput0.size());
      assertEquals(24L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("{", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      
      String string6 = updateResponse0.getType();
      assertNotNull(string6);
      assertEquals("L<jp>", string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string4, string1);
      assertSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string3);
      assertNotSame(string6, string5);
      assertSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("{", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = "^yHVe2B";
      SumAggregationBuilder sumAggregationBuilder0 = new SumAggregationBuilder(string7);
      assertNotNull(sumAggregationBuilder0);
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("^yHVe2B", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.format());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.field());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      Decision.Type decision_Type0 = Decision.Type.NO;
      Decision.Single decision_Single0 = new Decision.Single(decision_Type0, sumAggregationBuilder0.NAME, string1, indexResponse0.EMPTY);
      assertNotNull(decision_Single0);
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("^yHVe2B", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.format());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.field());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("sum", decision_Single0.label());
      assertEquals(Decision.Type.NO, decision_Single0.type());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(24, bytesStreamOutput0.size());
      assertEquals(24L, bytesStreamOutput0.position());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = decision_Single0.toXContent(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string7);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("^yHVe2B", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.format());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.field());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("sum", decision_Single0.label());
      assertEquals(Decision.Type.NO, decision_Single0.type());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(24, bytesStreamOutput0.size());
      assertEquals(24L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      XContentBuilder xContentBuilder2 = sumAggregationBuilder0.doXContentBody(xContentBuilder1, toXContent_Params0);
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string7);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("^yHVe2B", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.format());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.field());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("sum", decision_Single0.label());
      assertEquals(Decision.Type.NO, decision_Single0.type());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertEquals(24, bytesStreamOutput0.size());
      assertEquals(24L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      try { 
        updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "La<>TW(so5";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals("La<>TW(so5", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = updateResponse0.getType();
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("La<>TW(so5", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = ",'jcS/\\s%G}kn\"(";
      String string1 = "KXgf";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      long long0 = 250L;
      long long1 = (-1390L);
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, string0, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals("", indexResponse0.getType());
      assertEquals(250L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(",'jcS/\\s%G}kn\"(", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-1390L), indexResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-112);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-91);
      byteArray0[1] = byte1;
      byte byte2 = (byte)109;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-42);
      byteArray0[3] = byte3;
      int int1 = 723;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte1, int1);
      assertNotNull(streamInput0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-91), (byte)109, (byte) (-42)}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -91
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      XContentBuilder xContentBuilder0 = null;
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Hashtable<QueryRescorerBuilder, ValuesSource.WithScript> hashtable0 = new Hashtable<QueryRescorerBuilder, ValuesSource.WithScript>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      boolean boolean0 = true;
      StreamInput streamInput0 = null;
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      int int0 = 3917;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3917, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3917 cap=3917]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3917, byteBuffer0.remaining());
      assertEquals(3917, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3917, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3917 cap=3917]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3917, byteBuffer0.remaining());
      assertEquals(3917, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput1 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput1);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3917, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3917 cap=3917]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3917, byteBuffer0.remaining());
      assertEquals(3917, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput1.markSupported());
      
      indexResponse0.readFrom(streamInput1);
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3917, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=3917 cap=3917]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3917, byteBuffer0.capacity());
      assertEquals(11, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3906, byteBuffer0.remaining());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput1.markSupported());
      
      ShardSearchTransportRequest shardSearchTransportRequest0 = new ShardSearchTransportRequest();
      assertNotNull(shardSearchTransportRequest0);
      
      // Undeclared exception!
      try { 
        shardSearchTransportRequest0.shardId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.internal.ShardSearchTransportRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "_seq_no";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string0, string0);
      assertNotNull(updateRequest0);
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_seq_no", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("_seq_no", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_seq_no", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      
      String string1 = "";
      String string2 = "UUB(:w\"y1dIzjR";
      String string3 = "org.elasticsearch.action.DocWriteResponse$Fields";
      IndexRequest indexRequest0 = new IndexRequest(string1, string2, string3);
      assertNotNull(indexRequest0);
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.seqNo());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("UUB(:w\"y1dIzjR", indexRequest0.type());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertFalse(indexRequest0.refresh());
      assertEquals("", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      UpdateRequest updateRequest1 = updateRequest0.doc(indexRequest0);
      assertNotNull(updateRequest1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(updateRequest1, updateRequest0);
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_seq_no", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("_seq_no", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_seq_no", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.seqNo());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("UUB(:w\"y1dIzjR", indexRequest0.type());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertFalse(indexRequest0.refresh());
      assertEquals("", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("_seq_no", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertEquals("_seq_no", updateRequest1.id());
      assertEquals("_seq_no", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string1;
      UpdateRequest updateRequest2 = updateRequest1.fields(stringArray0);
      assertNotNull(updateRequest2);
      assertEquals(1, stringArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_seq_no", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("_seq_no", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_seq_no", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.seqNo());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("UUB(:w\"y1dIzjR", indexRequest0.type());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertFalse(indexRequest0.refresh());
      assertEquals("", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("_seq_no", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertEquals("_seq_no", updateRequest1.id());
      assertEquals("_seq_no", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptString());
      assertEquals("_seq_no", updateRequest2.type());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals("_seq_no", updateRequest2.id());
      assertEquals("_seq_no", updateRequest2.index());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(shardId0);
      assertEquals(1, stringArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_seq_no", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("_seq_no", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_seq_no", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.seqNo());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("UUB(:w\"y1dIzjR", indexRequest0.type());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertFalse(indexRequest0.refresh());
      assertEquals("", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("_seq_no", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertEquals("_seq_no", updateRequest1.id());
      assertEquals("_seq_no", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptString());
      assertEquals("_seq_no", updateRequest2.type());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals("_seq_no", updateRequest2.id());
      assertEquals("_seq_no", updateRequest2.index());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "an";
      long long0 = 0L;
      long long1 = (-132L);
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string3, string4, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(1, stringArray0.length);
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_seq_no", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("_seq_no", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_seq_no", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.seqNo());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("UUB(:w\"y1dIzjR", indexRequest0.type());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertFalse(indexRequest0.refresh());
      assertEquals("", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("_seq_no", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertEquals("_seq_no", updateRequest1.id());
      assertEquals("_seq_no", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptString());
      assertEquals("_seq_no", updateRequest2.type());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals("_seq_no", updateRequest2.id());
      assertEquals("_seq_no", updateRequest2.index());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexResponse0.getType());
      assertEquals((-132L), indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("an", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      long long2 = indexResponse0.getVersion();
      assertEquals((-132L), long2);
      assertEquals(1, stringArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_seq_no", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("_seq_no", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_seq_no", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.seqNo());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("UUB(:w\"y1dIzjR", indexRequest0.type());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertFalse(indexRequest0.refresh());
      assertEquals("", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("_seq_no", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertEquals("_seq_no", updateRequest1.id());
      assertEquals("_seq_no", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptString());
      assertEquals("_seq_no", updateRequest2.type());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals("_seq_no", updateRequest2.id());
      assertEquals("_seq_no", updateRequest2.index());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexResponse0.getType());
      assertEquals((-132L), indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("an", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string1 = "LlVKvtL\"rQ*]WS2{g";
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string1, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = indexResponse0.toString();
      assertNotNull(string2);
      assertEquals("IndexResponse[index=org.elasticsearch.action.DocWriteResponse,type=LlVKvtL\"rQ*]WS2{g,id=LlVKvtL\"rQ*]WS2{g,version=0,created=true,seqNo=0,shards=null]", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "L<jp>";
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string3, string0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(140L, bytesStreamOutput0.position());
      assertEquals(140, bytesStreamOutput0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      
      String string4 = updateResponse0.getType();
      assertNotNull(string4);
      assertEquals("L<jp>", string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("L<jp>", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = "^yHVe2B";
      SumAggregationBuilder sumAggregationBuilder0 = new SumAggregationBuilder(string5);
      assertNotNull(sumAggregationBuilder0);
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.format());
      assertNull(sumAggregationBuilder0.field());
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("^yHVe2B", sumAggregationBuilder0.getName());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      Decision.Type decision_Type0 = Decision.Type.NO;
      Decision.Single decision_Single0 = new Decision.Single(decision_Type0, sumAggregationBuilder0.NAME, string1, indexResponse0.EMPTY);
      assertNotNull(decision_Single0);
      assertEquals(Decision.Type.NO, decision_Single0.type());
      assertEquals("sum", decision_Single0.label());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("LlVKvtL\"rQ*]WS2{g", indexResponse0.getType());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.format());
      assertNull(sumAggregationBuilder0.field());
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("^yHVe2B", sumAggregationBuilder0.getName());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(140L, bytesStreamOutput0.position());
      assertEquals(140, bytesStreamOutput0.size());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = sumAggregationBuilder0.doXContentBody(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertEquals(140L, bytesStreamOutput0.position());
      assertEquals(140, bytesStreamOutput0.size());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.format());
      assertNull(sumAggregationBuilder0.field());
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("^yHVe2B", sumAggregationBuilder0.getName());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      SocketAddress socketAddress0 = fakeRestRequest0.getRemoteAddress();
      assertNull(socketAddress0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      try { 
        updateResponse0.toXContent(xContentBuilder1, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      String string1 = indexResponse0.toString();
      assertNotNull(string1);
      assertEquals("IndexResponse[index=org.elasticsearch.action.DocWriteResponse,type=org.elasticsearch.action.DocWriteResponse,id=org.elasticsearch.action.DocWriteResponse,version=0,created=true,seqNo=0,shards=null]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      SumAggregationBuilder sumAggregationBuilder0 = new SumAggregationBuilder(string0);
      assertNotNull(sumAggregationBuilder0);
      assertNull(sumAggregationBuilder0.field());
      assertEquals("org.elasticsearch.action.DocWriteResponse", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.format());
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertFalse(string0.equals((Object)string1));
      
      Decision.Type decision_Type0 = Decision.Type.NO;
      Decision.Single decision_Single0 = new Decision.Single(decision_Type0, sumAggregationBuilder0.NAME, string0, indexResponse0.EMPTY);
      assertNotNull(decision_Single0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(sumAggregationBuilder0.field());
      assertEquals("org.elasticsearch.action.DocWriteResponse", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.format());
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("sum", decision_Single0.label());
      assertEquals(Decision.Type.NO, decision_Single0.type());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0);
      assertNotNull(xContentBuilder0);
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(string0);
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder3);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(XContentType.CBOR, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      String string2 = updateResponse0.toString();
      assertNotNull(string2);
      assertEquals("UpdateResponse[index=org.elasticsearch.action.DocWriteResponse,type=org.elasticsearch.action.DocWriteResponse,id=org.elasticsearch.action.DocWriteResponse,version=0,created=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      String string1 = indexResponse0.toString();
      assertNotNull(string1);
      assertEquals("IndexResponse[index=org.elasticsearch.action.DocWriteResponse,type=org.elasticsearch.action.DocWriteResponse,id=org.elasticsearch.action.DocWriteResponse,version=0,created=true,seqNo=0,shards=null]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      String string2 = shardId0.toString();
      assertNotNull(string2);
      assertEquals("[org.elasticsearch.action.DocWriteResponse][0]", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      SumAggregationBuilder sumAggregationBuilder0 = new SumAggregationBuilder(string0);
      assertNotNull(sumAggregationBuilder0);
      assertEquals("org.elasticsearch.action.DocWriteResponse", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.field());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.format());
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Decision.Type decision_Type0 = Decision.Type.NO;
      Decision.Single decision_Single0 = new Decision.Single(decision_Type0, sumAggregationBuilder0.NAME, string0, indexResponse0.EMPTY);
      assertNotNull(decision_Single0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", sumAggregationBuilder0.getName());
      assertNull(sumAggregationBuilder0.field());
      assertNull(sumAggregationBuilder0.valueType());
      assertNull(sumAggregationBuilder0.format());
      assertEquals("sum", sumAggregationBuilder0.getWriteableName());
      assertEquals("sum", decision_Single0.label());
      assertEquals(Decision.Type.NO, decision_Single0.type());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(string0);
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      boolean boolean2 = true;
      XContentBuilder xContentBuilder2 = xContentBuilder0.humanReadable(boolean2);
      assertNotNull(xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertTrue(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertTrue(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(boolean2 == boolean1);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertTrue(xContentBuilder0.humanReadable());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertTrue(xContentBuilder3.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder4 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder4);
      assertSame(xContentBuilder0, xContentBuilder4);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder4, xContentBuilder0);
      assertSame(xContentBuilder4, xContentBuilder1);
      assertSame(xContentBuilder4, xContentBuilder3);
      assertSame(xContentBuilder4, xContentBuilder2);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertTrue(xContentBuilder0.humanReadable());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(xContentBuilder4.isPrettyPrint());
      assertTrue(xContentBuilder4.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder4.contentType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      String string1 = indexResponse0.toString();
      assertNotNull(string1);
      assertEquals("IndexResponse[index=org.elasticsearch.action.DocWriteResponse,type=org.elasticsearch.action.DocWriteResponse,id=org.elasticsearch.action.DocWriteResponse,version=0,created=true,seqNo=0,shards=null]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(176, bytesStreamOutput0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      Decision.Type decision_Type0 = Decision.Type.NO;
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0);
      assertNotNull(xContentBuilder0);
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      indexResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertNotSame(string0, string1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(string0);
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(string0.equals((Object)string1));
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder3);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder3.contentType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder4 = indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder4);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder4, xContentBuilder2);
      assertSame(xContentBuilder4, xContentBuilder0);
      assertSame(xContentBuilder4, xContentBuilder1);
      assertSame(xContentBuilder4, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder4);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(0L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(xContentBuilder4.humanReadable());
      assertFalse(xContentBuilder4.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder4.contentType());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      
      RestStatus restStatus1 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus1);
      assertNotSame(restStatus1, restStatus0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals(404, restStatus1.getStatus());
      assertFalse(restStatus1.equals((Object)restStatus0));
      
      Random.setNextRandom(int0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "j";
      String string1 = "$|.BL?wV=m{%}+E";
      int int0 = 877;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(877, shardId0.getId());
      assertEquals(877, shardId0.id());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = "org.elasticsearch.action.DocWriteResponse$Fields";
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(877, shardId0.getId());
      assertEquals(877, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(877L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = updateResponse0.toString();
      assertNotNull(string4);
      assertEquals("UpdateResponse[index=j,type=,id=org.elasticsearch.action.DocWriteResponse$Fields,version=877,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals(877, shardId0.getId());
      assertEquals(877, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(877L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(shardId0, shardId1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(shardId1, shardId0);
      assertEquals(877, shardId0.getId());
      assertEquals(877, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(877L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals(877, shardId1.getId());
      assertEquals(877, shardId1.id());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-85);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)53;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-41);
      byteArray0[4] = byte4;
      byte byte5 = (byte)7;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-83);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-44);
      byteArray0[8] = byte8;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)53, (byte) (-41), (byte)7, (byte)0, (byte) (-83), (byte) (-44)}, byteArray0);
      assertEquals(9, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(9, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(9, bigEndianHeapChannelBuffer0.readableBytes());
      
      ByteBuffer byteBuffer0 = bigEndianHeapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)53, (byte) (-41), (byte)7, (byte)0, (byte) (-83), (byte) (-44)}, byteArray0);
      assertEquals(9, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(9, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(9, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)53, (byte) (-41), (byte)7, (byte)0, (byte) (-83), (byte) (-44)}, byteArray0);
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(9, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(9, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(9, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)53, (byte) (-41), (byte)7, (byte)0, (byte) (-83), (byte) (-44)}, byteArray0);
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(9, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(9, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(9, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(9, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(9, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(9, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=9 cap=9]", byteBuffer0.toString());
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      int int0 = 10;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(10L, indexResponse0.getVersion());
      assertEquals(10L, indexResponse0.getSeqNo());
      
      String string1 = indexResponse0.toString();
      assertNotNull(string1);
      assertEquals("IndexResponse[index=org.elasticsearch.action.DocWriteResponse,type=org.elasticsearch.action.DocWriteResponse,id=org.elasticsearch.action.DocWriteResponse,version=10,created=true,seqNo=10,shards=null]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(10L, indexResponse0.getVersion());
      assertEquals(10L, indexResponse0.getSeqNo());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertEquals(10L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string0, string1);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertEquals(10L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string1);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertEquals(10L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(200, restStatus0.getStatus());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      Decision.Type decision_Type0 = Decision.Type.NO;
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0);
      assertNotNull(xContentBuilder0);
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      indexResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertNotSame(string0, string1);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(10L, indexResponse0.getVersion());
      assertEquals(10L, indexResponse0.getSeqNo());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(string0);
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(10L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder3);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(10L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", updateResponse0.getType());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder4 = indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder4);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder4, xContentBuilder0);
      assertSame(xContentBuilder4, xContentBuilder3);
      assertSame(xContentBuilder4, xContentBuilder2);
      assertSame(xContentBuilder4, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder4);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertEquals(10, shardId0.id());
      assertEquals(10, shardId0.getId());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.action.DocWriteResponse", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(10L, indexResponse0.getVersion());
      assertEquals(10L, indexResponse0.getSeqNo());
      assertFalse(xContentBuilder4.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder4.contentType());
      assertFalse(xContentBuilder4.humanReadable());
      assertEquals(176, bytesStreamOutput0.size());
      assertEquals(176L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      RestStatus restStatus1 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus1);
      assertNotSame(restStatus1, restStatus0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(404, restStatus1.getStatus());
      assertFalse(restStatus1.equals((Object)restStatus0));
      
      Random.setNextRandom(int0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      
      XContentBuilder xContentBuilder0 = YamlXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=false)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }
}
