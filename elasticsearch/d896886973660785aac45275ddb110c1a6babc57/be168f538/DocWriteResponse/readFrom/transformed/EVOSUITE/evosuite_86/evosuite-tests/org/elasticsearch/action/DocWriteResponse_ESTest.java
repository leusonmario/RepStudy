/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 07:59:29 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.time.ZoneId;
import java.util.Hashtable;
import java.util.Map;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.bulk.BulkShardRequest;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.fieldstats.FieldStatsResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.cluster.routing.allocation.decider.Decision;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.PagedBytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.geo.GeoPoint;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.support.AbstractXContentParser;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContentParser;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.metrics.geobounds.GeoBoundsAggregationBuilder;
import org.elasticsearch.search.slice.SliceBuilder;
import org.elasticsearch.search.sort.GeoDistanceSortBuilder;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferFactory;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.SlicedChannelBuffer;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.joda.time.DateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", string1);
      
      String string2 = docWriteResponse_Fields0.get_ID();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("_id", string2);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertNotNull(replicationResponse_ShardInfo0);
      
      long long0 = 2518L;
      boolean boolean0 = true;
      int int0 = (-761);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._VERSION, docWriteResponse_Fields0._ID, int0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals((-761), shardId0.id());
      assertEquals((-761), shardId0.getId());
      assertNotNull(shardId0);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, docWriteResponse_Fields0._ID, docWriteResponse_Fields0._ID, long0, boolean0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals((-761), shardId0.id());
      assertEquals((-761), shardId0.getId());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("_id", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      String string3 = indexResponse0.toString();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals((-761), shardId0.id());
      assertEquals((-761), shardId0.getId());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("_id", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("IndexResponse[index=_version,type=_id,id=_id,version=2518,created=true,shards=null]", string3);
      
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, indexResponse0.shardId, string2, string0, indexResponse0.version, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-761), shardId0.id());
      assertEquals((-761), shardId0.getId());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("_id", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_id", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("_index", updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(byteArrayBuilder0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(outputStreamStreamOutput0);
      
      updateResponse0.writeTo(outputStreamStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-761), shardId0.id());
      assertEquals((-761), shardId0.getId());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("_id", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_id", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("_index", updateResponse0.getId());
      assertEquals(37, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      indexResponse0.setForcedRefresh(indexResponse0.forcedRefresh);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = indexResponse0.forcedRefresh();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string0);
      assertEquals("_type", string0);
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNull(shardId0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      StreamInput streamInput0 = null;
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "3";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertNotNull(shardId0);
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("3", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("3", updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(yamlXContent0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = updateResponse0.id;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(1, stringArray0.length);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("3", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("3", updateResponse0.getType());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertNotNull(replicationResponse_ShardInfo0);
      
      updateResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(shardId0);
      
      String string0 = deleteResponse0.getType();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(string0);
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(shardId1);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertNotNull(docWriteResponse_Fields0);
      
      String string1 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertNotNull(string1);
      assertEquals("_index", string1);
      
      boolean boolean0 = true;
      deleteResponse0.setForcedRefresh(boolean0);
      assertEquals(0L, deleteResponse0.version);
      assertTrue(deleteResponse0.forcedRefresh);
      assertTrue(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      GetResult getResult0 = null;
      updateResponse0.setGetResult(getResult0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "2rJBcN";
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertNotNull(docWriteResponse_Fields0);
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_type", string1);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = null;
      long long0 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      boolean boolean1 = updateResponse0.isCreated();
      assertTrue(boolean1 == boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string0);
      assertEquals("_type", string0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      InetAddress inetAddress0 = null;
      int int0 = 1410;
      InetSocketTransportAddress inetSocketTransportAddress0 = new InetSocketTransportAddress(inetAddress0, int0);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(1410, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertNotNull(inetSocketTransportAddress0);
      
      indexResponse0.setForcedRefresh(updateResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      String string0 = inetSocketTransportAddress0.toString();
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(1410, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertNotNull(string0);
      assertEquals("192.168.1.42:1410", string0);
      
      indexResponse0.remoteAddress((TransportAddress) inetSocketTransportAddress0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(1410, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      
      boolean boolean0 = indexResponse0.isCreated();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(boolean0);
      
      long long0 = updateResponse0.getVersion();
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, long0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      int int0 = 160;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(160, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.duplicate();
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(160, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(160, channelBuffer0.capacity());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(160, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(160, channelBuffer0.capacity());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertNotNull(channelBufferBytesReference0);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(160, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(160, channelBuffer0.capacity());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)80;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-8);
      byteArray0[1] = byte1;
      byte byte2 = (byte)121;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-108);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-107);
      byteArray0[5] = byte5;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-8), (byte)121, (byte)0, (byte) (-108), (byte) (-107)}, byteArray0);
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-8), (byte)121, (byte)0, (byte) (-108), (byte) (-107)}, byteArray0);
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBufferBytesReference0);
      
      BytesArray bytesArray0 = byteBufferBytesReference0.toBytesArray();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-8), (byte)121, (byte)0, (byte) (-108), (byte) (-107)}, byteArray0);
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(6, bytesArray0.length());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-8), (byte)121, (byte)0, (byte) (-108), (byte) (-107)}, byteArray0);
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(6, bytesArray0.length());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(streamInput0);
      
      int int0 = streamInput0.available();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-8), (byte)121, (byte)0, (byte) (-108), (byte) (-107)}, byteArray0);
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(6, bytesArray0.length());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(6, int0);
      
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string0);
      assertEquals("_id", string0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = indexResponse0.forcedRefresh();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(boolean0);
      
      boolean boolean1 = indexResponse0.isCreated();
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(boolean1);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      int int0 = 0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, (int) byteArray0[0]);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(streamInput0);
      
      int int1 = (-145);
      // Undeclared exception!
      try { 
        streamInput0.readBytes(byteArray0, int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      String string0 = indexResponse0.getId();
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      boolean boolean0 = deleteResponse0.isFound();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(boolean0);
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_type", string1);
      
      String string2 = docWriteResponse_Fields0.get_TYPE();
      assertFalse(string2.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("_type", string2);
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(404, restStatus0.getStatus());
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      
      String string3 = deleteResponse0.getId();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(string3);
      
      String string4 = docWriteResponse_Fields0.get_ID();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertEquals("_id", string4);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int0 = (-2246);
      ChannelBufferFactory channelBufferFactory0 = DirectChannelBufferFactory.getInstance();
      assertNotNull(channelBufferFactory0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = null;
      try {
        dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int0, channelBufferFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // estimatedLength: -2246
         //
         verifyException("org.jboss.netty.buffer.DynamicChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string0);
      assertEquals("_version", string0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "eD!NQ";
      String string1 = "";
      String string2 = "ph(-(>4";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals("ph(-(>4", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertNull(updateRequest0.scriptString());
      assertEquals("eD!NQ", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNotNull(updateRequest0);
      
      Hashtable<InputStream, BulkShardRequest> hashtable0 = new Hashtable<InputStream, BulkShardRequest>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      XContentType xContentType0 = XContentType.YAML;
      UpdateRequest updateRequest1 = updateRequest0.upsert((Map) hashtable0, xContentType0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals("ph(-(>4", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertNull(updateRequest0.scriptString());
      assertEquals("eD!NQ", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(updateRequest1.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("eD!NQ", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals("ph(-(>4", updateRequest1.id());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertNotNull(updateRequest1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      VersionType versionType0 = VersionType.INTERNAL;
      UpdateRequest updateRequest2 = updateRequest1.versionType(versionType0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals("ph(-(>4", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertNull(updateRequest0.scriptString());
      assertEquals("eD!NQ", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(updateRequest1.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("eD!NQ", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals("ph(-(>4", updateRequest1.id());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals("ph(-(>4", updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("eD!NQ", updateRequest2.index());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals("", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertNotNull(updateRequest2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      boolean boolean0 = true;
      UpdateRequest updateRequest3 = updateRequest2.docAsUpsert(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals("ph(-(>4", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertTrue(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertNull(updateRequest0.scriptString());
      assertEquals("eD!NQ", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(updateRequest1.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("eD!NQ", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals("ph(-(>4", updateRequest1.id());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals("ph(-(>4", updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("eD!NQ", updateRequest2.index());
      assertTrue(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptType());
      assertEquals("", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.scriptLang());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertEquals("eD!NQ", updateRequest3.index());
      assertNull(updateRequest3.routing());
      assertTrue(updateRequest3.docAsUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.scriptString());
      assertEquals("ph(-(>4", updateRequest3.id());
      assertNull(updateRequest3.parent());
      assertEquals("", updateRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals((-3L), updateRequest3.version());
      assertNotNull(updateRequest3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      
      ShardId shardId0 = updateRequest3.getShardId();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals("ph(-(>4", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertTrue(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertNull(updateRequest0.scriptString());
      assertEquals("eD!NQ", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(updateRequest1.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("eD!NQ", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals("ph(-(>4", updateRequest1.id());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals("ph(-(>4", updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("eD!NQ", updateRequest2.index());
      assertTrue(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptType());
      assertEquals("", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.scriptLang());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertEquals("eD!NQ", updateRequest3.index());
      assertNull(updateRequest3.routing());
      assertTrue(updateRequest3.docAsUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.scriptString());
      assertEquals("ph(-(>4", updateRequest3.id());
      assertNull(updateRequest3.parent());
      assertEquals("", updateRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals((-3L), updateRequest3.version());
      assertNull(shardId0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      
      String string3 = ")#oby+";
      long long0 = 0L;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string3, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals("ph(-(>4", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertTrue(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertNull(updateRequest0.scriptString());
      assertEquals("eD!NQ", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(updateRequest1.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("eD!NQ", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals("ph(-(>4", updateRequest1.id());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals("ph(-(>4", updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("eD!NQ", updateRequest2.index());
      assertTrue(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptType());
      assertEquals("", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.scriptLang());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertEquals("eD!NQ", updateRequest3.index());
      assertNull(updateRequest3.routing());
      assertTrue(updateRequest3.docAsUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.scriptString());
      assertEquals("ph(-(>4", updateRequest3.id());
      assertNull(updateRequest3.parent());
      assertEquals("", updateRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals((-3L), updateRequest3.version());
      assertEquals("", deleteResponse0.getId());
      assertTrue(deleteResponse0.isFound());
      assertEquals(")#oby+", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-122);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      UpdateRequest updateRequest4 = updateRequest3.doc(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte)0}, byteArray0);
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals("ph(-(>4", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertTrue(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertNull(updateRequest0.scriptString());
      assertEquals("eD!NQ", updateRequest0.index());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(updateRequest4.scriptType());
      assertEquals("ph(-(>4", updateRequest4.id());
      assertNull(updateRequest4.routing());
      assertNull(updateRequest4.parent());
      assertFalse(updateRequest4.scriptedUpsert());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertTrue(updateRequest4.detectNoop());
      assertNull(updateRequest4.scriptLang());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest4.getRefreshPolicy());
      assertNull(updateRequest4.scriptString());
      assertEquals((-3L), updateRequest4.version());
      assertEquals("", updateRequest4.type());
      assertNull(updateRequest4.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertEquals("eD!NQ", updateRequest4.index());
      assertTrue(updateRequest4.docAsUpsert());
      assertNull(updateRequest1.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("eD!NQ", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals("ph(-(>4", updateRequest1.id());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals("ph(-(>4", updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("eD!NQ", updateRequest2.index());
      assertTrue(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptType());
      assertEquals("", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.scriptLang());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertEquals("eD!NQ", updateRequest3.index());
      assertNull(updateRequest3.routing());
      assertTrue(updateRequest3.docAsUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.scriptString());
      assertEquals("ph(-(>4", updateRequest3.id());
      assertNull(updateRequest3.parent());
      assertEquals("", updateRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals((-3L), updateRequest3.version());
      assertNotNull(updateRequest4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest4);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest2);
      assertSame(updateRequest4, updateRequest0);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest4);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "HU,Z0N_e`der7f";
      long long0 = 1379L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, long0, boolean0);
      assertEquals(1379L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("HU,Z0N_e`der7f", deleteResponse0.getType());
      assertEquals(1379L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("HU,Z0N_e`der7f", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertNotNull(xContentBuilder0);
      
      deleteResponse0.shardId = shardId0;
      assertEquals("HU,Z0N_e`der7f", deleteResponse0.getType());
      assertEquals(1379L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("HU,Z0N_e`der7f", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = "";
      Index index0 = new Index(string1, docWriteResponse_Fields0._TYPE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_type", index0.getUUID());
      assertNotNull(index0);
      
      int int0 = 1;
      ShardId shardId0 = new ShardId(index0, int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_type", index0.getUUID());
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertNotNull(shardId0);
      
      long long0 = 0L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._TYPE, long0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_type", index0.getUUID());
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals("_type", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_type", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      String string2 = deleteResponse0.getType();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_type", index0.getUUID());
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals("_type", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_type", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("_type", string2);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      int int0 = (-2313);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertEquals((-2313), shardId0.id());
      assertEquals((-2313), shardId0.getId());
      assertNotNull(shardId0);
      
      String string2 = "7pSJojKW._[l";
      String string3 = "G5.1Zzl";
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string3, int0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals((-2313L), deleteResponse0.version);
      assertEquals((-2313), shardId0.id());
      assertEquals((-2313), shardId0.getId());
      assertEquals((-2313L), deleteResponse0.getVersion());
      assertEquals("7pSJojKW._[l", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals("G5.1Zzl", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      long long0 = deleteResponse0.getVersion();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals((-2313L), deleteResponse0.version);
      assertEquals((-2313), shardId0.id());
      assertEquals((-2313), shardId0.getId());
      assertEquals((-2313L), deleteResponse0.getVersion());
      assertEquals("7pSJojKW._[l", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals("G5.1Zzl", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals((-2313L), long0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)13;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-31);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)58;
      byteArray0[3] = byte3;
      byte byte4 = (byte)58;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-94);
      byteArray0[5] = byte5;
      byte byte6 = (byte)114;
      byteArray0[6] = byte6;
      BytesArray bytesArray0 = new BytesArray(byteArray0, byteArray0[2], byteArray0[6]);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-31), (byte)0, (byte)58, (byte)58, (byte) (-94), (byte)114}, byteArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(114, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) bytesArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-31), (byte)0, (byte)58, (byte)58, (byte) (-94), (byte)114}, byteArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(114, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertNotNull(streamInput0);
      
      try { 
        ReplicationResponse.ShardInfo.readShardInfo(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "Setting [{}] is deprecated, use [{}] instead";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.index());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.id(string0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.id());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.index());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.id());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.index());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(shardId0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      String string1 = "";
      long long0 = 1346L;
      deleteRequest1.setParentTask(string0, long0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.id());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.index());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string0, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(1346L, indexResponse0.version);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.id());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest0.index());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("Setting [{}] is deprecated, use [{}] instead", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(1346L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNotNull(indexResponse0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(inputStreamStreamInput0);
      
      try { 
        indexResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", string1);
      
      String string2 = DocWriteResponse.Fields._ID;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("_id", string2);
      
      String string3 = docWriteResponse_Fields0.get_ID();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(string3);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("_id", string3);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNotNull(replicationResponse_ShardInfo0);
      
      int int0 = (-2877);
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string4 = "[t)GoNT_m\\&jn";
      String string5 = "org.elasticsearch.action.DocWriteResponse$Fields";
      long long0 = 2518L;
      boolean boolean0 = true;
      String string6 = "";
      int int1 = (-725);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._VERSION, string6, int1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(int1 == int0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(shardId0);
      
      String string7 = "";
      String string8 = "C,N";
      boolean boolean1 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string7, string8, long0, boolean1);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string4));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(indexResponse0);
      
      String string9 = indexResponse0.toString();
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string4));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(string9);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string0);
      assertNotSame(string6, string2);
      assertSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string8);
      assertNotSame(string6, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string9);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(string7, string6);
      assertEquals("IndexResponse[index=_version,type=,id=C,N,version=2518,created=true,shards=null]", string9);
      
      String string10 = indexResponse0.getType();
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string4));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(string10);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string10);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string10, string8);
      assertNotSame(string10, string4);
      assertSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string2);
      assertNotSame(string10, string9);
      assertNotSame(string10, string1);
      assertSame(string10, string6);
      assertNotSame(string10, string3);
      assertNotSame(string6, string2);
      assertSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string8);
      assertNotSame(string6, string4);
      assertSame(string6, string10);
      assertNotSame(string7, string8);
      assertNotSame(string7, string9);
      assertNotSame(string7, string4);
      assertSame(string7, string10);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(string7, string6);
      assertEquals("", string10);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Decision.Multi decision_Multi0 = new Decision.Multi();
      assertNull(decision_Multi0.label());
      assertNotNull(decision_Multi0);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(cborXContent0);
      
      String[] stringArray0 = new String[3];
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertNotNull(fakeRestRequest0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertNotNull(replicationResponse_ShardInfo0);
      
      int int0 = 0;
      int int1 = 1182;
      String string0 = "#;?9I75~_GCPx_6dJX";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      ParsingException parsingException0 = new ParsingException(int0, int1, string0, sQLInvalidAuthorizationSpecException0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotNull(parsingException0);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(1182, parsingException0.getColumnNumber());
      assertNull(shardId0);
      
      String string1 = "W";
      long long0 = (-3148L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, string0, long0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-3148L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-3148L), updateResponse0.getVersion());
      assertEquals("W", updateResponse0.getType());
      assertEquals("#;?9I75~_GCPx_6dJX", updateResponse0.getId());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(1182, parsingException0.getColumnNumber());
      assertNotNull(updateResponse0);
      
      String string2 = updateResponse0.getId();
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-3148L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals((-3148L), updateResponse0.getVersion());
      assertEquals("W", updateResponse0.getType());
      assertEquals("#;?9I75~_GCPx_6dJX", updateResponse0.getId());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(1182, parsingException0.getColumnNumber());
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("#;?9I75~_GCPx_6dJX", string2);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "du8)q7+:5DxQue";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.id(string0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.index());
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.index());
      assertNull(shardId0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      String string1 = "";
      long long0 = 1346L;
      deleteRequest1.setParentTask(string0, long0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.index());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string0, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1346L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("du8)q7+:5DxQue", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("du8)q7+:5DxQue", deleteRequest1.index());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(1346L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals("du8)q7+:5DxQue", indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)50;
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(inputStreamStreamInput0);
      
      try { 
        indexResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      XContentBuilder xContentBuilder0 = null;
      FieldStatsResponse fieldStatsResponse0 = new FieldStatsResponse();
      assertEquals(0, fieldStatsResponse0.getFailedShards());
      assertEquals(0, fieldStatsResponse0.getSuccessfulShards());
      assertEquals(0, fieldStatsResponse0.getTotalShards());
      assertNotNull(fieldStatsResponse0);
      
      Map<String, String> map0 = fieldStatsResponse0.getConflicts();
      assertEquals(0, fieldStatsResponse0.getFailedShards());
      assertEquals(0, fieldStatsResponse0.getSuccessfulShards());
      assertEquals(0, fieldStatsResponse0.getTotalShards());
      assertNull(map0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertEquals(0, fieldStatsResponse0.getFailedShards());
      assertEquals(0, fieldStatsResponse0.getSuccessfulShards());
      assertEquals(0, fieldStatsResponse0.getTotalShards());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNotNull(fakeRestRequest0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.DeleteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "S3 XZ";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertNotNull(shardId0);
      
      String string1 = "<???: \"";
      String string2 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals("<???: \"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      String string3 = updateResponse0.getIndex();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals("<???: \"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotNull(string3);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("S3 XZ", string3);
      
      boolean boolean1 = updateResponse0.isCreated();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals("<???: \"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertFalse(boolean1);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)73;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-115);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(18, byteArray0.length);
      assertNotNull(streamInput0);
      
      BytesArray bytesArray0 = new BytesArray(byteArray0, byte4, byteArray0[1]);
      assertEquals(18, byteArray0.length);
      assertFalse(byte4 == byte0);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte5);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte1);
      assertTrue(bytesArray0.hasArray());
      assertEquals((-115), bytesArray0.arrayOffset());
      assertEquals(0, bytesArray0.length());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput1 = StreamInput.wrap((BytesReference) bytesArray0);
      assertEquals(18, byteArray0.length);
      assertFalse(streamInput1.equals((Object)streamInput0));
      assertFalse(byte4 == byte0);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte5);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte1);
      assertTrue(bytesArray0.hasArray());
      assertEquals((-115), bytesArray0.arrayOffset());
      assertEquals(0, bytesArray0.length());
      assertNotNull(streamInput1);
      assertNotSame(streamInput1, streamInput0);
      
      Boolean boolean1 = streamInput0.readOptionalBoolean();
      assertEquals(18, byteArray0.length);
      assertFalse(streamInput0.equals((Object)streamInput1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertNotSame(streamInput0, streamInput1);
      assertFalse(boolean1);
      
      Object object0 = streamInput0.readGenericValue();
      assertEquals(18, byteArray0.length);
      assertFalse(streamInput0.equals((Object)streamInput1));
      assertNotNull(object0);
      assertNotSame(streamInput0, streamInput1);
      assertEquals("", object0);
      
      updateResponse0.readFrom(streamInput0);
      assertEquals(18, byteArray0.length);
      assertFalse(streamInput0.equals((Object)streamInput1));
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNotSame(streamInput0, streamInput1);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getId());
      assertFalse(indexResponse1.forcedRefresh());
      assertNotNull(indexResponse1);
      assertNotSame(indexResponse1, indexResponse0);
      
      boolean boolean2 = true;
      indexResponse1.forcedRefresh = boolean2;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getId());
      assertTrue(indexResponse1.forcedRefresh());
      
      boolean boolean3 = indexResponse1.isCreated();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(indexResponse1.forcedRefresh);
      assertEquals(0L, indexResponse1.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getId());
      assertTrue(indexResponse1.forcedRefresh());
      assertNotSame(indexResponse1, indexResponse0);
      assertFalse(boolean3);
      
      String string0 = "_version";
      boolean boolean4 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, indexResponse1.id, byteArray0[0], boolean4);
      assertEquals(18, byteArray0.length);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(string0.equals((Object)object0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertTrue(indexResponse1.forcedRefresh);
      assertEquals(0L, indexResponse1.version);
      assertEquals(73L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getId());
      assertTrue(indexResponse1.forcedRefresh());
      assertEquals(73L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("_version", deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", string1);
      
      String string2 = DocWriteResponse.Fields._ID;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("_id", string2);
      
      String string3 = docWriteResponse_Fields0.get_ID();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("_id", string3);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNotNull(replicationResponse_ShardInfo0);
      
      int int0 = (-2877);
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string4 = "[t)GoNT_m\\&jn";
      String string5 = "org.elasticsearch.action.DocWriteRespo'se$Fields";
      long long0 = 2518L;
      boolean boolean0 = true;
      String string6 = "";
      int int1 = (-725);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._VERSION, string6, int1);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(shardId0);
      
      String string7 = "_id";
      String string8 = "C,N";
      boolean boolean1 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string7, string8, long0, boolean1);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("_id", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(indexResponse0);
      
      String string9 = indexResponse0.toString();
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("_id", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(string9);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertNotSame(string8, string3);
      assertNotSame(string9, string1);
      assertNotSame(string9, string0);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertNotSame(string9, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string1);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string9);
      assertNotSame(string7, string6);
      assertEquals("IndexResponse[index=_version,type=_id,id=C,N,version=2518,created=true,shards=null]", string9);
      
      String string10 = indexResponse0.getType();
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string6));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("_id", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(string10);
      assertNotSame(string8, string10);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertNotSame(string8, string3);
      assertSame(string10, string3);
      assertNotSame(string10, string0);
      assertNotSame(string10, string6);
      assertNotSame(string10, string4);
      assertNotSame(string10, string1);
      assertNotSame(string10, string9);
      assertNotSame(string10, string8);
      assertSame(string10, string2);
      assertNotSame(string10, string5);
      assertSame(string10, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string1);
      assertNotSame(string6, string10);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertSame(string7, string10);
      assertSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string9);
      assertNotSame(string7, string6);
      assertEquals("_id", string10);
      
      String string11 = "Q=~f";
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, indexResponse0.shardId, string11, string4, indexResponse0.version, boolean1);
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string10));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("_id", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals("Q=~f", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotNull(updateResponse0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(outputStreamStreamOutput0);
      
      updateResponse0.writeTo(outputStreamStreamOutput0);
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string10));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("C,N", indexResponse0.getId());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("_id", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals("Q=~f", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals(42, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals((-725), shardId0.id());
      assertEquals((-725), shardId0.getId());
      assertNotSame(string4, string9);
      assertNotSame(string4, string10);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string11);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string7);
      assertNotSame(string4, string8);
      assertNotSame(string4, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string11);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string1);
      assertNotSame(string6, string10);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string11);
      assertNotSame(string7, string5);
      assertSame(string7, string10);
      assertSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string9);
      assertNotSame(string7, string6);
      assertNotSame(string8, string10);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string11);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertNotSame(string8, string3);
      assertNotSame(string11, string3);
      assertNotSame(string11, string1);
      assertNotSame(string11, string6);
      assertNotSame(string11, string10);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertNotSame(string11, string2);
      assertNotSame(string11, string7);
      assertNotSame(string11, string4);
      assertNotSame(string11, string0);
      assertNotSame(string11, string9);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "L$-9 _TelX]Qm";
      long long0 = 3914L;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-4);
      byteArray0[0] = byte0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-4)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(3914L, updateResponse0.version);
      assertEquals("L$-9 _TelX]Qm", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("L$-9 _TelX]Qm", updateResponse0.getType());
      assertEquals(3914L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertTrue(boolean1 == boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(3914L, updateResponse0.version);
      assertEquals("L$-9 _TelX]Qm", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("L$-9 _TelX]Qm", updateResponse0.getType());
      assertEquals(3914L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(RestStatus.OK, restStatus0);
      
      long long1 = updateResponse0.getVersion();
      assertTrue(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(3914L, updateResponse0.version);
      assertEquals("L$-9 _TelX]Qm", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("L$-9 _TelX]Qm", updateResponse0.getType());
      assertEquals(3914L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(3914L, long1);
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "\"#L%]v'";
      String string1 = "";
      long long0 = 2269L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(2269L, deleteResponse0.version);
      assertEquals(2269L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("\"#L%]v'", deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      String string2 = deleteResponse0.getId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(2269L, deleteResponse0.version);
      assertEquals(2269L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("\"#L%]v'", deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "7FFE>uF~2YZClWl`pf7";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Index index0 = null;
      int int0 = 1;
      String string1 = "cj]8i':Q=>nTK*D~";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string1, string0);
      assertFalse(boolean1);
      
      ShardId shardId0 = new ShardId(index0, int0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertNotNull(shardId0);
      
      String string2 = "gap_policy";
      boolean boolean2 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string2, int0, boolean2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals("gap_policy", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(1L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("gap_policy", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals("gap_policy", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(1L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("gap_policy", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(1, shardId1.getId());
      assertEquals(1, shardId1.id());
      assertNotNull(shardId1);
      assertSame(shardId0, shardId1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(shardId1, shardId0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(toXContent_Params0, settings0);
      assertNotNull(settings1);
      assertSame(settings1, settings0);
      assertSame(settings0, settings1);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings1, noneCircuitBreakerService0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(mockBigArrays0);
      
      long long0 = 2841L;
      ByteArray byteArray0 = mockBigArrays0.newByteArray(long0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2841L, byteArray0.size());
      assertNotNull(byteArray0);
      assertSame(settings1, settings0);
      assertSame(settings0, settings1);
      
      int int1 = 1;
      PagedBytesReference pagedBytesReference0 = new PagedBytesReference(mockBigArrays0, byteArray0, mockBigArrays0.INT_PAGE_SIZE, int1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2841L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(1, pagedBytesReference0.length());
      assertNotNull(pagedBytesReference0);
      
      BytesArray bytesArray0 = pagedBytesReference0.toBytesArray();
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2841L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(1, pagedBytesReference0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(4096, bytesArray0.arrayOffset());
      assertEquals(1, bytesArray0.length());
      assertNotNull(bytesArray0);
      assertSame(settings1, settings0);
      assertSame(settings0, settings1);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2841L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(1, pagedBytesReference0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(4096, bytesArray0.arrayOffset());
      assertEquals(1, bytesArray0.length());
      assertNotNull(streamInput0);
      assertSame(settings1, settings0);
      assertSame(settings0, settings1);
      
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", string1);
      
      String string2 = DocWriteResponse.Fields._ID;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("_id", string2);
      
      String string3 = docWriteResponse_Fields0.get_ID();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("_id", string3);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertNotNull(replicationResponse_ShardInfo0);
      
      int int0 = (-2877);
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string4 = "[t)GoNT_m\\&jn";
      String string5 = "org.elasticsearch.action.DocWriteRespo'se$Fields";
      long long0 = 2518L;
      boolean boolean0 = true;
      String string6 = "";
      int int1 = (-753);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._VERSION, string6, int1);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertNotNull(shardId0);
      
      String string7 = "%8tr(ZBvr\\C\\Wn";
      IndexResponse indexResponse0 = new IndexResponse(shardId0, docWriteResponse_Fields0._ID, string7, long0, boolean0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertNotNull(indexResponse0);
      
      String string8 = indexResponse0.toString();
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertNotNull(string8);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertEquals("IndexResponse[index=_version,type=_id,id=%8tr(ZBvr\\C\\Wn,version=2518,created=true,shards=null]", string8);
      
      String string9 = indexResponse0.getType();
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertNotNull(string9);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertSame(string9, string3);
      assertNotSame(string9, string8);
      assertNotSame(string9, string7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string5);
      assertNotSame(string9, string6);
      assertSame(string9, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string7);
      assertNotSame(string6, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string9);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertEquals("_id", string9);
      
      String string10 = "Q=~f";
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, indexResponse0.shardId, string10, string4, indexResponse0.version, boolean0);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string10));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertTrue(updateResponse0.isCreated());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("Q=~f", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertNotNull(updateResponse0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(byteArrayBuilder0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(outputStreamStreamOutput0);
      
      updateResponse0.writeTo(outputStreamStreamOutput0);
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertTrue(updateResponse0.isCreated());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("Q=~f", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(42, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertNotSame(string10, string8);
      assertNotSame(string10, string0);
      assertNotSame(string10, string7);
      assertNotSame(string10, string9);
      assertNotSame(string10, string1);
      assertNotSame(string10, string2);
      assertNotSame(string10, string6);
      assertNotSame(string10, string4);
      assertNotSame(string10, string3);
      assertNotSame(string10, string5);
      assertNotSame(string4, string8);
      assertNotSame(string4, string6);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string10);
      assertNotSame(string4, string9);
      assertNotSame(string4, string7);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string7);
      assertNotSame(string6, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string10);
      assertNotSame(string6, string0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string9);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string10);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertNotNull(xContentBuilder0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertNotNull(fakeRestRequest0);
      
      try { 
        indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "3";
      String string1 = "CDaMA$wo#EXPSzI$*T";
      int int0 = (-970);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-970), shardId0.id());
      assertEquals((-970), shardId0.getId());
      assertNotNull(shardId0);
      
      String string2 = "";
      long long0 = 6554L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6554L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-970), shardId0.id());
      assertEquals((-970), shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals("CDaMA$wo#EXPSzI$*T", updateResponse0.getId());
      assertEquals(6554L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(yamlXContent0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = updateResponse0.id;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)40;
      byteArray0[0] = byte0;
      byte byte1 = (byte)79;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-43);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)29;
      byteArray0[4] = byte4;
      int int1 = 686;
      BytesArray bytesArray0 = new BytesArray(byteArray0, byteArray0[4], int1);
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte) (-43), (byte)1, (byte)29}, byteArray0);
      assertEquals(29, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(686, bytesArray0.length());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte) (-43), (byte)1, (byte)29}, byteArray0);
      assertEquals(29, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(686, bytesArray0.length());
      assertNotNull(streamInput0);
      
      YamlXContentParser yamlXContentParser0 = (YamlXContentParser)yamlXContent0.createParser((InputStream) streamInput0);
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertTrue(AbstractXContentParser.DEFAULT_NUMBER_COERCE_POLICY);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte) (-43), (byte)1, (byte)29}, byteArray0);
      assertEquals(29, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(686, bytesArray0.length());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, yamlXContentParser0.contentType());
      assertNotNull(yamlXContentParser0);
      
      stringArray0[1] = string1;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(2, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6554L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-970), shardId0.id());
      assertEquals((-970), shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals("CDaMA$wo#EXPSzI$*T", updateResponse0.getId());
      assertEquals(6554L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = true;
      indexResponse0.setForcedRefresh(boolean0);
      assertTrue(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      
      boolean boolean1 = indexResponse0.isCreated();
      assertFalse(boolean1 == boolean0);
      assertTrue(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(boolean1);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      byte byte0 = (byte) (-113);
      byte byte1 = (byte) (-68);
      int int0 = (-2592);
      XContentLocation xContentLocation0 = new XContentLocation(byte0, int0);
      assertFalse(byte0 == byte1);
      assertEquals((-113), xContentLocation0.lineNumber);
      assertEquals((-2592), xContentLocation0.columnNumber);
      assertNotNull(xContentLocation0);
      
      String string0 = "ueL-VgC9tx6";
      String string1 = null;
      String string2 = "V$p\"3F]s";
      String string3 = "";
      long long0 = 6500L;
      int int1 = (-842);
      boolean boolean2 = indexResponse0.forcedRefresh();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertTrue(boolean2);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", string1);
      
      String string2 = DocWriteResponse.Fields._ID;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("_id", string2);
      
      String string3 = docWriteResponse_Fields0.get_ID();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("_id", string3);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertNotNull(replicationResponse_ShardInfo0);
      
      int int0 = (-2877);
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string4 = "[t)GoNT_m\\&jn";
      String string5 = "org.elasticsearch.action.DocWriteRespo'se$Fields";
      long long0 = 2518L;
      boolean boolean0 = true;
      String string6 = "";
      int int1 = (-753);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._VERSION, string6, int1);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(int1 == int0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.getId());
      assertEquals((-753), shardId0.id());
      assertNotNull(shardId0);
      
      String string7 = "%8tr(ZBvr\\C\\Wn";
      IndexResponse indexResponse0 = new IndexResponse(shardId0, docWriteResponse_Fields0._ID, string7, long0, boolean0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.getId());
      assertEquals((-753), shardId0.id());
      assertNotNull(indexResponse0);
      
      String string8 = indexResponse0.toString();
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.getId());
      assertEquals((-753), shardId0.id());
      assertNotNull(string8);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string7);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertEquals("IndexResponse[index=_version,type=_id,id=%8tr(ZBvr\\C\\Wn,version=2518,created=true,shards=null]", string8);
      
      String string9 = indexResponse0.getType();
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.getId());
      assertEquals((-753), shardId0.id());
      assertNotNull(string9);
      assertNotSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string7);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertSame(string9, string3);
      assertNotSame(string9, string1);
      assertSame(string9, string2);
      assertNotSame(string9, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string7);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string3);
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string9);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertEquals("_id", string9);
      
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, indexResponse0.shardId, docWriteResponse_Fields0._VERSION, string4, indexResponse0.version, boolean0);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("_version", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-753), shardId0.getId());
      assertEquals((-753), shardId0.id());
      assertNotNull(updateResponse0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(outputStreamStreamOutput0);
      
      updateResponse0.writeTo(outputStreamStreamOutput0);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("_version", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(46, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-753), shardId0.getId());
      assertEquals((-753), shardId0.id());
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string8);
      assertNotSame(string4, string6);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string9);
      assertNotSame(string4, string7);
      assertNotSame(string4, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string7);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string3);
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string9);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId1.getId());
      assertEquals((-753), shardId1.id());
      assertEquals((-753), shardId0.getId());
      assertEquals((-753), shardId0.id());
      assertNotNull(shardId1);
      assertSame(shardId1, shardId0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string7);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string3);
      assertSame(shardId0, shardId1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string9);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-29);
      byteArray0[2] = byte2;
      byte byte3 = (byte)26;
      byteArray0[3] = byte3;
      byte byte4 = (byte)50;
      byteArray0[4] = byte4;
      byte byte5 = (byte)123;
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-29), (byte)26, (byte)50, (byte)123}, byteArray0);
      assertFalse(boolean0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(byteArray0[5]);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-29), (byte)26, (byte)50, (byte)123}, byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(pipedInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-29), (byte)26, (byte)50, (byte)123}, byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(inputStreamStreamInput0);
      
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "3";
      String string1 = "CDaMA$wo#EXPSzI$*T";
      int int0 = (-970);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-970), shardId0.getId());
      assertEquals((-970), shardId0.id());
      assertNotNull(shardId0);
      
      String string2 = "";
      long long0 = 6554L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6554L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-970), shardId0.getId());
      assertEquals((-970), shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("CDaMA$wo#EXPSzI$*T", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(6554L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(yamlXContent0);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = updateResponse0.id;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)40;
      byteArray0[0] = byte0;
      byte byte1 = (byte)79;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-43);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)29;
      byteArray0[4] = byte4;
      int int1 = 686;
      BytesArray bytesArray0 = new BytesArray(byteArray0, byteArray0[4], int1);
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte) (-43), (byte)1, (byte)29}, byteArray0);
      assertEquals(686, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(29, bytesArray0.arrayOffset());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte) (-43), (byte)1, (byte)29}, byteArray0);
      assertEquals(686, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(29, bytesArray0.arrayOffset());
      assertNotNull(streamInput0);
      
      YamlXContentParser yamlXContentParser0 = (YamlXContentParser)yamlXContent0.createParser((InputStream) streamInput0);
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertTrue(AbstractXContentParser.DEFAULT_NUMBER_COERCE_POLICY);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte) (-43), (byte)1, (byte)29}, byteArray0);
      assertEquals(686, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(29, bytesArray0.arrayOffset());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, yamlXContentParser0.contentType());
      assertNotNull(yamlXContentParser0);
      
      stringArray0[1] = string1;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertNotNull(fakeRestRequest0);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals(10, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6554L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-970), shardId0.getId());
      assertEquals((-970), shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("CDaMA$wo#EXPSzI$*T", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(6554L, updateResponse0.getVersion());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(docWriteResponse_Fields0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string1.equals((Object)string0));
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", string1);
      
      String string2 = DocWriteResponse.Fields._ID;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("_id", string2);
      
      String string3 = docWriteResponse_Fields0.get_ID();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("_id", string3);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNotNull(replicationResponse_ShardInfo0);
      
      int int0 = (-2877);
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string4 = "[t)GoNT_m\\&jn";
      String string5 = "org.elasticsearch.action.DocWriteRespo'se$Fields";
      long long0 = 2518L;
      boolean boolean4 = true;
      int int1 = (-753);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._VERSION, docWriteResponse_Fields0._TYPE, int1);
      assertFalse(int1 == int0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertNotNull(shardId0);
      
      String string6 = "%8tr(ZBvr\\C\\Wn";
      IndexResponse indexResponse0 = new IndexResponse(shardId0, docWriteResponse_Fields0._ID, string6, long0, boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNotNull(indexResponse0);
      
      String string7 = indexResponse0.toString();
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNotNull(string7);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertEquals("IndexResponse[index=_version,type=_id,id=%8tr(ZBvr\\C\\Wn,version=2518,created=true,shards=null]", string7);
      
      String string8 = indexResponse0.getType();
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNotNull(string8);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string2);
      assertSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertEquals("_id", string8);
      
      String string9 = "Q=~f";
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, indexResponse0.shardId, string9, string4, indexResponse0.version, boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals("Q=~f", updateResponse0.getType());
      assertEquals(2518L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNotNull(updateResponse0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(byteArrayBuilder0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(outputStreamStreamOutput0);
      
      updateResponse0.writeTo(outputStreamStreamOutput0);
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals("Q=~f", updateResponse0.getType());
      assertEquals(2518L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(47, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string9);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string2);
      assertNotSame(string9, string3);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string4, string6);
      assertNotSame(string4, string9);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string7);
      assertNotSame(string4, string2);
      assertNotSame(string4, string8);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      updateResponse0.writeTo(outputStreamStreamOutput0);
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertEquals(2518L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals("_id", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals("Q=~f", updateResponse0.getType());
      assertEquals(2518L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(94, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string9);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string2);
      assertNotSame(string9, string3);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string4, string6);
      assertNotSame(string4, string9);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string7);
      assertNotSame(string4, string2);
      assertNotSame(string4, string8);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      String string0 = DocWriteResponse.Fields._TYPE;
      assertNotNull(string0);
      assertEquals("_type", string0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(docWriteResponse_Fields0);
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals("_type", string1);
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(shardId0);
      
      int int0 = 736;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=736 cap=736]", byteBuffer0.toString());
      assertEquals(736, byteBuffer0.limit());
      assertEquals(736, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(736, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=736 cap=736]", byteBuffer0.toString());
      assertEquals(736, byteBuffer0.limit());
      assertEquals(736, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(736, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertNotNull(byteBufferBytesReference0);
      
      BytesArray bytesArray0 = byteBufferBytesReference0.toBytesArray();
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=736 cap=736]", byteBuffer0.toString());
      assertEquals(736, byteBuffer0.limit());
      assertEquals(736, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(736, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(736, bytesArray0.length());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) bytesArray0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=736 cap=736]", byteBuffer0.toString());
      assertEquals(736, byteBuffer0.limit());
      assertEquals(736, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(736, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(736, bytesArray0.length());
      assertNotNull(streamInput0);
      
      deleteResponse0.readFrom(streamInput0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=736 cap=736]", byteBuffer0.toString());
      assertEquals(736, byteBuffer0.limit());
      assertEquals(736, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(736, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(736, bytesArray0.length());
      
      String string2 = deleteResponse0.getIndex();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      
      long long0 = (-2314L);
      IndexResponse indexResponse0 = new IndexResponse(shardId0, docWriteResponse_Fields0._TYPE, deleteResponse0.id, long0, deleteResponse0.forcedRefresh);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals((-2314L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("", indexResponse0.getId());
      assertEquals("_type", indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals((-2314L), indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      StreamOutput streamOutput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(streamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-117);
      byteArray0[0] = byte0;
      byte byte1 = (byte)95;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-47);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)39;
      byteArray0[4] = byte4;
      byte byte5 = (byte)34;
      byteArray0[5] = byte5;
      int int0 = (-1);
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, (int) byteArray0[1]);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)95, (byte) (-47), (byte)0, (byte)39, (byte)34}, byteArray0);
      assertNotNull(streamInput0);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "3";
      String string1 = "CDaMA$wo#EXPSzI$*T";
      int int0 = (-970);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-970), shardId0.id());
      assertEquals((-970), shardId0.getId());
      assertNotNull(shardId0);
      
      String string2 = "";
      long long0 = 6554L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(6554L, updateResponse0.version);
      assertEquals((-970), shardId0.id());
      assertEquals((-970), shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("CDaMA$wo#EXPSzI$*T", updateResponse0.getId());
      assertEquals(6554L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(yamlXContent0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = updateResponse0.id;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)79;
      byteArray0[1] = byte0;
      byte byte1 = (byte) (-43);
      byteArray0[0] = byte1;
      byte byte2 = (byte)1;
      byteArray0[3] = byte2;
      byte byte3 = (byte) (-3);
      byteArray0[4] = byte3;
      int int1 = 686;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(2, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(6554L, updateResponse0.version);
      assertEquals((-970), shardId0.id());
      assertEquals((-970), shardId0.getId());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("CDaMA$wo#EXPSzI$*T", updateResponse0.getId());
      assertEquals(6554L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(2, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(6554L, updateResponse0.version);
      assertEquals((-970), shardId0.id());
      assertEquals((-970), shardId0.getId());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("CDaMA$wo#EXPSzI$*T", updateResponse0.getId());
      assertEquals(6554L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "~pdZ$77'ttawUrcl!";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      String string1 = "o,>RTYKF#o]CN*G;O";
      String string2 = "W\\SHfaoY?xocAM)7{J*";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string1, string2, int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertNotNull(shardId0);
      
      deleteResponse0.shardId = shardId0;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0, deleteResponse0.shardId.getId());
      assertEquals(0, deleteResponse0.shardId.id());
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0, shardId1.id());
      assertEquals(0, shardId1.getId());
      assertNotNull(shardId1);
      assertSame(shardId1, shardId0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      String string1 = DocWriteResponse.Fields._ID;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_id", string1);
      
      String string2 = DocWriteResponse.Fields._ID;
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("_id", string2);
      
      String string3 = docWriteResponse_Fields0.get_ID();
      assertFalse(string3.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("_id", string3);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertNotNull(replicationResponse_ShardInfo0);
      
      int int0 = (-2877);
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      String string4 = "[t)GoNT_m\\&jn";
      String string5 = "org.elasticsearch.action.DocWriteRespo'se$Fields";
      long long0 = 2518L;
      boolean boolean0 = true;
      String string6 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = (-753);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._VERSION, string6, int1);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertNotNull(shardId0);
      
      String string7 = "%8tr(ZBvr\\C\\Wn";
      IndexResponse indexResponse0 = new IndexResponse(shardId0, docWriteResponse_Fields0._ID, string7, long0, boolean0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNotNull(indexResponse0);
      
      String string8 = indexResponse0.toString();
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNotNull(string8);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      assertEquals("IndexResponse[index=_version,type=_id,id=%8tr(ZBvr\\C\\Wn,version=2518,created=true,shards=null]", string8);
      
      String string9 = indexResponse0.getType();
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNotNull(string9);
      assertNotSame(string7, string9);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string8);
      assertSame(string9, string1);
      assertSame(string9, string3);
      assertNotSame(string9, string5);
      assertSame(string9, string2);
      assertNotSame(string9, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string9);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      assertEquals("_id", string9);
      
      String string10 = "Q=~f";
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, indexResponse0.shardId, string10, string4, indexResponse0.version, boolean0);
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("Q=~f", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(outputStreamStreamOutput0);
      
      updateResponse0.writeTo(outputStreamStreamOutput0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(2518L, indexResponse0.version);
      assertEquals(2518L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals((-753), shardId0.id());
      assertEquals((-753), shardId0.getId());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(2518L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_id", indexResponse0.getType());
      assertEquals("%8tr(ZBvr\\C\\Wn", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("Q=~f", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(2518L, updateResponse0.getVersion());
      assertEquals("[t)GoNT_m\\&jn", updateResponse0.getId());
      assertEquals(42, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotSame(string7, string9);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string10);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string3);
      assertNotSame(string10, string5);
      assertNotSame(string10, string1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string0);
      assertNotSame(string10, string7);
      assertNotSame(string10, string2);
      assertNotSame(string10, string6);
      assertNotSame(string10, string9);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string10);
      assertNotSame(string4, string8);
      assertNotSame(string4, string3);
      assertNotSame(string4, string6);
      assertNotSame(string4, string9);
      assertNotSame(string4, string7);
      assertNotSame(string4, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string9);
      assertNotSame(string6, string2);
      assertNotSame(string6, string10);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      XContentBuilder xContentBuilder0 = YamlXContent.contentBuilder();
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertNotNull(fakeRestRequest0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=_version)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }
}
