/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 07:12:37 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.lucene.util.BytesRef;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.termvectors.TermVectorsResponse;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.geo.GeoDistance;
import org.elasticsearch.common.geo.GeoPoint;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.DummyTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.unit.DistanceUnit;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.util.PageCacheRecycler;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.query.GeoValidationMethod;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.CircuitBreakerService;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.indices.recovery.RecoveryState;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.InternalAggregations;
import org.elasticsearch.search.aggregations.bucket.significant.heuristics.GND;
import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltLinearModel;
import org.elasticsearch.search.sort.GeoDistanceSortBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferFactory;
import org.jboss.netty.buffer.CompositeChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.HeapChannelBufferFactory;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(shardId0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(inputStreamStreamInput0);
      
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = indexResponse0.forcedRefresh();
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "ylS@W[}";
      int int0 = 101397;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(101397, shardId0.id());
      assertEquals(101397, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals(101397, shardId0.id());
      assertEquals(101397, shardId0.getId());
      assertEquals("ylS@W[}", deleteResponse0.getType());
      assertEquals(101397L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("ylS@W[}", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      String string1 = deleteResponse0.toString();
      assertEquals(101397, shardId0.id());
      assertEquals(101397, shardId0.getId());
      assertEquals("ylS@W[}", deleteResponse0.getType());
      assertEquals(101397L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("ylS@W[}", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("DeleteResponse[index=ylS@W[},type=ylS@W[},id=ylS@W[},version=101397,found=true,shards=null]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "TE";
      int int0 = (-1943);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals((-1943), shardId0.getId());
      assertEquals((-1943), shardId0.id());
      assertNotNull(shardId0);
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals((-1943), shardId0.getId());
      assertEquals((-1943), shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1943L), updateResponse0.getVersion());
      assertEquals("TE", updateResponse0.getType());
      assertEquals("TE", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean0);
      assertEquals((-1943), shardId0.getId());
      assertEquals((-1943), shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1943L), updateResponse0.getVersion());
      assertEquals("TE", updateResponse0.getType());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals("TE", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals((-1943), shardId0.getId());
      assertEquals((-1943), shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1943L), updateResponse0.getVersion());
      assertEquals("TE", updateResponse0.getType());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals("TE", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(25, releasableBytesStreamOutput0.size());
      assertEquals(25L, releasableBytesStreamOutput0.position());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "lS@PW[}";
      int int0 = 35;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(35, shardId0.getId());
      assertEquals(35, shardId0.id());
      assertNotNull(shardId0);
      
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals(35, shardId0.getId());
      assertEquals(35, shardId0.id());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(35L, deleteResponse0.getVersion());
      assertEquals("lS@PW[}", deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals("lS@PW[}", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(cborXContent0);
      
      String[] stringArray0 = new String[9];
      stringArray0[6] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) cborXContent0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertNotNull(fakeRestRequest0);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertNotNull(toXContent_DelegatingMapParams0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertNotNull(shardId0);
      
      String string1 = "R,{";
      long long0 = 1073741824L;
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, boolean0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals("", indexResponse0.getType());
      assertEquals(1073741824L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("R,{", indexResponse0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexResponse0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      BytesArray bytesArray0 = BytesArray.EMPTY;
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertNotNull(streamInput0);
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      boolean boolean0 = deleteResponse0.forcedRefresh();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      DeleteResponse deleteResponse1 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse1.getType());
      assertNull(deleteResponse1.getId());
      assertFalse(deleteResponse1.forcedRefresh());
      assertEquals(0L, deleteResponse1.getVersion());
      assertFalse(deleteResponse1.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      assertNotNull(deleteResponse1);
      assertNotSame(deleteResponse1, deleteResponse0);
      
      // Undeclared exception!
      try { 
        deleteResponse1.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = true;
      indexResponse0.setForcedRefresh(boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotNull(indexResponse1);
      assertNotSame(indexResponse1, indexResponse0);
      
      long long0 = indexResponse0.getVersion();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, long0);
      assertFalse(indexResponse0.equals((Object)indexResponse1));
      assertNotSame(indexResponse0, indexResponse1);
      
      long long1 = indexResponse0.getVersion();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, long1);
      assertFalse(indexResponse0.equals((Object)indexResponse1));
      assertTrue(long1 == long0);
      assertNotSame(indexResponse0, indexResponse1);
      
      long long2 = indexResponse0.getVersion();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, long2);
      assertFalse(indexResponse0.equals((Object)indexResponse1));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertNotSame(indexResponse0, indexResponse1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "\\Jw5y";
      int int0 = 913;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertNotNull(shardId0);
      
      String string1 = "1\":~Xlm]@EH=X0~";
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(mockBigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertNotNull(dataOutputStream0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(dataOutputStream0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertNotNull(outputStreamStreamOutput0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      shardId0.writeTo(outputStreamStreamOutput0);
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string1, int0, boolean0);
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertEquals(913L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getType());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexResponse0);
      
      indexResponse0.setForcedRefresh(boolean0);
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals(913L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getType());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean1 = indexResponse0.forcedRefresh();
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals(913L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getType());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      String string0 = DocWriteResponse.Fields._TYPE;
      assertEquals("_type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      DummyTransportAddress dummyTransportAddress0 = DummyTransportAddress.INSTANCE;
      assertEquals(42, dummyTransportAddress0.getPort());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertNotNull(dummyTransportAddress0);
      
      indexResponse0.remoteAddress((TransportAddress) dummyTransportAddress0);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      
      String string0 = indexResponse0.getId();
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      String string0 = indexResponse0.getId();
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNull(string0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        StreamInput.wrap(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.StreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)5;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)5, (byte)0, (byte)0}, byteArray0);
      assertNotNull(streamInput0);
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertNotNull(updateResponse0);
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse1.getVersion());
      assertNull(updateResponse1.getType());
      assertFalse(updateResponse1.forcedRefresh());
      assertNull(updateResponse1.getId());
      assertFalse(updateResponse1.isCreated());
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertNotNull(updateResponse1);
      assertNotSame(updateResponse1, updateResponse0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertNotNull(objectOutputStream0);
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertNotNull(dataOutputStreamOutput0);
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(dataOutputStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int0 = 489;
      ChannelBufferFactory channelBufferFactory0 = HeapChannelBufferFactory.getInstance(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(channelBufferFactory0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int0, channelBufferFactory0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(489, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertNotNull(dynamicChannelBuffer0);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(489, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertNotNull(channelBufferBytesReference0);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(489, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      StreamOutput streamOutput0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(streamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      String string0 = "";
      int int0 = 220;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertNotNull(shardId0);
      
      String string1 = "8TZs`IsZy15U/Pz>@";
      long long0 = 693L;
      boolean boolean0 = true;
      deleteResponse0.setForcedRefresh(boolean0);
      assertTrue(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean1);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("8TZs`IsZy15U/Pz>@", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean1);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("8TZs`IsZy15U/Pz>@", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean2 = updateResponse0.isCreated();
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("8TZs`IsZy15U/Pz>@", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertTrue(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNull(shardId1);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(releasableBytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = (-521);
      XContentLocation xContentLocation0 = new XContentLocation(int0, int0);
      assertNotNull(xContentLocation0);
      assertEquals((-521), xContentLocation0.columnNumber);
      assertEquals((-521), xContentLocation0.lineNumber);
      
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) xContentLocation0;
      objectArray0[3] = (Object) string0;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(parsingException0);
      assertEquals((-521), xContentLocation0.columnNumber);
      assertEquals((-521), xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertEquals(4, objectArray0.length);
      assertEquals((-521), parsingException0.getColumnNumber());
      assertEquals((-521), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertNull(shardId0);
      assertEquals((-521), xContentLocation0.columnNumber);
      assertEquals((-521), xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      String string1 = "{suToPvhse[N99FFQe8";
      String string2 = null;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string2, xContentLocation0.columnNumber, parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(4, objectArray0.length);
      assertEquals((-521), parsingException0.getColumnNumber());
      assertEquals((-521), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("{suToPvhse[N99FFQe8", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-521L), updateResponse0.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals((-521), xContentLocation0.columnNumber);
      assertEquals((-521), xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      String string3 = updateResponse0.getType();
      assertEquals(4, objectArray0.length);
      assertEquals((-521), parsingException0.getColumnNumber());
      assertEquals((-521), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("{suToPvhse[N99FFQe8", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-521L), updateResponse0.getVersion());
      assertEquals("{suToPvhse[N99FFQe8", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertEquals((-521), xContentLocation0.columnNumber);
      assertEquals((-521), xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-32);
      byteArray0[3] = byte3;
      byte byte4 = (byte)83;
      byteArray0[4] = byte4;
      byte byte5 = (byte)13;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-32), (byte)83, (byte)13, (byte)0}, byteArray0);
      assertNotNull(streamInput0);
      
      try { 
        GetResult.readGetResult(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      XContentBuilder xContentBuilder0 = null;
      ToXContent.Params toXContent_Params0 = null;
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.isCreated());
      assertNull(updateResponse1.getType());
      assertFalse(updateResponse1.forcedRefresh());
      assertNull(updateResponse1.getId());
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertNotNull(updateResponse1);
      assertNotSame(updateResponse1, updateResponse0);
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "\\Jw5y";
      int int0 = 913;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertNotNull(shardId0);
      
      String string1 = "1\":~Xlm]@EH=X0~";
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(noneCircuitBreakerService0);
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNotNull(mockBigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(dataOutputStream0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean1, boolean2);
      assertFalse(boolean3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(dataOutputStream0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(outputStreamStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      shardId0.writeTo(outputStreamStreamOutput0);
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      boolean boolean4 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string1, int0, boolean4);
      assertEquals(913L, indexResponse0.getVersion());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getType());
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexResponse0);
      
      String string2 = indexResponse0.getIndex();
      assertEquals(913L, indexResponse0.getVersion());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getType());
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertEquals("\\Jw5y", string2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      indexResponse0.setForcedRefresh(boolean4);
      assertEquals(913L, indexResponse0.getVersion());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getType());
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      boolean boolean5 = indexResponse0.forcedRefresh();
      assertEquals(913L, indexResponse0.getVersion());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals("1\":~Xlm]@EH=X0~", indexResponse0.getType());
      assertEquals(913, shardId0.id());
      assertEquals(913, shardId0.getId());
      assertTrue(boolean5);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      DeleteResponse deleteResponse1 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse1.getType());
      assertNull(deleteResponse1.getId());
      assertEquals(0L, deleteResponse1.getVersion());
      assertFalse(deleteResponse1.forcedRefresh());
      assertFalse(deleteResponse1.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      assertNotNull(deleteResponse1);
      assertNotSame(deleteResponse1, deleteResponse0);
      
      XContentBuilder xContentBuilder0 = null;
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse1.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.DeleteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      byte[] byteArray0 = new byte[4];
      String string0 = "`-bE&/~u_jU9I=-Js";
      String string1 = "";
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      int int0 = 1699;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertEquals(1699, shardId0.id());
      assertEquals(1699, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      
      String string2 = "k@Wk~u'bKi:nP3]7JU";
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, deleteAction0.NAME, string2, int0, boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(1699, shardId0.id());
      assertEquals(1699, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("k@Wk~u'bKi:nP3]7JU", indexResponse0.getId());
      assertEquals("indices:data/write/delete", indexResponse0.getType());
      assertEquals(1699L, indexResponse0.getVersion());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(indexResponse0);
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(1699, shardId0.id());
      assertEquals(1699, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("k@Wk~u'bKi:nP3]7JU", indexResponse0.getId());
      assertEquals("indices:data/write/delete", indexResponse0.getType());
      assertEquals(1699L, indexResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
      assertEquals(RestStatus.CREATED, restStatus0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      byte byte0 = (byte)127;
      byteArray0[0] = byte0;
      byte byte1 = (byte)8;
      double double0 = (-2042.1339679405128);
      double double1 = 1084.9662143449;
      GeoPoint geoPoint0 = new GeoPoint(double0, double1);
      assertEquals((-2042.1339679405128), geoPoint0.getLat(), 0.01);
      assertEquals(1084.9662143449, geoPoint0.lon(), 0.01);
      assertEquals((-2042.1339679405128), geoPoint0.lat(), 0.01);
      assertEquals(1084.9662143449, geoPoint0.getLon(), 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(geoPoint0);
      
      bytesStreamOutput0.writeGeoPoint(geoPoint0);
      assertEquals((-2042.1339679405128), geoPoint0.getLat(), 0.01);
      assertEquals(1084.9662143449, geoPoint0.lon(), 0.01);
      assertEquals((-2042.1339679405128), geoPoint0.lat(), 0.01);
      assertEquals(1084.9662143449, geoPoint0.getLon(), 0.01);
      assertEquals(16L, bytesStreamOutput0.position());
      assertEquals(16, bytesStreamOutput0.size());
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-101);
      boolean boolean1 = false;
      byteArray0[3] = byte3;
      int int1 = (-3016);
      BytesArray bytesArray0 = new BytesArray(byteArray0, byteArray0[1], int1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals((-3016), bytesArray0.length());
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)127, (byte)8, (byte)0, (byte) (-101)}, byteArray0);
      assertNotNull(bytesArray0);
      
      // Undeclared exception!
      try { 
        bytesArray0.copyBytesRef();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 > -3008
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      String string0 = indexResponse0.getType();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNull(string0);
      
      String string1 = "org.elasticsearch.action.termvectors.TermVectorsResponse";
      String string2 = "`";
      TermVectorsResponse termVectorsResponse0 = new TermVectorsResponse(string1, string1, string2);
      assertFalse(termVectorsResponse0.isExists());
      assertEquals("org.elasticsearch.action.termvectors.TermVectorsResponse", termVectorsResponse0.getIndex());
      assertEquals("`", termVectorsResponse0.getId());
      assertFalse(termVectorsResponse0.isArtificial());
      assertEquals(0L, (long)termVectorsResponse0.getVersion());
      assertEquals(0L, termVectorsResponse0.getTookInMillis());
      assertEquals("org.elasticsearch.action.termvectors.TermVectorsResponse", termVectorsResponse0.getType());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(termVectorsResponse0);
      
      boolean boolean0 = true;
      GND gND0 = new GND(boolean0);
      assertEquals("gnd", gND0.getWriteableName());
      assertNotNull(gND0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(yamlXContent0);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        gND0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.MappingStartEvent(anchor=null, tag=null, implicit=true)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = true;
      indexResponse0.setForcedRefresh(boolean0);
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.forcedRefresh());
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getId());
      assertFalse(indexResponse1.forcedRefresh());
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotNull(indexResponse1);
      assertNotSame(indexResponse1, indexResponse0);
      
      long long0 = indexResponse0.getVersion();
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals(0L, long0);
      assertFalse(indexResponse0.equals((Object)indexResponse1));
      assertNotSame(indexResponse0, indexResponse1);
      
      long long1 = indexResponse0.getVersion();
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals(0L, long1);
      assertFalse(indexResponse0.equals((Object)indexResponse1));
      assertTrue(long1 == long0);
      assertNotSame(indexResponse0, indexResponse1);
      
      Long long2 = new Long(long0);
      assertEquals(0L, (long)long2);
      assertFalse(indexResponse0.equals((Object)indexResponse1));
      assertTrue(long0 == long1);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      int int0 = 598;
      IndexResponse indexResponse2 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse2.isCreated());
      assertEquals(0L, indexResponse2.getVersion());
      assertNull(indexResponse2.getType());
      assertNull(indexResponse2.getId());
      assertFalse(indexResponse2.forcedRefresh());
      assertFalse(indexResponse2.equals((Object)indexResponse0));
      assertFalse(indexResponse2.equals((Object)indexResponse1));
      assertNotNull(indexResponse2);
      assertNotSame(indexResponse2, indexResponse0);
      assertNotSame(indexResponse2, indexResponse1);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(598, byteBuffer0.remaining());
      assertEquals(598, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(598, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=598 cap=598]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(598, byteBuffer0.remaining());
      assertEquals(598, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(598, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=598 cap=598]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertNotNull(byteBufferBytesReference0);
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(598, byteBuffer0.remaining());
      assertEquals(598, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(598, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=598 cap=598]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      
      indexResponse1.readFrom(streamInput0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals("", indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertEquals("", indexResponse1.getId());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals("java.nio.DirectByteBuffer[pos=11 lim=598 cap=598]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(587, byteBuffer0.remaining());
      assertEquals(598, byteBuffer0.capacity());
      assertEquals(11, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(598, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(indexResponse1.equals((Object)indexResponse2));
      assertNotSame(indexResponse1, indexResponse0);
      assertNotSame(indexResponse1, indexResponse2);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      int int0 = 220;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertNotNull(shardId0);
      
      long long0 = 693L;
      boolean boolean1 = true;
      boolean boolean2 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean2);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean2);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(693L, updateResponse0.getVersion());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(693L, updateResponse0.getVersion());
      assertEquals(220, shardId1.getId());
      assertEquals(220, shardId1.id());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(shardId1);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)35;
      byteArray0[0] = byte0;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(littleEndianHeapChannelBuffer0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertNotNull(channelBufferBytesReference0);
      
      BytesRef bytesRef0 = channelBufferBytesReference0.copyBytesRef();
      assertEquals(1, byteArray0.length);
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertNotNull(bytesRef0);
      assertEquals(1, bytesRef0.length);
      assertEquals(0, bytesRef0.offset);
      
      String string0 = bytesRef0.utf8ToString();
      assertEquals(1, byteArray0.length);
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals("#", string0);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, bytesRef0.length);
      assertEquals(0, bytesRef0.offset);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertEquals(1, byteArray0.length);
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertNotNull(streamInput0);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      boolean boolean0 = streamInput0.markSupported();
      assertEquals(1, byteArray0.length);
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertNotNull(namedWriteableAwareStreamInput0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput1 = null;
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(namedWriteableAwareStreamInput1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "XppLK6<7!4Al3}o";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertNotNull(deleteRequest0);
      
      String string1 = "=%,l>p,Yvzp]:g8Es";
      DeleteRequest deleteRequest1 = deleteRequest0.parent(string1);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest0.parent());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest1.type());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.index());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest1);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-91);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-13);
      byteArray0[2] = byte2;
      byte byte3 = (byte)11;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-1), (byte) (-13), (byte)11, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DeleteRequest deleteRequest2 = deleteRequest1.type(string0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest0.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.type());
      assertNull(deleteRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.index());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.type());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.index());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest2.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest2);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      
      DeleteRequest deleteRequest3 = deleteRequest2.id(string0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest0.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.index());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.type());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.index());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest2.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.type());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertNull(deleteRequest3.routing());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.id());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest3);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      
      ShardId shardId0 = deleteRequest3.shardId();
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest0.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.index());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.type());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.index());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest2.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.type());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertNull(deleteRequest3.routing());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.id());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(shardId0);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      
      String string2 = "NOTE: MockRandomMergePolicy now swaps in a MismatchedLeafReader for merging reader=";
      String string3 = "forced_refresh";
      long long0 = 1749L;
      boolean boolean1 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string3, long0, boolean1);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest0.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.index());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.type());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.index());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest2.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.type());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertNull(deleteRequest3.routing());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.id());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("forced_refresh", deleteResponse0.getId());
      assertEquals("NOTE: MockRandomMergePolicy now swaps in a MismatchedLeafReader for merging reader=", deleteResponse0.getType());
      assertEquals(1749L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertNotNull(deleteResponse0);
      
      String string4 = deleteResponse0.getId();
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest0.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.index());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.type());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.index());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest2.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.type());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertNull(deleteRequest3.routing());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.id());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("forced_refresh", deleteResponse0.getId());
      assertEquals("NOTE: MockRandomMergePolicy now swaps in a MismatchedLeafReader for merging reader=", deleteResponse0.getType());
      assertEquals(1749L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("forced_refresh", string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      
      String string5 = deleteResponse0.getType();
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest0.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.index());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.type());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.index());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest2.parent());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.type());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.type());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertNull(deleteRequest3.routing());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("XppLK6<7!4Al3}o", deleteRequest3.id());
      assertEquals("=%,l>p,Yvzp]:g8Es", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("forced_refresh", deleteResponse0.getId());
      assertEquals("NOTE: MockRandomMergePolicy now swaps in a MismatchedLeafReader for merging reader=", deleteResponse0.getType());
      assertEquals(1749L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("NOTE: MockRandomMergePolicy now swaps in a MismatchedLeafReader for merging reader=", string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertSame(string5, string2);
      assertNotSame(string5, string3);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      int int0 = 220;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertNotNull(shardId0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = 693L;
      boolean boolean2 = true;
      boolean boolean3 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean3);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(693L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean3);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(693L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(693L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      String string1 = "";
      long long1 = (-138L);
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string0, long1, boolean1);
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals((-138L), indexResponse0.getVersion());
      assertEquals("", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals(220, shardId0.getId());
      assertEquals(220, shardId0.id());
      assertFalse(long1 == long0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean3);
      assertNotNull(indexResponse0);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertNotNull(xContentBuilder0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      String string2 = "Zy!48HkEHGV";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string2);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("Zy!48HkEHGV", defaultHttpRequest0.getUri());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("Zy!48HkEHGV", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("Zy!48HkEHGV", nettyHttpRequest0.uri());
      assertEquals("Zy!48HkEHGV", nettyHttpRequest0.rawPath());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(nettyHttpRequest0);
      
      try { 
        indexResponse0.toXContent(xContentBuilder0, nettyHttpRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      int int0 = 220;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertNotNull(shardId0);
      
      long long0 = 693L;
      boolean boolean1 = true;
      boolean boolean2 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean2);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean2);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      String string1 = updateResponse0.getIndex();
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", string1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      StreamInput streamInput0 = null;
      int int0 = 0;
      XContentLocation xContentLocation0 = new XContentLocation(int0, int0);
      assertNotNull(xContentLocation0);
      assertEquals(0, xContentLocation0.lineNumber);
      assertEquals(0, xContentLocation0.columnNumber);
      
      String string0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) streamInput0;
      objectArray0[1] = (Object) sQLRecoverableException0;
      objectArray0[2] = (Object) sQLRecoverableException0;
      objectArray0[3] = (Object) sQLRecoverableException0;
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) sQLRecoverableException0;
      objectArray0[6] = (Object) sQLRecoverableException0;
      objectArray0[7] = (Object) string0;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, sQLRecoverableException0, objectArray0);
      assertEquals(8, objectArray0.length);
      assertNotNull(parsingException0);
      assertEquals(0, xContentLocation0.lineNumber);
      assertEquals(0, xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertEquals(8, objectArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertNull(shardId0);
      assertEquals(0, xContentLocation0.lineNumber);
      assertEquals(0, xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      String string1 = "BwGq";
      String string2 = "";
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)parsingException0.getRootCause();
      assertEquals(8, objectArray0.length);
      assertNull(sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertEquals(0, xContentLocation0.lineNumber);
      assertEquals(0, xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      long long0 = 1L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, long0, boolean0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(1L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals("BwGq", indexResponse0.getType());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(indexResponse0);
      assertEquals(0, xContentLocation0.lineNumber);
      assertEquals(0, xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      String string3 = indexResponse0.getId();
      assertEquals(8, objectArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(1L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals("BwGq", indexResponse0.getType());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals("", string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertEquals(0, xContentLocation0.lineNumber);
      assertEquals(0, xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = null;
      String string0 = "";
      int int0 = 1356;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(1356, shardId0.getId());
      assertEquals(1356, shardId0.id());
      assertNotNull(shardId0);
      
      String string1 = "*";
      String string2 = "";
      long long0 = (-2587L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, string2, long0, boolean0);
      assertEquals(1356, shardId0.getId());
      assertEquals(1356, shardId0.id());
      assertEquals((-2587L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals("*", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(updateResponse0);
      
      long long1 = updateResponse0.getVersion();
      assertEquals(1356, shardId0.getId());
      assertEquals(1356, shardId0.id());
      assertEquals((-2587L), updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals("*", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2587L), long1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(long1 == long0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      String string3 = "";
      long long2 = (-2712L);
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, string3, long2, boolean0);
      assertEquals(1356, shardId0.getId());
      assertEquals(1356, shardId0.id());
      assertEquals("", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals((-2712L), indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotNull(indexResponse0);
      
      ByteOrder byteOrder0 = null;
      ArrayList<ChannelBuffer> arrayList0 = new ArrayList<ChannelBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean1 = false;
      CompositeChannelBuffer compositeChannelBuffer0 = new CompositeChannelBuffer(byteOrder0, arrayList0, boolean1);
      assertFalse(compositeChannelBuffer0.isDirect());
      assertEquals(0, compositeChannelBuffer0.numComponents());
      assertFalse(compositeChannelBuffer0.readable());
      assertEquals(0, compositeChannelBuffer0.readerIndex());
      assertEquals(0, compositeChannelBuffer0.capacity());
      assertFalse(compositeChannelBuffer0.hasArray());
      assertEquals(0, compositeChannelBuffer0.writerIndex());
      assertEquals(0, compositeChannelBuffer0.readableBytes());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(compositeChannelBuffer0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        compositeChannelBuffer0.toByteBuffer(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Too many bytes to convert - Needs1355, maximum is 0
         //
         verifyException("org.jboss.netty.buffer.CompositeChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      int int0 = 253;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(253, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(253, byteBuffer0.capacity());
      assertEquals(253, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=253 cap=253]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(253, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(253, byteBuffer0.capacity());
      assertEquals(253, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=253 cap=253]", byteBuffer0.toString());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(242, byteBuffer0.remaining());
      assertEquals(11, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(253, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=253 cap=253]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(253, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-64);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-85);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-33);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)107;
      byteArray0[4] = byte4;
      byte byte5 = (byte)21;
      byteArray0[5] = byte5;
      BytesArray bytesArray0 = new BytesArray(byteArray0, byte2, byteArray0[5]);
      assertEquals(6, byteArray0.length);
      assertEquals((-33), bytesArray0.arrayOffset());
      assertEquals(21, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte3);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-85), (byte) (-33), (byte)0, (byte)107, (byte)21}, byteArray0);
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(6, byteArray0.length);
      assertEquals((-33), bytesArray0.arrayOffset());
      assertEquals(21, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte3);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-85), (byte) (-33), (byte)0, (byte)107, (byte)21}, byteArray0);
      assertNotNull(streamInput0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -33
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      int int0 = 220;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = 693L;
      boolean boolean2 = true;
      boolean boolean3 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean3);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean3);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(693L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      long long1 = (-138L);
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long1, boolean1);
      assertEquals((-138L), indexResponse0.getVersion());
      assertEquals("", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean3);
      assertTrue(boolean1 == boolean0);
      assertFalse(long1 == long0);
      assertNotNull(indexResponse0);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      String string1 = "Zy!48HkEHGV";
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string1);
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("Zy!48HkEHGV", defaultHttpRequest0.getUri());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(defaultHttpRequest0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertNotNull(fakeRestRequest0);
      
      try { 
        updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      int int0 = 220;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean2);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean2);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, bigArrays0.INT_PAGE_SIZE, boolean1);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(4096L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertNotNull(indexResponse0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertNotNull(httpMethod0);
      
      DefaultHttpRequest defaultHttpRequest0 = new DefaultHttpRequest(httpVersion0, httpMethod0, string0);
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(defaultHttpRequest0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      NettyHttpRequest nettyHttpRequest0 = new NettyHttpRequest(defaultHttpRequest0, channel0);
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertNotNull(nettyHttpRequest0);
      
      boolean boolean3 = nettyHttpRequest0.hasContent();
      assertEquals("PUT", httpMethod0.getName());
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("", defaultHttpRequest0.getUri());
      assertFalse(defaultChannelPipeline0.isAttached());
      assertEquals("", nettyHttpRequest0.rawPath());
      assertEquals("", nettyHttpRequest0.uri());
      assertEquals(RestRequest.Method.PUT, nettyHttpRequest0.method());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string1 = indexResponse0.getType();
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(4096L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals("", string1);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean3);
      assertTrue(boolean1 == boolean0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      try { 
        indexResponse0.toXContent(xContentBuilder0, nettyHttpRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "";
      int int0 = 220;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean2);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean2);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals(14, releasableBytesStreamOutput0.size());
      assertEquals(14L, releasableBytesStreamOutput0.position());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, bigArrays0.INT_PAGE_SIZE, boolean1);
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("", indexResponse0.getId());
      assertEquals("", indexResponse0.getType());
      assertEquals(4096L, indexResponse0.getVersion());
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertNotNull(indexResponse0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      assertFalse(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.0", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(0, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.0", httpVersion0.getText());
      assertNotNull(httpVersion0);
      
      HttpMethod httpMethod0 = HttpMethod.PUT;
      assertEquals("PUT", httpMethod0.toString());
      assertEquals("PUT", httpMethod0.getName());
      assertNotNull(httpMethod0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Channel channel0 = defaultChannelPipeline0.getChannel();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channel0);
      
      long long0 = updateResponse0.getVersion();
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertEquals(220L, long0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertEquals(220, shardId0.id());
      assertEquals(220, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(220L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getType());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(getResult0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "ylS@PW[}";
      int int0 = 35;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(35, shardId0.id());
      assertEquals(35, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals(35, shardId0.id());
      assertEquals(35, shardId0.getId());
      assertEquals("ylS@PW[}", deleteResponse0.getId());
      assertTrue(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("ylS@PW[}", deleteResponse0.getType());
      assertEquals(35L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(cborXContent0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) cborXContent0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(xContentBuilder0);
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNotNull(fakeRestRequest0);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNotNull(toXContent_DelegatingMapParams0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Index index0 = null;
      int int0 = (-765);
      ShardId shardId0 = new ShardId(index0, int0);
      assertEquals((-765), shardId0.getId());
      assertEquals((-765), shardId0.id());
      assertNotNull(shardId0);
      
      String string0 = null;
      long long0 = 0L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, long0, boolean0);
      assertEquals((-765), shardId0.getId());
      assertEquals((-765), shardId0.id());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertEquals((-765), shardId0.getId());
      assertEquals((-765), shardId0.id());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals((-765), shardId1.getId());
      assertEquals((-765), shardId1.id());
      assertNotNull(shardId1);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)64;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-73);
      byteArray0[1] = byte1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)64, (byte) (-73)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)64, (byte) (-73)}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, byte0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(byte0 == byte1);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-73)}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(bufferedInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(byte0 == byte1);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-73)}, byteArray0);
      assertNotNull(inputStreamStreamInput0);
      
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      InternalAggregations internalAggregations0 = InternalAggregations.EMPTY;
      assertNotNull(internalAggregations0);
      
      String string0 = "org.elasticsearch.action.DocWriteResponse$Fields";
      double double0 = (-2099.0);
      double double1 = (-1321.72099205);
      GeoDistanceSortBuilder geoDistanceSortBuilder0 = new GeoDistanceSortBuilder(string0, double0, double1);
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(GeoDistance.SLOPPY_ARC, geoDistanceSortBuilder0.geoDistance());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", geoDistanceSortBuilder0.fieldName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(geoDistanceSortBuilder0);
      
      GeoDistance geoDistance0 = GeoDistance.PLANE;
      GeoDistanceSortBuilder geoDistanceSortBuilder1 = geoDistanceSortBuilder0.geoDistance(geoDistance0);
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", geoDistanceSortBuilder0.fieldName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.PLANE, geoDistanceSortBuilder0.geoDistance());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(GeoDistance.PLANE, geoDistanceSortBuilder1.geoDistance());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertNotNull(yamlXContent0);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = geoDistanceSortBuilder1.toXContent(xContentBuilder0, toXContent_Params0);
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", geoDistanceSortBuilder0.fieldName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.PLANE, geoDistanceSortBuilder0.geoDistance());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(GeoDistance.PLANE, geoDistanceSortBuilder1.geoDistance());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(xContentBuilder1);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      XContentBuilder xContentBuilder2 = internalAggregations0.toXContentInternal(xContentBuilder1, toXContent_Params0);
      assertNull(geoDistanceSortBuilder0.getNestedPath());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder0.validation());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder0.order());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", geoDistanceSortBuilder0.fieldName());
      assertNull(geoDistanceSortBuilder0.sortMode());
      assertEquals("_geo_distance", geoDistanceSortBuilder0.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder0.unit());
      assertEquals(GeoDistance.PLANE, geoDistanceSortBuilder0.geoDistance());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", geoDistanceSortBuilder1.fieldName());
      assertNull(geoDistanceSortBuilder1.sortMode());
      assertEquals(GeoValidationMethod.STRICT, geoDistanceSortBuilder1.validation());
      assertEquals(SortOrder.ASC, geoDistanceSortBuilder1.order());
      assertNull(geoDistanceSortBuilder1.getNestedPath());
      assertEquals(GeoDistance.PLANE, geoDistanceSortBuilder1.geoDistance());
      assertEquals("_geo_distance", geoDistanceSortBuilder1.getWriteableName());
      assertEquals(DistanceUnit.METERS, geoDistanceSortBuilder1.unit());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(xContentBuilder2);
      assertSame(geoDistanceSortBuilder0, geoDistanceSortBuilder1);
      assertSame(geoDistanceSortBuilder1, geoDistanceSortBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=found)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "ylS@PW[}";
      int int0 = 35;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(35, shardId0.id());
      assertEquals(35, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals(35, shardId0.id());
      assertEquals(35, shardId0.getId());
      assertEquals("ylS@PW[}", deleteResponse0.getId());
      assertEquals(35L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("ylS@PW[}", deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(cborXContent0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) cborXContent0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(xContentBuilder0);
      
      String string1 = "L";
      XContentBuilder xContentBuilder1 = xContentBuilder0.timeValueField(stringArray0[3], string1, (long) int0);
      assertEquals(9, stringArray0.length);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertNotNull(fakeRestRequest0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertNotNull(replicationResponse_ShardInfo0);
      
      deleteResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals(35, shardId0.id());
      assertEquals(35, shardId0.getId());
      assertEquals(RestStatus.OK, deleteResponse0.status());
      assertEquals("ylS@PW[}", deleteResponse0.getId());
      assertEquals(35L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("ylS@PW[}", deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertNotSame(string0, string1);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(getResult0);
      
      updateResponse0.setGetResult(getResult0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertNotNull(toXContent_DelegatingMapParams0);
      
      XContentBuilder xContentBuilder2 = deleteResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertEquals(9, stringArray0.length);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(35, shardId0.id());
      assertEquals(35, shardId0.getId());
      assertEquals(RestStatus.OK, deleteResponse0.status());
      assertEquals("ylS@PW[}", deleteResponse0.getId());
      assertEquals(35L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals("ylS@PW[}", deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      
      long long0 = (-2136L);
      boolean boolean2 = true;
      UpdateResponse updateResponse1 = new UpdateResponse(shardId0, string0, string0, long0, boolean2);
      assertEquals(35, shardId0.id());
      assertEquals(35, shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse1.status());
      assertTrue(updateResponse1.isCreated());
      assertEquals((-2136L), updateResponse1.getVersion());
      assertEquals("ylS@PW[}", updateResponse1.getType());
      assertFalse(updateResponse1.forcedRefresh());
      assertEquals("ylS@PW[}", updateResponse1.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertNotNull(updateResponse1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(streamInput0);
      
      try { 
        updateResponse1.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNotNull(deleteResponse0);
      
      int int0 = 157;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(157, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=157 cap=157]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(157, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(157, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(157, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=157 cap=157]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(157, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(157, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotNull(byteBufferBytesReference0);
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(157, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=157 cap=157]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(157, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(157, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(146, byteBuffer0.remaining());
      assertEquals(157, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=157 cap=157]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(157, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(11, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertNotNull(shardId0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "TE";
      int int0 = (-1943);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals((-1943), shardId0.id());
      assertEquals((-1943), shardId0.getId());
      assertNotNull(shardId0);
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertEquals((-1943), shardId0.id());
      assertEquals((-1943), shardId0.getId());
      assertEquals("TE", updateResponse0.getType());
      assertEquals((-1943L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("TE", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNotNull(updateResponse0);
      
      updateResponse0.setForcedRefresh(boolean0);
      assertEquals((-1943), shardId0.id());
      assertEquals((-1943), shardId0.getId());
      assertEquals("TE", updateResponse0.getType());
      assertEquals((-1943L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("TE", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0.LONG_PAGE_SIZE, bigArrays0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      long long0 = (-2862L);
      releasableBytesStreamOutput0.seek(long0);
      assertEquals((-2862), releasableBytesStreamOutput0.size());
      assertEquals((-2862L), releasableBytesStreamOutput0.position());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(releasableBytesStreamOutput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2862
         //
         verifyException("org.elasticsearch.common.util.BigArrays$ByteArrayWrapper", e);
      }
  }
}
