/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 08:39:52 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.SocketAddress;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.SocketChannel;
import java.sql.SQLNonTransientException;
import java.util.ArrayList;
import java.util.Hashtable;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionRequestValidationException;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.get.MultiGetRequest;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.main.MainRequest;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.ParentTaskAssigningClient;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.PagedBytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.DummyTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.common.util.DoubleArray;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.http.netty.NettyHttpRequest;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.mapper.FieldMapper;
import org.elasticsearch.index.query.InnerHitBuilder;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.CircuitBreakerStats;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.bucket.missing.MissingAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.aggregations.support.ValueType;
import org.elasticsearch.search.fetch.source.FetchSourceContext;
import org.elasticsearch.search.internal.ShardSearchTransportRequest;
import org.elasticsearch.search.rescore.QueryRescorerBuilder;
import org.elasticsearch.search.sort.ScoreSortBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.elasticsearch.search.suggest.CustomSuggesterSearchIT;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.tasks.TaskId;
import org.elasticsearch.test.rest.FakeRestChannel;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
import org.jboss.netty.handler.codec.http.HttpMethod;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string0 = deleteResponse0.getType();
      assertNull(string0);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string1 = deleteResponse0.getId();
      assertNull(string1);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = true;
      ByteArray byteArray0 = mockBigArrays0.newByteArray((long) mockBigArrays0.INT_PAGE_SIZE, boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(byteArray0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      
      PagedBytesReference pagedBytesReference0 = new PagedBytesReference(mockBigArrays0, byteArray0, mockBigArrays0.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(pagedBytesReference0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(4096, pagedBytesReference0.length());
      
      StreamInput streamInput0 = pagedBytesReference0.streamInput();
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(streamInput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(4096, pagedBytesReference0.length());
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(4096, pagedBytesReference0.length());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(mockBigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      deleteResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(11L, releasableBytesStreamOutput0.position());
      assertEquals(11, releasableBytesStreamOutput0.size());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNull(shardId0);
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string0 = "?$RbO$\"Q[(?&|ejV";
      int int0 = 2958;
      ShardId shardId1 = new ShardId(string0, string0, int0);
      assertNotNull(shardId1);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId1, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getType());
      assertEquals(2958L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(string0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotNull(xContentBuilder2);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getType());
      assertEquals(2958L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertNotNull(xContentBuilder3);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getType());
      assertEquals(2958L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder3.humanReadable());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder3.contentType());
      
      XContentBuilder xContentBuilder4 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder4);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder4);
      assertSame(xContentBuilder4, xContentBuilder0);
      assertSame(xContentBuilder4, xContentBuilder3);
      assertSame(xContentBuilder4, xContentBuilder1);
      assertSame(xContentBuilder4, xContentBuilder2);
      assertNotNull(xContentBuilder4);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getType());
      assertEquals(2958L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
      assertFalse(xContentBuilder4.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder4.contentType());
      assertFalse(xContentBuilder4.isPrettyPrint());
      
      boolean boolean1 = deleteResponse0.isFound();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int0 = Integer.MIN_VALUE;
      DirectChannelBufferFactory directChannelBufferFactory0 = null;
      try {
        directChannelBufferFactory0 = new DirectChannelBufferFactory(byteOrder0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // preallocatedBufCapacity must be greater than 0: -2147483648
         //
         verifyException("org.jboss.netty.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      ShardSearchTransportRequest shardSearchTransportRequest0 = new ShardSearchTransportRequest();
      assertNotNull(shardSearchTransportRequest0);
      
      // Undeclared exception!
      try { 
        shardSearchTransportRequest0.shardId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.internal.ShardSearchTransportRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "5]3";
      long long0 = (-1587L);
      long long1 = 256L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals("", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(256L, indexResponse0.getVersion());
      assertEquals((-1587L), indexResponse0.getSeqNo());
      assertEquals("5]3", indexResponse0.getId());
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      
      DeleteResponse deleteResponse1 = deleteAction0.newResponse();
      assertNotSame(deleteResponse1, deleteResponse0);
      assertNotNull(deleteResponse1);
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse1.getId());
      assertEquals(0L, deleteResponse1.getSeqNo());
      assertFalse(deleteResponse1.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertEquals(0L, deleteResponse1.getVersion());
      assertNull(deleteResponse1.getType());
      
      RestStatus restStatus0 = deleteResponse1.status();
      assertNotSame(deleteResponse1, deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse1.getId());
      assertEquals(0L, deleteResponse1.getSeqNo());
      assertFalse(deleteResponse1.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertEquals(0L, deleteResponse1.getVersion());
      assertNull(deleteResponse1.getType());
      assertEquals(404, restStatus0.getStatus());
      
      int int0 = 1058;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(1, byteArray0.length);
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      
      boolean boolean0 = deleteResponse0.isFound();
      assertFalse(boolean0);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)28;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)26;
      byteArray0[2] = byte2;
      byte byte3 = (byte)108;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-73);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      int int0 = (-4174);
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, (int) byte4);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)26, (byte)108, (byte) (-73), (byte)0}, byteArray0);
      assertNotNull(streamInput0);
      assertFalse(byte4 == byte3);
      assertFalse(byte4 == byte5);
      assertFalse(byte4 == byte1);
      assertFalse(byte4 == byte0);
      assertFalse(byte4 == byte2);
      assertEquals(6, byteArray0.length);
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      
      VersionType versionType0 = VersionType.EXTERNAL_GTE;
      DeleteRequest deleteRequest1 = deleteRequest0.versionType(versionType0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      
      String string1 = "r";
      DeleteRequest deleteRequest2 = deleteRequest1.type(string1);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotNull(deleteRequest2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("r", deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.parent());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("", deleteRequest2.index());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("r", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.refresh());
      assertEquals((-3L), deleteRequest2.version());
      
      String string2 = "org.elasticsearch.action.DocWriteResponse";
      DeleteRequest deleteRequest3 = deleteRequest2.id(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest1);
      assertNotNull(deleteRequest3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("r", deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.parent());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("", deleteRequest2.index());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("r", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.refresh());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("r", deleteRequest3.type());
      assertEquals(0L, deleteRequest3.seqNo());
      assertFalse(deleteRequest3.refresh());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals((-3L), deleteRequest3.version());
      assertNull(deleteRequest3.routing());
      assertNull(deleteRequest3.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest3.id());
      assertEquals("", deleteRequest3.index());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest3.versionType());
      assertEquals(0L, deleteRequest3.primaryTerm());
      
      String string3 = "V@xL{_~J~(Ao%hAhvS";
      DeleteRequest deleteRequest4 = deleteRequest1.versionType(versionType0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest4);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest4);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest4, deleteRequest3);
      assertSame(deleteRequest4, deleteRequest0);
      assertSame(deleteRequest4, deleteRequest1);
      assertSame(deleteRequest4, deleteRequest2);
      assertNotNull(deleteRequest4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("r", deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("r", deleteRequest4.type());
      assertEquals((-3L), deleteRequest4.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest4.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest4.id());
      assertEquals(0L, deleteRequest4.primaryTerm());
      assertFalse(deleteRequest4.getShouldPersistResult());
      assertNull(deleteRequest4.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest4.consistencyLevel());
      assertFalse(deleteRequest4.refresh());
      assertEquals("", deleteRequest4.index());
      assertEquals(0L, deleteRequest4.seqNo());
      assertNull(deleteRequest4.parent());
      
      DeleteRequest deleteRequest5 = deleteRequest1.parent(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest4);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest5);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest5);
      assertSame(deleteRequest1, deleteRequest4);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(deleteRequest5, deleteRequest1);
      assertSame(deleteRequest5, deleteRequest2);
      assertSame(deleteRequest5, deleteRequest0);
      assertSame(deleteRequest5, deleteRequest4);
      assertSame(deleteRequest5, deleteRequest3);
      assertNotNull(deleteRequest5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest0.parent());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("r", deleteRequest1.type());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest5.routing());
      assertEquals("", deleteRequest5.index());
      assertFalse(deleteRequest5.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest5.parent());
      assertFalse(deleteRequest5.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest5.consistencyLevel());
      assertEquals("r", deleteRequest5.type());
      assertEquals(0L, deleteRequest5.seqNo());
      assertEquals(0L, deleteRequest5.primaryTerm());
      assertEquals((-3L), deleteRequest5.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest5.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest5.id());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest4);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest5);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest5);
      assertSame(deleteRequest1, deleteRequest4);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest4);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest5);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNull(shardId0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest0.parent());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("r", deleteRequest1.type());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("", deleteRequest2.index());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("r", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.refresh());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest2.parent());
      assertEquals((-3L), deleteRequest2.version());
      
      String string4 = ">AS!{4&/:ly(6Jw";
      DeleteRequest deleteRequest6 = deleteRequest0.index(string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest4);
      assertSame(deleteRequest0, deleteRequest6);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest5);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(deleteRequest6, deleteRequest2);
      assertSame(deleteRequest6, deleteRequest1);
      assertSame(deleteRequest6, deleteRequest0);
      assertSame(deleteRequest6, deleteRequest4);
      assertSame(deleteRequest6, deleteRequest5);
      assertSame(deleteRequest6, deleteRequest3);
      assertNotNull(deleteRequest6);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest0.parent());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest6.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest6.parent());
      assertNull(deleteRequest6.routing());
      assertEquals((-3L), deleteRequest6.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest6.consistencyLevel());
      assertEquals("r", deleteRequest6.type());
      assertFalse(deleteRequest6.refresh());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest6.index());
      assertEquals(0L, deleteRequest6.seqNo());
      assertEquals(0L, deleteRequest6.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest6.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest6.id());
      
      String string5 = "";
      long long0 = 2088L;
      long long1 = (-3975L);
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string5, long0, long1, boolean0);
      assertNotNull(deleteResponse0);
      assertFalse(long1 == long0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest0.parent());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteResponse0.getType());
      assertEquals((-3975L), deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(2088L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("r", deleteRequest1.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("r", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.refresh());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest2.parent());
      assertEquals((-3L), deleteRequest2.version());
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string4);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest4);
      assertSame(deleteRequest0, deleteRequest6);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest5);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest5);
      assertSame(deleteRequest1, deleteRequest6);
      assertSame(deleteRequest1, deleteRequest4);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest4);
      assertSame(deleteRequest2, deleteRequest6);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest5);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNull(shardId1);
      assertFalse(long1 == long0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest0.parent());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteResponse0.getType());
      assertEquals((-3975L), deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(2088L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("r", deleteRequest1.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("r", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.refresh());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest2.parent());
      assertEquals((-3L), deleteRequest2.version());
      
      long long2 = deleteResponse0.getSeqNo();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string4);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest4);
      assertSame(deleteRequest0, deleteRequest6);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest5);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest5);
      assertSame(deleteRequest1, deleteRequest6);
      assertSame(deleteRequest1, deleteRequest4);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest4);
      assertSame(deleteRequest2, deleteRequest6);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest5);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertEquals(2088L, long2);
      assertFalse(long1 == long0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest0.parent());
      assertFalse(deleteRequest0.refresh());
      assertEquals("r", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteResponse0.getType());
      assertEquals((-3975L), deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(2088L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("r", deleteRequest1.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(">AS!{4&/:ly(6Jw", deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("r", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.refresh());
      assertEquals("V@xL{_~J~(Ao%hAhvS", deleteRequest2.parent());
      assertEquals((-3L), deleteRequest2.version());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      byteArrayBuilder0.release();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(byteArrayBuilder0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(outputStreamStreamOutput0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      outputStreamStreamOutput0.flush();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(outputStreamStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      String string0 = deleteResponse0.getType();
      assertNull(string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      String string1 = deleteResponse0.getId();
      assertNull(string1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(404, restStatus0.getStatus());
      
      int int0 = 0;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = mockBigArrays0.withCircuitBreaking();
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(bigArrays0);
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = true;
      DoubleArray doubleArray0 = mockBigArrays0.newDoubleArray((long) bigArrays0.INT_PAGE_SIZE, boolean0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(doubleArray0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, doubleArray0.size());
      
      long long0 = 4L;
      DoubleArray doubleArray1 = bigArrays0.resize(doubleArray0, long0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4L, doubleArray0.size());
      assertEquals(4L, doubleArray1.size());
      
      BigArrays bigArrays1 = bigArrays0.withCircuitBreaking();
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(mockBigArrays0, bigArrays1);
      assertNotSame(bigArrays0, bigArrays1);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotSame(bigArrays1, bigArrays0);
      assertNotSame(bigArrays1, mockBigArrays0);
      assertNotNull(bigArrays1);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(bigArrays1.equals((Object)bigArrays0));
      assertFalse(bigArrays1.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(releasableBytesStreamOutput0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(mockBigArrays0.equals((Object)bigArrays1));
      assertFalse(bigArrays0.equals((Object)bigArrays1));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(bigArrays1.equals((Object)bigArrays0));
      assertFalse(bigArrays1.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(releasableBytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      
      VersionType versionType0 = VersionType.EXTERNAL_GTE;
      DeleteRequest deleteRequest1 = deleteRequest0.versionType(versionType0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      
      long long0 = 9223372036854L;
      DeleteRequest deleteRequest2 = deleteRequest1.version(long0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotNull(deleteRequest2);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(9223372036854L, deleteRequest0.version());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest1.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(9223372036854L, deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.id());
      assertEquals(9223372036854L, deleteRequest2.version());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNull(shardId0);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(9223372036854L, deleteRequest0.version());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest1.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(9223372036854L, deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.id());
      assertEquals(9223372036854L, deleteRequest2.version());
      
      String string0 = null;
      String string1 = "";
      long long1 = 4301L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long1, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(9223372036854L, deleteRequest0.version());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest1.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(9223372036854L, deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.id());
      assertEquals(9223372036854L, deleteRequest2.version());
      assertEquals(4301L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 1739;
      String string0 = "'}~k|>}Sw$2";
      int int1 = (-4740);
      XContentLocation xContentLocation0 = new XContentLocation(int1, int0);
      assertEquals((-4740), xContentLocation0.lineNumber);
      assertEquals(1739, xContentLocation0.columnNumber);
      assertNotNull(xContentLocation0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string1);
      assertNotNull(sQLNonTransientException0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLNonTransientException0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) string0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) sQLNonTransientException0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[5] = object2;
      objectArray0[6] = (Object) string0;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, sQLNonTransientException0, objectArray0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals((-4740), xContentLocation0.lineNumber);
      assertEquals(1739, xContentLocation0.columnNumber);
      assertNotNull(parsingException0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, objectArray0.length);
      
      ParsingException parsingException1 = new ParsingException(int0, int0, string0, parsingException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals((-4740), xContentLocation0.lineNumber);
      assertEquals(1739, xContentLocation0.columnNumber);
      assertNotNull(parsingException1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(parsingException1.equals((Object)parsingException0));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, objectArray0.length);
      
      ShardId shardId0 = parsingException1.getShardId();
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals((-4740), xContentLocation0.lineNumber);
      assertEquals(1739, xContentLocation0.columnNumber);
      assertNotSame(parsingException0, parsingException1);
      assertNotSame(string0, string1);
      assertNotSame(parsingException1, parsingException0);
      assertNotSame(string1, string0);
      assertNull(shardId0);
      assertFalse(int0 == int1);
      assertFalse(parsingException0.equals((Object)parsingException1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(parsingException1.equals((Object)parsingException0));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1739, parsingException0.getColumnNumber());
      assertEquals((-4740), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(1739, parsingException1.getLineNumber());
      assertEquals(1739, parsingException1.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException1.status());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(7, objectArray0.length);
      
      String string2 = "G^sSblK`;ZIZ";
      String string3 = "";
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string2, string3, int1, parsingException1.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals((-4740), xContentLocation0.lineNumber);
      assertEquals(1739, xContentLocation0.columnNumber);
      assertNotNull(updateResponse0);
      assertFalse(int0 == int1);
      assertFalse(parsingException0.equals((Object)parsingException1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(parsingException1.equals((Object)parsingException0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1739, parsingException0.getColumnNumber());
      assertEquals((-4740), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(1739, parsingException1.getLineNumber());
      assertEquals(1739, parsingException1.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException1.status());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-4740L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("G^sSblK`;ZIZ", updateResponse0.getType());
      assertEquals(7, objectArray0.length);
      
      String string4 = updateResponse0.getType();
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals((-4740), xContentLocation0.lineNumber);
      assertEquals(1739, xContentLocation0.columnNumber);
      assertNotSame(parsingException0, parsingException1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(parsingException1, parsingException0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string4);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("G^sSblK`;ZIZ", string4);
      assertNotNull(string4);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(parsingException0.equals((Object)parsingException1));
      assertFalse(parsingException1.equals((Object)parsingException0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1739, parsingException0.getColumnNumber());
      assertEquals((-4740), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(1739, parsingException1.getLineNumber());
      assertEquals(1739, parsingException1.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException1.status());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-4740L), updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("G^sSblK`;ZIZ", updateResponse0.getType());
      assertEquals(7, objectArray0.length);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = null;
      try {
        releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(xContentLocation0.lineNumber, mockBigArrays0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.util.BigArrays", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "HV'";
      int int0 = (-249);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-249), shardId0.getId());
      assertEquals((-249), shardId0.id());
      
      String string1 = ":3]2-21wmbf*Z@'";
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-249), shardId0.getId());
      assertEquals((-249), shardId0.id());
      assertEquals((-249L), updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(":3]2-21wmbf*Z@'", updateResponse0.getType());
      assertEquals("HV'", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      String string2 = updateResponse0.getIndex();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("HV'", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-249), shardId0.getId());
      assertEquals((-249), shardId0.id());
      assertEquals((-249L), updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(":3]2-21wmbf*Z@'", updateResponse0.getType());
      assertEquals("HV'", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      int int1 = 0;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int1);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int1 == int0);
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(littleEndianHeapChannelBuffer0);
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int1 == int0);
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(duplicatedChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertFalse(int1 == int0);
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertFalse(int1 == int0);
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        ReplicationResponse.ShardInfo.readShardInfo(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      long long0 = updateResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "O!|.*k*%Eb|bhc*$u";
      long long1 = 0L;
      boolean boolean0 = true;
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      updateResponse0.setGetResult(getResult0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long1, long1, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(long1 == long0);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("O!|.*k*%Eb|bhc*$u", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      
      StreamOutput streamOutput0 = null;
      FieldMapper.MultiFields fieldMapper_MultiFields0 = FieldMapper.MultiFields.empty();
      assertNotNull(fieldMapper_MultiFields0);
      
      String string2 = "";
      ValueType valueType0 = ValueType.IP;
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(string2, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertNotNull(jsonXContent0);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      
      String[] stringArray0 = new String[5];
      String string3 = "org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltWintersModel";
      stringArray0[0] = string3;
      String string4 = "epOeN7Uc";
      stringArray0[1] = string4;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = cardinalityAggregationBuilder0.NAME;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals(5, stringArray0.length);
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = cardinalityAggregationBuilder0.doXContentBody(xContentBuilder0, toXContent_Params0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotNull(xContentBuilder1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals(5, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = fieldMapper_MultiFields0.toXContent(xContentBuilder1, toXContent_Params0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotNull(xContentBuilder2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      int int0 = 2139;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(2139, shardId0.getId());
      assertEquals(2139, shardId0.id());
      
      String string1 = "H&6;s";
      long long0 = (-42521587200000L);
      long long1 = 8L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(2139, shardId0.getId());
      assertEquals(2139, shardId0.id());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals((-42521587200000L), indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals("H&6;s", indexResponse0.getId());
      assertEquals("", indexResponse0.getType());
      
      long long2 = indexResponse0.getVersion();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(8L, long2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(2139, shardId0.getId());
      assertEquals(2139, shardId0.id());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals((-42521587200000L), indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals("H&6;s", indexResponse0.getId());
      assertEquals("", indexResponse0.getType());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      Client client0 = null;
      byte[] byteArray0 = new byte[0];
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(0, byteArray0.length);
      
      DiscoveryNode discoveryNode0 = null;
      try {
        discoveryNode0 = new DiscoveryNode(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      int int1 = (-662);
      XContentLocation xContentLocation0 = new XContentLocation(int0, int1);
      assertEquals((-662), xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      assertNotNull(xContentLocation0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = "$@vv8]GQ";
      Object[] objectArray0 = null;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, objectArray0);
      assertEquals((-662), xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotNull(parsingException0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ShardId shardId0 = new ShardId(parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE, parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE, int1);
      assertEquals((-662), xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotNull(shardId0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-662), parsingException0.getColumnNumber());
      assertEquals((-662), shardId0.getId());
      assertEquals((-662), shardId0.id());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, parsingException0.REST_EXCEPTION_SKIP_CAUSE, string0, int0, boolean0);
      assertEquals((-662), xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotNull(updateResponse0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-662), parsingException0.getColumnNumber());
      assertEquals((-662), shardId0.getId());
      assertEquals((-662), shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("rest.exception.cause.skip", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("$@vv8]GQ", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertEquals((-662), xContentLocation0.columnNumber);
      assertEquals(0, xContentLocation0.lineNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      assertNotNull(shardId1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-662), parsingException0.getColumnNumber());
      assertEquals((-662), shardId0.getId());
      assertEquals((-662), shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("rest.exception.cause.skip", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("$@vv8]GQ", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals((-662), shardId1.id());
      assertEquals((-662), shardId1.getId());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = null;
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string0, string0);
      assertNotNull(updateRequest0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      
      String string1 = "";
      UpdateRequest updateRequest1 = updateRequest0.id(string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertNotNull(updateRequest1);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      
      ShardId shardId0 = updateRequest1.getShardId();
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertNull(shardId0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      
      String string2 = "\\#H_gM^/^uQww)";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string3 = null;
      long long0 = (-1L);
      boolean boolean1 = true;
      UpdateRequest updateRequest2 = updateRequest1.detectNoop(boolean1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNotNull(updateRequest2);
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertEquals("", updateRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.concreteIndex());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.routing());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      
      boolean boolean2 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, string3, long0, long0, boolean2);
      assertNotNull(indexResponse0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertEquals("\\#H_gM^/^uQww)", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals((-1L), indexResponse0.getVersion());
      
      String string4 = indexResponse0.getType();
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(string2, string1);
      assertSame(string2, string4);
      assertNotSame(string4, string1);
      assertSame(string4, string2);
      assertEquals("\\#H_gM^/^uQww)", string4);
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertEquals("\\#H_gM^/^uQww)", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals((-1L), indexResponse0.getVersion());
      
      long long1 = indexResponse0.getVersion();
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(string2, string1);
      assertSame(string2, string4);
      assertEquals((-1L), long1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(long1 == long0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertEquals("\\#H_gM^/^uQww)", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals((-1L), indexResponse0.getVersion());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "#X fp";
      String string1 = "_index";
      long long0 = (-1L);
      boolean boolean0 = true;
      String string2 = "=";
      DeleteRequest deleteRequest0 = new DeleteRequest(string2);
      assertNotNull(deleteRequest0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertEquals("=", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      
      VersionType versionType0 = VersionType.EXTERNAL_GTE;
      DeleteRequest deleteRequest1 = deleteRequest0.versionType(versionType0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertEquals("=", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("=", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      
      DeleteRequest deleteRequest2 = deleteRequest1.type(string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertNotNull(deleteRequest2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertEquals("=", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_index", deleteRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.type());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("=", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.id());
      assertEquals("_index", deleteRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.refresh());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("=", deleteRequest2.index());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertNull(shardId0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertEquals("=", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_index", deleteRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.type());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("=", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.id());
      assertEquals("_index", deleteRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.refresh());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("=", deleteRequest2.index());
      
      String string3 = null;
      boolean boolean1 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string3, long0, long0, boolean1);
      assertNotNull(indexResponse0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertEquals("=", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_index", deleteRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.type());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("=", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.id());
      assertEquals("_index", deleteRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.refresh());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("=", deleteRequest2.index());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("_index", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      assertEquals((-1L), indexResponse0.getVersion());
      
      long long1 = indexResponse0.getSeqNo();
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertEquals((-1L), long1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertEquals("=", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_index", deleteRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.type());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("=", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.id());
      assertEquals("_index", deleteRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.refresh());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals("=", deleteRequest2.index());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("_index", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      assertEquals((-1L), indexResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-43);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-109);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-77);
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-43), (byte) (-109), (byte) (-77), (byte)4, (byte)0, (byte)0}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(7, byteArray0.length);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-43), (byte) (-109), (byte) (-77), (byte)4, (byte)0, (byte)0}, byteArray0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals(7, byteArray0.length);
      
      try { 
        updateResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      int int0 = 2469;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2469, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2469, byteBuffer0.capacity());
      assertEquals(2469, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2469 cap=2469]", byteBuffer0.toString());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2469, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2469, byteBuffer0.capacity());
      assertEquals(2469, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2469 cap=2469]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertNotNull(bytesArray0);
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2469, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2469, byteBuffer0.capacity());
      assertEquals(2469, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2469 cap=2469]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(2469, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertNotNull(streamInput0);
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2469, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2469, byteBuffer0.capacity());
      assertEquals(2469, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2469 cap=2469]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(2469, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)41;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-15);
      byteArray0[3] = byte3;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)41, (byte) (-15)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      indexResponse0.readFrom(streamInput0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2469, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2469, byteBuffer0.capacity());
      assertEquals(2469, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2469 cap=2469]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(2469, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertEquals(200, restStatus0.getStatus());
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertNotNull(shardId0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string0 = indexResponse0.getId();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNotNull(updateRequest0);
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)43;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-114);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      UpdateRequest updateRequest1 = updateRequest0.doc(byteArray0, (int) byte0, (int) byteArray0[2]);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertArrayEquals(new byte[] {(byte)1, (byte)43, (byte) (-114), (byte)0}, byteArray0);
      assertNotNull(updateRequest1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte3);
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertEquals(4, byteArray0.length);
      
      String string0 = "_shard_id";
      UpdateRequest updateRequest2 = updateRequest1.doc(string0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertArrayEquals(new byte[] {(byte)1, (byte)43, (byte) (-114), (byte)0}, byteArray0);
      assertNotNull(updateRequest2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte3);
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals(4, byteArray0.length);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertArrayEquals(new byte[] {(byte)1, (byte)43, (byte) (-114), (byte)0}, byteArray0);
      assertNull(shardId0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte3);
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals(4, byteArray0.length);
      
      String string1 = null;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, byte0, byte1, boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte)43, (byte) (-114), (byte)0}, byteArray0);
      assertNotNull(deleteResponse0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte3);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte2);
      assertEquals(43L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_shard_id", deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals(4, byteArray0.length);
      
      long long0 = deleteResponse0.getSeqNo();
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte)1, (byte)43, (byte) (-114), (byte)0}, byteArray0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte3);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte2);
      assertEquals(43L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_shard_id", deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = (-791);
      int int1 = (-1);
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[2];
      int int2 = 0;
      XContentLocation xContentLocation0 = new XContentLocation(int1, int2);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertNotNull(xContentLocation0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string0 = "org.joda.time.base.AbstractInterval";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) string0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) string0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) xContentLocation0;
      objectArray0[6] = (Object) string0;
      objectArray0[7] = (Object) string0;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, objectArray0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertNotNull(parsingException0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, objectArray0.length);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertNull(shardId0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(8, objectArray0.length);
      
      RestStatus restStatus0 = RestStatus.GONE;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure(shardId0, string0, parsingException0, restStatus0, parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertTrue(replicationResponse_ShardInfo_Failure0.primary());
      assertEquals("org.joda.time.base.AbstractInterval", replicationResponse_ShardInfo_Failure0.nodeId());
      assertEquals(RestStatus.GONE, replicationResponse_ShardInfo_Failure0.status());
      assertEquals(8, objectArray0.length);
      
      replicationResponse_ShardInfo_FailureArray0[0] = replicationResponse_ShardInfo_Failure0;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure1 = new ReplicationResponse.ShardInfo.Failure();
      assertNotNull(replicationResponse_ShardInfo_Failure1);
      assertFalse(replicationResponse_ShardInfo_Failure1.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertNull(replicationResponse_ShardInfo_Failure1.nodeId());
      assertFalse(replicationResponse_ShardInfo_Failure1.primary());
      assertNull(replicationResponse_ShardInfo_Failure1.status());
      
      replicationResponse_ShardInfo_FailureArray0[1] = replicationResponse_ShardInfo_Failure1;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int1, replicationResponse_ShardInfo_FailureArray0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(2, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-1), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals((-791), replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.GONE, replicationResponse_ShardInfo0.status());
      assertEquals(2, replicationResponse_ShardInfo_FailureArray0.length);
      
      long long0 = (-3305L);
      String string1 = replicationResponse_ShardInfo_Failure1.reason();
      assertNotSame(replicationResponse_ShardInfo_Failure1, replicationResponse_ShardInfo_Failure0);
      assertNotSame(string1, string0);
      assertEquals("Unknown", string1);
      assertNotNull(string1);
      assertFalse(replicationResponse_ShardInfo_Failure1.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(string1.equals((Object)string0));
      assertNull(replicationResponse_ShardInfo_Failure1.nodeId());
      assertFalse(replicationResponse_ShardInfo_Failure1.primary());
      assertNull(replicationResponse_ShardInfo_Failure1.status());
      
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, parsingException0.REST_EXCEPTION_SKIP_CAUSE, parsingException0.REST_EXCEPTION_SKIP_CAUSE, long0, xContentLocation0.lineNumber, parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertNotNull(updateResponse0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(2, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-1), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals((-791), replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.GONE, replicationResponse_ShardInfo0.status());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("rest.exception.cause.skip", updateResponse0.getId());
      assertEquals("rest.exception.cause.skip", updateResponse0.getType());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals((-3305L), updateResponse0.getSeqNo());
      assertEquals(2, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(8, objectArray0.length);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertNotSame(string0, string1);
      assertNull(shardId1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(2, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-1), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals((-791), replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.GONE, replicationResponse_ShardInfo0.status());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("rest.exception.cause.skip", updateResponse0.getId());
      assertEquals("rest.exception.cause.skip", updateResponse0.getType());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals((-3305L), updateResponse0.getSeqNo());
      assertEquals(2, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(8, objectArray0.length);
      
      String string2 = updateResponse0.getId();
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("rest.exception.cause.skip", string2);
      assertNotNull(string2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals(2, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-1), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals((-791), replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.GONE, replicationResponse_ShardInfo0.status());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("rest.exception.cause.skip", updateResponse0.getId());
      assertEquals("rest.exception.cause.skip", updateResponse0.getType());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals((-3305L), updateResponse0.getSeqNo());
      assertEquals(2, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = (-1);
      int int1 = 1;
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[1];
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      
      String string0 = "M; >";
      DeleteRequest deleteRequest1 = deleteRequest0.type(string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals("M; >", deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("M; >", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(shardId0);
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals("M; >", deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("M; >", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      
      MainRequest mainRequest0 = new MainRequest();
      assertNotNull(mainRequest0);
      assertFalse(mainRequest0.getShouldPersistResult());
      
      ActionRequestValidationException actionRequestValidationException0 = mainRequest0.validate();
      assertNull(actionRequestValidationException0);
      assertFalse(mainRequest0.getShouldPersistResult());
      
      RestStatus restStatus0 = RestStatus.OK;
      boolean boolean0 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure(shardId0, string0, actionRequestValidationException0, restStatus0, boolean0);
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals("M; >", deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("M; >", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertFalse(mainRequest0.getShouldPersistResult());
      assertEquals("M; >", replicationResponse_ShardInfo_Failure0.nodeId());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo_Failure0.status());
      assertFalse(replicationResponse_ShardInfo_Failure0.primary());
      
      replicationResponse_ShardInfo_FailureArray0[0] = replicationResponse_ShardInfo_Failure0;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int1, replicationResponse_ShardInfo_FailureArray0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-1), replicationResponse_ShardInfo0.getTotal());
      assertEquals(1, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1, replicationResponse_ShardInfo_FailureArray0.length);
      
      long long0 = 0L;
      long long1 = 1L;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string0, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("M; >", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("M; >", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals("M; >", deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("M; >", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-1), replicationResponse_ShardInfo0.getTotal());
      assertEquals(1, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1, replicationResponse_ShardInfo_FailureArray0.length);
      
      String string1 = "com.fasterxml.jackson.core.JsonGenerator";
      long long2 = 3310L;
      long long3 = 1974L;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long2, long3, boolean0);
      assertNotNull(deleteResponse0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long2 == long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals("M; >", deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("com.fasterxml.jackson.core.JsonGenerator", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(3310L, deleteResponse0.getSeqNo());
      assertEquals("M; >", deleteResponse0.getType());
      assertEquals(1974L, deleteResponse0.getVersion());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("M; >", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      
      XContentBuilder xContentBuilder0 = null;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(hashtable0, hashtable0);
      assertNotNull(fakeRestRequest0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      XContentBuilder xContentBuilder1 = YamlXContent.contentBuilder();
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder1, fakeRestRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=false)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      int int0 = 12;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertNotNull(bytesArray0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(12, bytesArray0.length());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(12, bytesArray0.length());
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0, byteBuffer0.position());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(12, bytesArray0.length());
      
      String string0 = deleteResponse0.getIndex();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      long long0 = deleteResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = JsonXContent.contentBuilder();
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      updateResponse0.setGetResult(getResult0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      long long0 = updateResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder1, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = 1;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(1, byteBuffer0.limit());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "_seq_no";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, int0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_seq_no", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(1L, updateResponse0.getVersion());
      
      String string2 = updateResponse0.getType();
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_seq_no", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(1L, updateResponse0.getVersion());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertNotSame(updateResponse1, updateResponse0);
      assertNotNull(updateResponse1);
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertNull(updateResponse1.getType());
      assertNull(updateResponse1.getId());
      assertFalse(updateResponse1.isCreated());
      assertEquals(0L, updateResponse1.getVersion());
      
      // Undeclared exception!
      try { 
        updateResponse1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "i";
      int int0 = 797;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(797, shardId0.getId());
      assertEquals(797, shardId0.id());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(797, shardId0.getId());
      assertEquals(797, shardId0.id());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(797L, indexResponse0.getSeqNo());
      assertEquals("i", indexResponse0.getId());
      assertEquals(797L, indexResponse0.getVersion());
      assertEquals("i", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      assertNotNull(shardId1);
      assertEquals(797, shardId0.getId());
      assertEquals(797, shardId0.id());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(797L, indexResponse0.getSeqNo());
      assertEquals("i", indexResponse0.getId());
      assertEquals(797L, indexResponse0.getVersion());
      assertEquals("i", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(797, shardId1.getId());
      assertEquals(797, shardId1.id());
      
      ScoreSortBuilder scoreSortBuilder0 = new ScoreSortBuilder();
      assertNotNull(scoreSortBuilder0);
      assertEquals("_score", scoreSortBuilder0.getWriteableName());
      assertEquals(SortOrder.DESC, scoreSortBuilder0.order());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      FakeRestChannel fakeRestChannel0 = new FakeRestChannel(fakeRestRequest0, boolean0, int0);
      assertNotNull(fakeRestChannel0);
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertTrue(fakeRestChannel0.detailedErrorsEnabled());
      
      XContentBuilder xContentBuilder0 = fakeRestChannel0.newErrorBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertTrue(fakeRestChannel0.detailedErrorsEnabled());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.latlon(string0, (double) int0, (double) int0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertTrue(fakeRestChannel0.detailedErrorsEnabled());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      XContentBuilder xContentBuilder2 = scoreSortBuilder0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotNull(xContentBuilder2);
      assertEquals("_score", scoreSortBuilder0.getWriteableName());
      assertEquals(SortOrder.DESC, scoreSortBuilder0.order());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertTrue(fakeRestChannel0.detailedErrorsEnabled());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      
      try { 
        indexResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "5Mw$`k3/Yf{T~&R1";
      int int0 = (-1);
      String string1 = "";
      String string2 = ">^:<M>Ii;o;>)F((Vi";
      String string3 = "";
      DeleteRequest deleteRequest0 = new DeleteRequest(string1, string2, string3);
      assertNotNull(deleteRequest0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest0.type());
      assertEquals("", deleteRequest0.id());
      
      DeleteRequest deleteRequest1 = deleteRequest0.id(string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest0.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest0.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      
      String string4 = "qf>";
      long long0 = (-119L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string4, string4, long0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest0.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("qf>", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("qf>", updateResponse0.getId());
      assertEquals((-119L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      boolean boolean1 = updateResponse0.isCreated();
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertFalse(boolean1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest0.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(">^:<M>Ii;o;>)F((Vi", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals("5Mw$`k3/Yf{T~&R1", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("qf>", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("qf>", updateResponse0.getId());
      assertEquals((-119L), updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      ByteBuffer byteBuffer0 = null;
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertTrue(byteBufferStreamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(byteBufferStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      TransportAddress transportAddress0 = updateResponse0.remoteAddress();
      assertNull(transportAddress0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      updateResponse0.remoteAddress(transportAddress0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      boolean boolean0 = updateResponse0.isCreated();
      assertFalse(boolean0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      int int0 = 2000;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(pipedInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        updateResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)38;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-66);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-111);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-53);
      byteArray0[3] = byte3;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-66), (byte) (-111), (byte) (-53)}, byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(4, byteArray0.length);
      
      int int0 = 0;
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice((int) byte0, int0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-66), (byte) (-111), (byte) (-53)}, byteArray0);
      assertNotNull(channelBuffer0);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(4, byteArray0.length);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-66), (byte) (-111), (byte) (-53)}, byteArray0);
      assertNotNull(channelBufferBytesReference0);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertEquals(4, byteArray0.length);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertArrayEquals(new byte[] {(byte)38, (byte) (-66), (byte) (-111), (byte) (-53)}, byteArray0);
      assertNotNull(streamInput0);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertEquals(0, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      ArrayList<QueryRescorerBuilder> arrayList0 = new ArrayList<QueryRescorerBuilder>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = 3225;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3225 cap=3225]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3225, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3225, byteBuffer0.capacity());
      assertEquals(3225, byteBuffer0.limit());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3225 cap=3225]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3225, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3225, byteBuffer0.capacity());
      assertEquals(3225, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3225 cap=3225]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3225, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3225, byteBuffer0.capacity());
      assertEquals(3225, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      indexResponse0.readFrom(streamInput0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals(3214, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=11 lim=3225 cap=3225]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3225, byteBuffer0.capacity());
      assertEquals(11, byteBuffer0.position());
      assertEquals(3225, byteBuffer0.limit());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      bytesStreamOutput0.writeList(arrayList0);
      assertEquals(1, bytesStreamOutput0.size());
      assertEquals(1L, bytesStreamOutput0.position());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      indexResponse0.writeTo(bytesStreamOutput0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals(12L, bytesStreamOutput0.position());
      assertEquals(12, bytesStreamOutput0.size());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string0 = deleteResponse0.getType();
      assertNull(string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string1 = deleteResponse0.getId();
      assertNull(string1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(404, restStatus0.getStatus());
      
      int int0 = 0;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = mockBigArrays0.withCircuitBreaking();
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(bigArrays0);
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = true;
      ByteArray byteArray0 = bigArrays0.newByteArray((long) mockBigArrays0.INT_PAGE_SIZE, boolean0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(byteArray0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      
      Random.setNextRandom(bigArrays0.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      PagedBytesReference pagedBytesReference0 = new PagedBytesReference(bigArrays0, byteArray0, mockBigArrays0.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(pagedBytesReference0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertEquals(4096, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      
      StreamInput streamInput0 = pagedBytesReference0.streamInput();
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(streamInput0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertEquals(4096, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertEquals(4096, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, mockBigArrays0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(releasableBytesStreamOutput0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      deleteResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertEquals(11, releasableBytesStreamOutput0.size());
      assertEquals(11L, releasableBytesStreamOutput0.position());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      
      boolean boolean1 = indexResponse0.isCreated();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      String string0 = DocWriteResponse.Fields._SHARD_ID;
      assertEquals("_shard_id", string0);
      assertNotNull(string0);
      
      String string1 = deleteResponse0.getId();
      assertNull(string1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus0.getStatus());
      
      int int0 = 0;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = mockBigArrays0.withCircuitBreaking();
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(bigArrays0);
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, deleteAction0.NAME);
      assertFalse(boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      boolean boolean1 = true;
      ByteArray byteArray0 = bigArrays0.newByteArray((long) mockBigArrays0.INT_PAGE_SIZE, boolean1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(byteArray0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(boolean1 == boolean0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      
      PagedBytesReference pagedBytesReference0 = new PagedBytesReference(bigArrays0, byteArray0, mockBigArrays0.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(pagedBytesReference0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(boolean1 == boolean0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertEquals(4096, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      
      StreamInput streamInput0 = pagedBytesReference0.streamInput();
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotNull(streamInput0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(boolean1 == boolean0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertEquals(4096, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(boolean1 == boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertEquals(4096, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, mockBigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotNull(releasableBytesStreamOutput0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      deleteResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(11L, releasableBytesStreamOutput0.position());
      assertEquals(11, releasableBytesStreamOutput0.size());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertFalse(boolean1 == boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertEquals(4096, pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = "";
      String string1 = "_version";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string0, string1);
      assertNotNull(deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.routing());
      assertEquals("_version", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals("", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.routing());
      assertEquals("_version", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals("", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      
      String string2 = "";
      long long0 = 0L;
      long long1 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string2, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.routing());
      assertEquals("_version", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals("", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-53);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-4);
      byteArray0[2] = byte2;
      int int0 = 1652;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byteArray0[1], int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-53), (byte) (-4)}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -53
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNull(shardId0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      
      String string0 = "?$RbO$\"Q[4(?&|ejV";
      int int0 = 2936;
      ShardId shardId1 = new ShardId(string0, string0, int0);
      assertNotNull(shardId1);
      assertEquals(2936, shardId1.id());
      assertEquals(2936, shardId1.getId());
      
      String string1 = "qXg_E|kd 8zR{yW_b";
      long long0 = 4572L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId1, string1, string1, long0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2936, shardId1.id());
      assertEquals(2936, shardId1.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("qXg_E|kd 8zR{yW_b", updateResponse0.getId());
      assertEquals("qXg_E|kd 8zR{yW_b", updateResponse0.getType());
      assertEquals(4572L, updateResponse0.getVersion());
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      try { 
        updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-105);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-111);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-65);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-74);
      byteArray0[5] = byte5;
      byte byte6 = (byte)105;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-110);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-107);
      byteArray0[8] = byte8;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-105), (byte) (-111), (byte) (-65), (byte) (-74), (byte)105, (byte) (-110), (byte) (-107)}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string0 = deleteResponse0.getType();
      assertNull(string0);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string1 = deleteResponse0.getId();
      assertNull(string1);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, noneCircuitBreakerService0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(mockBigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean0 = true;
      ByteArray byteArray0 = mockBigArrays0.newByteArray((long) mockBigArrays0.INT_PAGE_SIZE, boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(byteArray0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      
      PagedBytesReference pagedBytesReference0 = new PagedBytesReference(mockBigArrays0, byteArray0, mockBigArrays0.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(pagedBytesReference0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(4096, pagedBytesReference0.length());
      
      CircuitBreakerStats circuitBreakerStats0 = noneCircuitBreakerService0.stats(string1);
      assertNotNull(circuitBreakerStats0);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, circuitBreakerStats0.getTrippedCount());
      assertEquals((-1L), circuitBreakerStats0.getEstimated());
      assertEquals(0.0, circuitBreakerStats0.getOverhead(), 0.01);
      assertEquals((-1L), circuitBreakerStats0.getLimit());
      assertEquals("fielddata", circuitBreakerStats0.getName());
      
      StreamInput streamInput0 = pagedBytesReference0.streamInput();
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(streamInput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(4096, pagedBytesReference0.length());
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096L, byteArray0.size());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals(4096, pagedBytesReference0.length());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(mockBigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      long long0 = (-2934L);
      releasableBytesStreamOutput0.seek(long0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals((-2934L), releasableBytesStreamOutput0.position());
      assertEquals((-2934), releasableBytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(releasableBytesStreamOutput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2934
         //
         verifyException("org.elasticsearch.common.util.BigArrays$ByteArrayWrapper", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNull(shardId0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      String string0 = "?$RbO$\"Q[(?&|ejV";
      int int0 = 2958;
      ShardId shardId1 = new ShardId(string0, string0, int0);
      assertNotNull(shardId1);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId1, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      assertEquals(2958L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      XContentBuilder xContentBuilder1 = xContentBuilder0.startObject(string0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotNull(xContentBuilder2);
      assertFalse(boolean0 == boolean1);
      assertEquals(2958, shardId1.id());
      assertEquals(2958, shardId1.getId());
      assertEquals(2958L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("?$RbO$\"Q[(?&|ejV", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder2.contentType());
  }
}
