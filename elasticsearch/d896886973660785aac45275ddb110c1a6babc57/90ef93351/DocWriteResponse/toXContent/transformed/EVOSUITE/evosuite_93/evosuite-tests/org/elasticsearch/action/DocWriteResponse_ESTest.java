/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 09:27:52 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.InetAddress;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.Supplier;
import org.apache.lucene.index.SegmentInfos;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.NIOFSDirectory;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.PagedBytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.geo.builders.PointBuilder;
import org.elasticsearch.common.geo.builders.ShapeBuilder;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.io.stream.Writeable;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.unit.Fuzziness;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.common.util.PageCacheRecycler;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetField;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.query.MoreLikeThisQueryBuilder;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.AggregatorFactories;
import org.elasticsearch.search.aggregations.SearchContextAggregations;
import org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregationBuilder;
import org.elasticsearch.search.aggregations.support.AggregationContext;
import org.elasticsearch.search.aggregations.support.ValueType;
import org.elasticsearch.search.internal.ShardSearchTransportRequest;
import org.elasticsearch.search.rescore.QueryRescorerBuilder;
import org.elasticsearch.test.rest.FakeRestChannel;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.elasticsearch.transport.TransportRequestOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_seq_no", string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      InputStreamStreamInput inputStreamStreamInput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_version", string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertNotNull(string1);
      assertEquals("_type", string1);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertNotNull(string0);
      assertEquals("_id", string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string1 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotNull(string1);
      assertEquals("_shard_id", string1);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string2);
      assertEquals("_index", string2);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      String string0 = "}Xi$,W@][k0#E";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, string0, int0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(75L, releasableBytesStreamOutput0.position());
      assertEquals(75, releasableBytesStreamOutput0.size());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      PointBuilder pointBuilder0 = new PointBuilder();
      assertNotNull(pointBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      String[] stringArray0 = new String[25];
      String string1 = "cq?)LP=Dr)6aS8qq+Z";
      stringArray0[0] = string1;
      String string2 = "6fPY5$2";
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, releasableBytesStreamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(75L, releasableBytesStreamOutput0.position());
      assertEquals(75, releasableBytesStreamOutput0.size());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(25, stringArray0.length);
      
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(pointBuilder0.FIELD_GEOMETRIES, deleteResponse0.type, xContentBuilder0);
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("geometries", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("}Xi$,W@][k0#E", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(79, releasableBytesStreamOutput0.size());
      assertEquals(79L, releasableBytesStreamOutput0.position());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(25, stringArray0.length);
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("geometries", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("}Xi$,W@][k0#E", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(79, releasableBytesStreamOutput0.size());
      assertEquals(79L, releasableBytesStreamOutput0.position());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(25, stringArray0.length);
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(79, releasableBytesStreamOutput0.size());
      assertEquals(79L, releasableBytesStreamOutput0.position());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("geometries", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("}Xi$,W@][k0#E", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(25, stringArray0.length);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_MapParams0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(79, releasableBytesStreamOutput0.size());
      assertEquals(79L, releasableBytesStreamOutput0.position());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("geometries", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("}Xi$,W@][k0#E", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(25, stringArray0.length);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(79, releasableBytesStreamOutput0.size());
      assertEquals(79L, releasableBytesStreamOutput0.position());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("geometries", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("}Xi$,W@][k0#E", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(25, stringArray0.length);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String string3 = deleteResponse0.toString();
      assertNotNull(string3);
      assertEquals("DeleteResponse[index=}Xi$,W@][k0#E,type=}Xi$,W@][k0#E,id=}Xi$,W@][k0#E,version=154,found=false,shards=null]", string3);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(154L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", updateResponse0.getType());
      assertEquals(154L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(154L, updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "}Xi$,W@]k0#";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(200, restStatus0.getStatus());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = updateResponse0.type;
      stringArray0[4] = string0;
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, releasableBytesStreamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(6, stringArray0.length);
      
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(stringArray0[1], updateResponse0.id, stringArray0[1]);
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(6, stringArray0.length);
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(6, stringArray0.length);
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(6, stringArray0.length);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_MapParams0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("}Xi$,W@]k0#", moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(6, stringArray0.length);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertEquals(154, shardId1.id());
      assertEquals(154, shardId1.getId());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals("}Xi$,W@]k0#", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertSame(shardId1, shardId0);
      assertSame(shardId0, shardId1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      ShardId shardId0 = null;
      long long0 = 0L;
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SEQ_NO, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("_type", deleteResponse0.getType());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertTrue(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(404, restStatus0.getStatus());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      
      String string0 = "dnv1NXkp|J!&22b[";
      BytesArray bytesArray0 = new BytesArray(string0);
      assertNotNull(bytesArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(16, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      
      BytesArray bytesArray1 = bytesArray0.copyBytesArray();
      assertNotNull(bytesArray1);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(16, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(16, bytesArray1.length());
      assertEquals(0, bytesArray1.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertTrue(bytesArray1.equals((Object)bytesArray0));
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray1, bytesArray0);
      
      StreamInput streamInput0 = bytesArray1.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(16, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(16, bytesArray1.length());
      assertEquals(0, bytesArray1.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertTrue(bytesArray0.equals((Object)bytesArray1));
      assertTrue(bytesArray1.equals((Object)bytesArray0));
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray1, bytesArray0);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(16, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(16, bytesArray1.length());
      assertEquals(0, bytesArray1.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertTrue(bytesArray0.equals((Object)bytesArray1));
      assertTrue(bytesArray1.equals((Object)bytesArray0));
      
      try { 
        updateResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_seq_no", string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_seq_no", string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      DocWriteResponse.Fields docWriteResponse_Fields1 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields1);
      assertEquals("_shard_id", docWriteResponse_Fields1.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields1.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields1.get_ID());
      assertEquals("_type", docWriteResponse_Fields1.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields1.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields1.get_INDEX());
      assertFalse(docWriteResponse_Fields1.equals((Object)docWriteResponse_Fields0));
      
      String string1 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotNull(string1);
      assertEquals("_shard_id", string1);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertFalse(docWriteResponse_Fields0.equals((Object)docWriteResponse_Fields1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(docWriteResponse_Fields0, docWriteResponse_Fields1);
      assertNotSame(string1, string0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_seq_no", string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      int int0 = 3466;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(3466, shardId0.id());
      assertEquals(3466, shardId0.getId());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertNotNull(bytesArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(3466, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      
      BytesArray bytesArray1 = bytesArray0.toBytesArray();
      assertNotNull(bytesArray1);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(3466, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(3466, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      assertSame(bytesArray0, bytesArray1);
      assertSame(bytesArray1, bytesArray0);
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) bytesArray1);
      assertNotNull(streamInput0);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(3466, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(3466, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      assertSame(bytesArray0, bytesArray1);
      assertSame(bytesArray1, bytesArray0);
      
      shardId0.readFrom(streamInput0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(3466, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(3466, bytesArray1.length());
      assertTrue(bytesArray1.hasArray());
      assertSame(bytesArray0, bytesArray1);
      assertSame(bytesArray1, bytesArray0);
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals(3466L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(3466L, updateResponse0.version);
      
      StreamInput streamInput1 = StreamInput.wrap((BytesReference) bytesArray0);
      assertNotNull(streamInput1);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(3466, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertFalse(streamInput1.equals((Object)streamInput0));
      assertSame(bytesArray0, bytesArray1);
      assertNotSame(streamInput1, streamInput0);
      
      updateResponse0.readFrom(streamInput1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3466, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3466, byteBuffer0.remaining());
      assertEquals(3466, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3466 cap=3466]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(3466, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(streamInput1.equals((Object)streamInput0));
      assertSame(bytesArray0, bytesArray1);
      assertNotSame(streamInput1, streamInput0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_index", string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      ShardSearchTransportRequest shardSearchTransportRequest0 = new ShardSearchTransportRequest();
      assertNotNull(shardSearchTransportRequest0);
      
      // Undeclared exception!
      try { 
        shardSearchTransportRequest0.shardId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.internal.ShardSearchTransportRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertNotNull(string0);
      assertEquals("_type", string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      long long0 = 9223372036L;
      updateResponse0.seqNo = long0;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(9223372036L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertNotNull(string0);
      assertEquals("_id", string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      long long0 = updateResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 919;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=919 cap=919]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(919, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=919 cap=919]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(919, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      ShardId shardId0 = ShardId.readShardId(byteBufferStreamInput0);
      assertNotNull(shardId0);
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=919 cap=919]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.position());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(916, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      String string0 = "$eE;x-wY,WH5S/gHTC";
      boolean boolean0 = true;
      Buffer buffer0 = byteBuffer0.position(int0);
      assertNotNull(buffer0);
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=919 lim=919 cap=919]", byteBuffer0.toString());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.position());
      assertEquals(919, buffer0.position());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.isReadOnly());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.hasRemaining());
      assertTrue(buffer0.hasArray());
      assertEquals(919, buffer0.capacity());
      assertEquals(0, buffer0.remaining());
      assertEquals(919, buffer0.limit());
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=919 lim=919 cap=919]", byteBuffer0.toString());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(919L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getId());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getType());
      assertEquals(919L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      
      String string1 = "7-\"c1-$.\"`YPOw5|";
      String string2 = "";
      long long0 = (-144L);
      BytesReference bytesReference0 = null;
      Hashtable<String, GetField> hashtable0 = new Hashtable<String, GetField>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      GetResult getResult0 = new GetResult(updateResponse0.type, string1, string2, long0, boolean0, bytesReference0, hashtable0);
      assertNotNull(getResult0);
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=919 lim=919 cap=919]", byteBuffer0.toString());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(919L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getId());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getType());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals("$eE;x-wY,WH5S/gHTC", getResult0.getIndex());
      assertEquals("7-\"c1-$.\"`YPOw5|", getResult0.getType());
      assertEquals("", getResult0.getId());
      assertEquals((-144L), getResult0.getVersion());
      assertTrue(getResult0.isExists());
      assertEquals(919L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      updateResponse0.setGetResult(getResult0);
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=919 lim=919 cap=919]", byteBuffer0.toString());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(919L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getId());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getType());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals("$eE;x-wY,WH5S/gHTC", getResult0.getIndex());
      assertEquals("7-\"c1-$.\"`YPOw5|", getResult0.getType());
      assertEquals("", getResult0.getId());
      assertEquals((-144L), getResult0.getVersion());
      assertTrue(getResult0.isExists());
      assertEquals(919L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      long long1 = updateResponse0.getSeqNo();
      assertEquals((-2L), long1);
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=919 lim=919 cap=919]", byteBuffer0.toString());
      assertEquals(919, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(919, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(919, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(919L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getId());
      assertEquals("$eE;x-wY,WH5S/gHTC", updateResponse0.getType());
      assertEquals(919L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string3 = docWriteResponse_Fields0.get_TYPE();
      assertNotNull(string3);
      assertEquals("_type", string3);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure();
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertFalse(replicationResponse_ShardInfo_Failure0.primary());
      assertNull(replicationResponse_ShardInfo_Failure0.status());
      assertNull(replicationResponse_ShardInfo_Failure0.nodeId());
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item();
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertNull(moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertNull(moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertNull(moreLikeThisQueryBuilder_Item0.index());
      assertNull(moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      // Undeclared exception!
      try { 
        replicationResponse_ShardInfo_Failure0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo$Failure", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_seq_no", string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      
      String string1 = indexResponse0.getId();
      assertNull(string1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "W PpaWB\"m?G";
      String string1 = "43sT`m0Y!XT";
      long long0 = 0L;
      long long1 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("43sT`m0Y!XT", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("W PpaWB\"m?G", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      indexResponse0.shardId = shardId0;
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("43sT`m0Y!XT", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("W PpaWB\"m?G", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertNull(shardId1);
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("43sT`m0Y!XT", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("W PpaWB\"m?G", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string2 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotNull(string2);
      assertEquals("_shard_id", string2);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "wdzX";
      String string1 = "Q+YB";
      long long0 = (-2397L);
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals("wdzX", deleteResponse0.getType());
      assertEquals((-2397L), deleteResponse0.getVersion());
      assertEquals("Q+YB", deleteResponse0.getId());
      assertEquals((-2397L), deleteResponse0.getSeqNo());
      assertTrue(deleteResponse0.isFound());
      assertEquals((-2397L), deleteResponse0.version);
      assertEquals((-2397L), deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = deleteResponse0.getId();
      assertNotNull(string2);
      assertEquals("Q+YB", string2);
      assertEquals("wdzX", deleteResponse0.getType());
      assertEquals((-2397L), deleteResponse0.getVersion());
      assertEquals("Q+YB", deleteResponse0.getId());
      assertEquals((-2397L), deleteResponse0.getSeqNo());
      assertTrue(deleteResponse0.isFound());
      assertEquals((-2397L), deleteResponse0.version);
      assertEquals((-2397L), deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      long long0 = 0L;
      long long1 = 0L;
      boolean boolean0 = true;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, long0, long1, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertTrue(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      String string1 = "Too Many Requests";
      deleteResponse0.type = string1;
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertTrue(deleteResponse0.isFound());
      assertEquals("Too Many Requests", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string2 = deleteResponse0.getId();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertTrue(deleteResponse0.isFound());
      assertEquals("Too Many Requests", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      BigArrays bigArrays0 = null;
      BigArrays bigArrays1 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays1);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      ByteArray byteArray0 = bigArrays1.newByteArray(updateResponse0.seqNo);
      assertNotNull(byteArray0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, byteArray0.size());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      int int0 = (-2477);
      long long0 = (-461L);
      updateResponse0.seqNo = long0;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-461L), updateResponse0.getSeqNo());
      
      PagedBytesReference pagedBytesReference0 = new PagedBytesReference(bigArrays0, byteArray0, int0);
      assertNotNull(pagedBytesReference0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-461L), updateResponse0.getSeqNo());
      assertEquals(0L, byteArray0.size());
      assertEquals((-2477), pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals((-461L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      byte[] byteArray1 = pagedBytesReference0.array();
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-461L), updateResponse0.getSeqNo());
      assertEquals(0L, byteArray0.size());
      assertEquals((-2477), pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals((-461L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(0, byteArray1.length);
      
      StreamInput streamInput0 = pagedBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-461L), updateResponse0.getSeqNo());
      assertEquals(0L, byteArray0.size());
      assertEquals((-2477), pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals((-461L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      Class<QueryRescorerBuilder> class0 = QueryRescorerBuilder.class;
      Writeable.Reader<QueryRescorerBuilder> writeable_Reader0 = (Writeable.Reader<QueryRescorerBuilder>) mock(Writeable.Reader.class, new ViolatedAssumptionAnswer());
      namedWriteableRegistry0.register(class0, updateResponse0.type, (Writeable.Reader<? extends QueryRescorerBuilder>) writeable_Reader0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-461L), updateResponse0.getSeqNo());
      assertEquals((-461L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = null;
      updateResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-461L), updateResponse0.getSeqNo());
      assertEquals((-461L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-461L), updateResponse0.getSeqNo());
      assertEquals(0L, byteArray0.size());
      assertEquals((-2477), pagedBytesReference0.length());
      assertTrue(pagedBytesReference0.hasArray());
      assertEquals((-461L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      try { 
        updateResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.bytes.PagedBytesReference$PagedBytesReferenceStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      XContentType xContentType0 = XContentType.CBOR;
      XContent xContent0 = xContentType0.xContent();
      assertNotNull(xContent0);
      assertEquals(XContentType.CBOR, xContent0.type());
      
      String[] stringArray0 = new String[0];
      XContentBuilder xContentBuilder0 = XContentBuilder.builder(xContent0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, xContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertEquals(0, stringArray0.length);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "`>^{2j;FD0M9%S@";
      long long0 = 1L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(1L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("`>^{2j;FD0M9%S@", deleteResponse0.getId());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals("`>^{2j;FD0M9%S@", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.version);
      assertEquals(1L, deleteResponse0.seqNo);
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertNull(shardId1);
      assertEquals(1L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("`>^{2j;FD0M9%S@", deleteResponse0.getId());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals("`>^{2j;FD0M9%S@", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.version);
      assertEquals(1L, deleteResponse0.seqNo);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string1);
      assertEquals("_version", string1);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      long long1 = deleteResponse0.getSeqNo();
      assertEquals(1L, long1);
      assertEquals(1L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("`>^{2j;FD0M9%S@", deleteResponse0.getId());
      assertEquals(1L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals("`>^{2j;FD0M9%S@", deleteResponse0.getType());
      assertEquals(1L, deleteResponse0.version);
      assertEquals(1L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertTrue(long1 == long0);
      assertNotSame(string0, string1);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      
      StreamOutput streamOutput0 = null;
      XContentType xContentType0 = XContentType.CBOR;
      XContent xContent0 = xContentType0.xContent();
      assertNotNull(xContent0);
      assertEquals(XContentType.CBOR, xContent0.type());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = deleteResponse0.id;
      stringArray0[1] = docWriteResponse_Fields0._SEQ_NO;
      stringArray0[2] = string1;
      stringArray0[3] = docWriteResponse_Fields0._SEQ_NO;
      stringArray0[4] = updateResponse0.type;
      XContentBuilder xContentBuilder0 = new XContentBuilder(xContent0, streamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertEquals(XContentType.CBOR, xContent0.type());
      assertEquals(5, stringArray0.length);
      
      Map<String, String> map0 = null;
      ToXContent.Params toXContent_Params0 = null;
      String string2 = null;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        xContentBuilder0.field(string2, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name cannot be null
         //
         verifyException("org.elasticsearch.common.xcontent.XContentBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      int int0 = 2342;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2342 cap=2342]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2342, byteBuffer0.limit());
      assertEquals(2342, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2342, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2342 cap=2342]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2342, byteBuffer0.limit());
      assertEquals(2342, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2342, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      double double0 = byteBuffer0.getDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals("java.nio.DirectByteBuffer[pos=8 lim=2342 cap=2342]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(2334, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2342, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.position());
      assertEquals(2342, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals("java.nio.DirectByteBuffer[pos=8 lim=2342 cap=2342]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(2334, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2342, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.position());
      assertEquals(2342, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = ReplicationResponse.ShardInfo.readShardInfo(streamInput0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=11 lim=2342 cap=2342]", byteBuffer0.toString());
      assertEquals(2331, byteBuffer0.remaining());
      assertEquals(2342, byteBuffer0.limit());
      assertEquals(2342, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      replicationResponse_ShardInfo0.readFrom(streamInput0);
      assertEquals(14, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=14 lim=2342 cap=2342]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2328, byteBuffer0.remaining());
      assertEquals(2342, byteBuffer0.limit());
      assertEquals(2342, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      deleteResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(14, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=14 lim=2342 cap=2342]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2328, byteBuffer0.remaining());
      assertEquals(2342, byteBuffer0.limit());
      assertEquals(2342, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertNotNull(string0);
      assertEquals("_seq_no", string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string1 = "";
      UpdateRequest updateRequest0 = new UpdateRequest(string1, string1, docWriteResponse_Fields0._INDEX);
      assertNotNull(updateRequest0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("", updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_index", updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 0L;
      UpdateRequest updateRequest1 = updateRequest0.version(long0);
      assertNotNull(updateRequest1);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("", updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0L, updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_index", updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertEquals("", updateRequest1.type());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("_index", updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      int int0 = 102;
      UpdateRequest updateRequest2 = updateRequest1.retryOnConflict(int0);
      assertNotNull(updateRequest2);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("", updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.refresh());
      assertEquals(102, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0L, updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_index", updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertEquals("", updateRequest1.type());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertEquals(102, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("_index", updateRequest1.id());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0L, updateRequest2.version());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(102, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("", updateRequest2.type());
      assertEquals("_index", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(shardId0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("", updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.refresh());
      assertEquals(102, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0L, updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_index", updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertEquals("", updateRequest1.type());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertEquals(102, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("_index", updateRequest1.id());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0L, updateRequest2.version());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(102, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("", updateRequest2.type());
      assertEquals("_index", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      String string2 = "/P}o*x\"kk(K";
      long long1 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, docWriteResponse_Fields0._INDEX, string2, long1, boolean0);
      assertNotNull(updateResponse0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("", updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.refresh());
      assertEquals(102, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0L, updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_index", updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertEquals("", updateRequest1.type());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertEquals(102, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("_index", updateRequest1.id());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0L, updateRequest2.version());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(102, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("", updateRequest2.type());
      assertEquals("_index", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertEquals("/P}o*x\"kk(K", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_index", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNull(shardId1);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("", updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.refresh());
      assertEquals(102, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0L, updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_index", updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertEquals("", updateRequest1.type());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertEquals(102, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("_index", updateRequest1.id());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0L, updateRequest2.version());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(102, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("", updateRequest2.type());
      assertEquals("_index", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertEquals("/P}o*x\"kk(K", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_index", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      long long2 = updateResponse0.getVersion();
      assertEquals(0L, long2);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("", updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.refresh());
      assertEquals(102, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0L, updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertEquals("_index", updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertEquals("", updateRequest1.type());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertEquals(102, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("_index", updateRequest1.id());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0L, updateRequest2.version());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(102, updateRequest2.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("", updateRequest2.type());
      assertEquals("_index", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertEquals("/P}o*x\"kk(K", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_index", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "";
      MockFile mockFile0 = new MockFile(string3);
      assertNotNull(mockFile0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0, boolean0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "$824/n?\"Fh^M235Ia}&";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string0, string0);
      assertNotNull(updateRequest0);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.index());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptString());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      
      boolean boolean0 = false;
      UpdateRequest updateRequest1 = updateRequest0.refresh(boolean0);
      assertNotNull(updateRequest1);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.index());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptString());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      String[] stringArray0 = new String[8];
      String string1 = "h<n]Tzt@sk";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      UpdateRequest updateRequest2 = updateRequest1.fields(stringArray0);
      assertNotNull(updateRequest2);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.index());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptString());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.routing());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.id());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.refresh());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertEquals(8, stringArray0.length);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(shardId0);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.index());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptString());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.routing());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.id());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.refresh());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertEquals(8, stringArray0.length);
      
      String string2 = "9[MC+F>l-jJ`T`e";
      long long0 = 1275L;
      long long1 = 86400000L;
      boolean boolean1 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, stringArray0[4], long0, long1, boolean1);
      assertNotNull(indexResponse0);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.index());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptString());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertEquals("9[MC+F>l-jJ`T`e", indexResponse0.getType());
      assertEquals(86400000L, indexResponse0.getVersion());
      assertEquals(1275L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertEquals("$824/n?\"Fh^M235Ia}&", indexResponse0.getId());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.routing());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.id());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.refresh());
      assertEquals(1275L, indexResponse0.seqNo);
      assertEquals(86400000L, indexResponse0.version);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(8, stringArray0.length);
      
      long long2 = indexResponse0.getVersion();
      assertEquals(86400000L, long2);
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.index());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptString());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertEquals("9[MC+F>l-jJ`T`e", indexResponse0.getType());
      assertEquals(86400000L, indexResponse0.getVersion());
      assertEquals(1275L, indexResponse0.getSeqNo());
      assertFalse(indexResponse0.isCreated());
      assertEquals("$824/n?\"Fh^M235Ia}&", indexResponse0.getId());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.routing());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.parent());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.id());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.index());
      assertEquals("$824/n?\"Fh^M235Ia}&", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.refresh());
      assertEquals(1275L, indexResponse0.seqNo);
      assertEquals(86400000L, indexResponse0.version);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "4K(gK7y=1%rbWAK";
      long long0 = 1059L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals("4K(gK7y=1%rbWAK", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(1059L, updateResponse0.getVersion());
      assertEquals("4K(gK7y=1%rbWAK", updateResponse0.getType());
      assertEquals(1059L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-41);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = ReplicationResponse.ShardInfo.readShardInfo(streamInput0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(87, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(4, byteArray0.length);
      
      updateResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("4K(gK7y=1%rbWAK", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(1059L, updateResponse0.getVersion());
      assertEquals("4K(gK7y=1%rbWAK", updateResponse0.getType());
      assertEquals(87, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1059L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(4, byteArray0.length);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertNotNull(string1);
      assertEquals("_type", string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = updateResponse0.getType();
      assertNotNull(string2);
      assertEquals("4K(gK7y=1%rbWAK", string2);
      assertEquals("4K(gK7y=1%rbWAK", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(1059L, updateResponse0.getVersion());
      assertEquals("4K(gK7y=1%rbWAK", updateResponse0.getType());
      assertEquals(1059L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      Path path0 = null;
      NIOFSDirectory nIOFSDirectory0 = null;
      try {
        nIOFSDirectory0 = new NIOFSDirectory(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      String string1 = "org.elasticsearch.action.DocWriteResponse$Fields";
      long long0 = 1489L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, int0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(1489L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(1489L, indexResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      indexResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(1489L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(1489L, indexResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = indexResponse0.getIndex();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(1489L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(1489L, indexResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-94);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)7;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-48);
      byteArray0[5] = byte5;
      byte byte6 = (byte)10;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-94), (byte)0, (byte)7, (byte) (-1), (byte) (-48), (byte)10, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      XContentBuilder xContentBuilder0 = null;
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.DeleteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      String string0 = deleteResponse0.getType();
      assertNull(string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      String string1 = "Failed to send response";
      String string2 = "'{F\\`f$A@~S";
      long long0 = 86400L;
      long long1 = (-2652L);
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(deleteResponse0.shardId, string1, string2, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(86400L, indexResponse0.getSeqNo());
      assertEquals((-2652L), indexResponse0.getVersion());
      assertEquals("'{F\\`f$A@~S", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("Failed to send response", indexResponse0.getType());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(86400L, indexResponse0.seqNo);
      assertEquals((-2652L), indexResponse0.version);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      String string3 = indexResponse0.getId();
      assertNotNull(string3);
      assertEquals("'{F\\`f$A@~S", string3);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(86400L, indexResponse0.getSeqNo());
      assertEquals((-2652L), indexResponse0.getVersion());
      assertEquals("'{F\\`f$A@~S", indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("Failed to send response", indexResponse0.getType());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(86400L, indexResponse0.seqNo);
      assertEquals((-2652L), indexResponse0.version);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      int int0 = 292272992;
      int int1 = 18;
      String string0 = "S*\\<1YT~pFlDzP\\";
      String string1 = "";
      ShardId shardId0 = new ShardId(string0, string1, int1);
      assertNotNull(shardId0);
      assertEquals(18, shardId0.id());
      assertEquals(18, shardId0.getId());
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "G *_&y?H";
      long long0 = 19L;
      boolean boolean0 = true;
      String string3 = "fAj";
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string3, int1, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(18, shardId0.id());
      assertEquals(18, shardId0.getId());
      assertEquals("fAj", deleteResponse0.getId());
      assertTrue(deleteResponse0.isFound());
      assertEquals(18L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getType());
      assertEquals(19L, deleteResponse0.getVersion());
      assertEquals(18L, deleteResponse0.seqNo);
      assertEquals(19L, deleteResponse0.version);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = deleteResponse0.toString();
      assertNotNull(string4);
      assertEquals("DeleteResponse[index=S*\\<1YT~pFlDzP\\,type=,id=fAj,version=19,found=true,shards=null]", string4);
      assertEquals(18, shardId0.id());
      assertEquals(18, shardId0.getId());
      assertEquals("fAj", deleteResponse0.getId());
      assertTrue(deleteResponse0.isFound());
      assertEquals(18L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getType());
      assertEquals(19L, deleteResponse0.getVersion());
      assertEquals(18L, deleteResponse0.seqNo);
      assertEquals(19L, deleteResponse0.version);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      ByteBuffer byteBuffer0 = null;
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertTrue(byteBufferStreamInput0.markSupported());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(byteBufferStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "S2w3/CLMex";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string1 = "_id";
      int int0 = (-258);
      ShardId shardId0 = new ShardId(string1, string1, int0);
      assertNotNull(shardId0);
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData";
      long long0 = 0L;
      boolean boolean1 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string2, long0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals((-258L), updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals((-258L), updateResponse0.version);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      long long1 = updateResponse0.getVersion();
      assertEquals((-258L), long1);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals((-258L), updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals((-258L), updateResponse0.version);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(long1 == long0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      String string0 = "_id";
      int int0 = (-258);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      
      String string1 = "org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData";
      long long0 = 0L;
      long long1 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, string1, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      long long2 = (-1L);
      String string2 = updateResponse0.getIndex();
      assertNotNull(string2);
      assertEquals("_id", string2);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      updateResponse0.seqNo = long2;
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      String string3 = updateResponse0.toString();
      assertNotNull(string3);
      assertEquals("UpdateResponse[index=_id,type=org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData,id=org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData,version=0,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string3);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258), shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      String string0 = deleteResponse0.getType();
      assertNull(string0);
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      String string1 = "Failed to send response";
      String string2 = "'{F\\`f$A@~S";
      long long0 = 86387L;
      long long1 = (-2652L);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      int int0 = 795;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "5A@\"";
      String string3 = "org.elasticsearch.action.DocWriteResponse$Fields";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string3, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      ValueType valueType0 = ValueType.DOUBLE;
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(updateResponse0.id, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      long long1 = 0L;
      CardinalityAggregationBuilder cardinalityAggregationBuilder1 = cardinalityAggregationBuilder0.precisionThreshold(long1);
      assertNotNull(cardinalityAggregationBuilder1);
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertNull(cardinalityAggregationBuilder1.field());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder1.getName());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      TransportRequestOptions transportRequestOptions0 = deleteAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertFalse(transportRequestOptions0.compress());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      OutputStream outputStream0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string3;
      stringArray0[1] = deleteAction0.NAME;
      stringArray0[2] = deleteResponse0.type;
      stringArray0[3] = updateResponse0.id;
      stringArray0[4] = string0;
      stringArray0[5] = deleteResponse0.type;
      String string4 = "_index";
      stringArray0[6] = string4;
      boolean boolean1 = true;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, outputStream0, stringArray0, boolean1);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(boolean1 == boolean0);
      assertEquals(7, stringArray0.length);
      
      ToXContent.Params toXContent_Params0 = null;
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(154, shardId1.id());
      assertEquals(154, shardId1.getId());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertSame(shardId1, shardId0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(shardId0, shardId1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      XContentBuilder xContentBuilder1 = cardinalityAggregationBuilder1.doXContentBody(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder1);
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertNull(cardinalityAggregationBuilder1.field());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder1.getName());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(shardId0, shardId1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder1, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "5A@\"";
      String string3 = "org.elasticsearch.action.DocWriteResponse$Fields";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string3, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals("5A@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals("5A@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      ValueType valueType0 = ValueType.DOUBLE;
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(95L, releasableBytesStreamOutput0.position());
      assertEquals(95, releasableBytesStreamOutput0.size());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals("5A@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(updateResponse0.id, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals("5A@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      long long1 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder1 = cardinalityAggregationBuilder0.precisionThreshold(long1);
      assertNotNull(cardinalityAggregationBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertNull(cardinalityAggregationBuilder1.format());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder1.getName());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertNull(cardinalityAggregationBuilder1.field());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals("5A@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      OutputStream outputStream0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string3;
      stringArray0[1] = deleteAction0.NAME;
      stringArray0[0] = deleteResponse0.type;
      stringArray0[3] = updateResponse0.id;
      stringArray0[4] = string0;
      stringArray0[5] = deleteResponse0.type;
      String string4 = "_index";
      stringArray0[6] = string4;
      boolean boolean2 = true;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, outputStream0, stringArray0, boolean2);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, stringArray0.length);
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = cardinalityAggregationBuilder1.doXContentBody(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNull(cardinalityAggregationBuilder1.format());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", cardinalityAggregationBuilder1.getName());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertNull(cardinalityAggregationBuilder1.field());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", updateResponse0.getId());
      assertEquals("5A@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(int0 == int1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder1, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string0 = "_id";
      int int0 = (-258);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      
      String string1 = "org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData";
      long long0 = 0L;
      long long1 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, string1, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = updateResponse0.toString();
      assertNotNull(string2);
      assertEquals("UpdateResponse[index=_id,type=org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData,id=org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData,version=0,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string2);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.index.fielddata.plain.AtomicDoubleFieldData", updateResponse0.getId());
      assertEquals((-258), shardId1.id());
      assertEquals((-258), shardId1.getId());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(shardId1, shardId0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertNotNull(string0);
      assertEquals("_id", string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string1 = docWriteResponse_Fields0.get_SHARD_ID();
      assertNotNull(string1);
      assertEquals("_shard_id", string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      String string2 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string2);
      assertEquals("_index", string2);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      Path path0 = null;
      OpenOption[] openOptionArray0 = new OpenOption[7];
      long long0 = 0L;
      deleteResponse0.seqNo = long0;
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string3 = "Hs,!ghYt .oEymk7iAT";
      int int0 = 0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.readBytes(int0);
      assertNotNull(channelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "[s$pkB6r-T?0uE";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      
      String string1 = "";
      long long0 = 9223372036854775807L;
      boolean boolean0 = false;
      String string2 = shardId0.getIndexName();
      assertNotNull(string2);
      assertEquals("[s$pkB6r-T?0uE", string2);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals("[s$pkB6r-T?0uE", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(9223372036854775807L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(9223372036854775807L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals("[s$pkB6r-T?0uE", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(9223372036854775807L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(67, bytesStreamOutput0.size());
      assertEquals(67L, bytesStreamOutput0.position());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(9223372036854775807L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      String string3 = "\\hSA}";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-59);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-47);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-75);
      byteArray0[3] = byte3;
      BytesArray bytesArray0 = new BytesArray(byteArray0);
      assertNotNull(bytesArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte) (-47), (byte) (-75)}, byteArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(4, byteArray0.length);
      
      BytesArray bytesArray1 = bytesArray0.toBytesArray();
      assertNotNull(bytesArray1);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte) (-47), (byte) (-75)}, byteArray0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray1.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertEquals(4, bytesArray1.length());
      assertSame(bytesArray0, bytesArray1);
      assertSame(bytesArray1, bytesArray0);
      assertEquals(4, byteArray0.length);
      
      Map<String, GetField> map0 = null;
      GetResult getResult0 = new GetResult(string1, string3, string3, updateResponse0.seqNo, boolean0, bytesArray1, map0);
      assertNotNull(getResult0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte) (-47), (byte) (-75)}, byteArray0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray1.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertEquals(4, bytesArray1.length());
      assertFalse(getResult0.isExists());
      assertEquals("", getResult0.getIndex());
      assertEquals("\\hSA}", getResult0.getType());
      assertFalse(getResult0.isSourceEmpty());
      assertEquals("\\hSA}", getResult0.getId());
      assertEquals((-2L), getResult0.getVersion());
      assertEquals("[s$pkB6r-T?0uE", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(9223372036854775807L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(9223372036854775807L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, byteArray0.length);
      
      updateResponse0.setGetResult(getResult0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte) (-47), (byte) (-75)}, byteArray0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(4, bytesArray0.length());
      assertEquals(0, bytesArray1.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertEquals(4, bytesArray1.length());
      assertFalse(getResult0.isExists());
      assertEquals("", getResult0.getIndex());
      assertEquals("\\hSA}", getResult0.getType());
      assertFalse(getResult0.isSourceEmpty());
      assertEquals("\\hSA}", getResult0.getId());
      assertEquals((-2L), getResult0.getVersion());
      assertEquals("[s$pkB6r-T?0uE", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(9223372036854775807L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(9223372036854775807L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(bytesArray0, bytesArray1);
      assertSame(bytesArray1, bytesArray0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      
      String string0 = "";
      indexResponse0.type = string0;
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      
      String string1 = indexResponse0.getType();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "5A@\"";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string2, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5A@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5A@\"", updateResponse0.getId());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, string0, int0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5A@\"", updateResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getVersion());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ValueType valueType0 = ValueType.DOUBLE;
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(51L, releasableBytesStreamOutput0.position());
      assertEquals(51, releasableBytesStreamOutput0.size());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5A@\"", updateResponse0.getId());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(updateResponse0.id, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("5A@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5A@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long1 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder1 = cardinalityAggregationBuilder0.precisionThreshold(long1);
      assertNotNull(cardinalityAggregationBuilder1);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("5A@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertNull(cardinalityAggregationBuilder1.field());
      assertEquals("5A@\"", cardinalityAggregationBuilder1.getName());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5A@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      OutputStream outputStream0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = deleteResponse0.type;
      stringArray0[3] = updateResponse0.id;
      stringArray0[4] = string0;
      stringArray0[5] = deleteResponse0.type;
      stringArray0[6] = stringArray0[1];
      boolean boolean2 = true;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, outputStream0, stringArray0, boolean2);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, stringArray0.length);
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = cardinalityAggregationBuilder1.doXContentBody(xContentBuilder0, toXContent_Params0);
      assertNotNull(xContentBuilder1);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertEquals("5A@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertNull(cardinalityAggregationBuilder1.field());
      assertEquals("5A@\"", cardinalityAggregationBuilder1.getName());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5A@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5A@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder1, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string0 = "_id";
      int int0 = (-258);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      
      long long0 = 0L;
      long long1 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string0, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_id", updateResponse0.getType());
      assertEquals("_id", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      String string1 = updateResponse0.toString();
      assertNotNull(string1);
      assertEquals("UpdateResponse[index=_id,type=_id,id=_id,version=0,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string1);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_id", updateResponse0.getType());
      assertEquals("_id", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      XContentBuilder xContentBuilder0 = SmileXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "5@\"";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string2, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, string0, int0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getVersion());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ValueType valueType0 = ValueType.DOUBLE;
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(updateResponse0.id, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long1 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      PointBuilder pointBuilder0 = new PointBuilder();
      assertNotNull(pointBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      String[] stringArray0 = new String[6];
      String string3 = "cq?)LP=Dr)6aS8qq+Z";
      stringArray0[0] = string3;
      String string4 = "6fPY5$2";
      stringArray0[1] = string4;
      stringArray0[2] = updateResponse0.id;
      stringArray0[3] = updateResponse0.type;
      String string5 = "sSsEk7<MZK{[T#;Sl";
      stringArray0[4] = string5;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, releasableBytesStreamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      
      String string6 = "";
      String string7 = "PiU";
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(string6, updateResponse0.id, string7);
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_MapParams0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = pointBuilder0.toXContent(xContentBuilder1, toXContent_MapParams0);
      assertNotNull(xContentBuilder2);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder3 = cardinalityAggregationBuilder0.toXContent(xContentBuilder2, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder3);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder3.humanReadable());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder3.contentType());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder1 = cardinalityAggregationBuilder0.precisionThreshold(long1);
      assertNotNull(cardinalityAggregationBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertNull(cardinalityAggregationBuilder1.field());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals("5@\"", cardinalityAggregationBuilder1.getName());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = deleteResponse0.type;
      stringArray1[4] = string0;
      stringArray1[5] = deleteResponse0.type;
      stringArray1[6] = stringArray1[1];
      boolean boolean2 = true;
      XContentBuilder xContentBuilder4 = new XContentBuilder(yamlXContent0, releasableBytesStreamOutput0, stringArray1, boolean2);
      assertNotNull(xContentBuilder4);
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertFalse(xContentBuilder4.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder4.contentType());
      assertFalse(xContentBuilder4.isPrettyPrint());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder2));
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder1));
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder0));
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder3));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray1.length);
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder4, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 121;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "5@\"";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string2, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, string0, int0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(121L, deleteResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals(121L, deleteResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(121L, deleteResponse0.version);
      assertEquals(121L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      ValueType valueType0 = ValueType.DOUBLE;
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      deleteResponse0.seqNo = updateResponse0.version;
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(121L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(48, releasableBytesStreamOutput0.size());
      assertEquals(48L, releasableBytesStreamOutput0.position());
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(updateResponse0.id, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      long long1 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder1 = cardinalityAggregationBuilder0.precisionThreshold(long1);
      assertNotNull(cardinalityAggregationBuilder1);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertEquals(121, shardId0.id());
      assertEquals(121, shardId0.getId());
      assertEquals("5@\"", cardinalityAggregationBuilder1.getName());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertNull(cardinalityAggregationBuilder1.field());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = deleteResponse0.type;
      stringArray0[4] = string0;
      stringArray0[5] = deleteResponse0.type;
      stringArray0[6] = stringArray0[1];
      boolean boolean2 = true;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, releasableBytesStreamOutput0, stringArray0, boolean2);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(48, releasableBytesStreamOutput0.size());
      assertEquals(48L, releasableBytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(int1 == int0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, stringArray0.length);
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "5@\"";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string2, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      String string3 = "}Xi$,W@][k0jE";
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, string3, int0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(deleteResponse0.isFound());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0jE", deleteResponse0.getId());
      assertEquals(154L, deleteResponse0.getVersion());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      ValueType valueType0 = ValueType.DOUBLE;
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(updateResponse0.id, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      long long1 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      PointBuilder pointBuilder0 = new PointBuilder();
      assertNotNull(pointBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      String[] stringArray0 = new String[6];
      String string4 = "cq?)LP=Dr)6aS8qq+Z";
      String string5 = "6fPY5$2";
      stringArray0[1] = string5;
      stringArray0[2] = updateResponse0.id;
      stringArray0[3] = updateResponse0.type;
      String string6 = "sSsEk7<MZK{[T#;Sl";
      stringArray0[4] = string6;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, releasableBytesStreamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      
      String string7 = "";
      String string8 = "PiU";
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(string7, updateResponse0.id, string8);
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_MapParams0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = pointBuilder0.toXContent(xContentBuilder1, toXContent_MapParams0);
      assertNotNull(xContentBuilder2);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder3 = cardinalityAggregationBuilder0.toXContent(xContentBuilder2, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder3);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder3.humanReadable());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder3.contentType());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder1 = cardinalityAggregationBuilder0.precisionThreshold(long1);
      assertNotNull(cardinalityAggregationBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertNull(cardinalityAggregationBuilder0.format());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals("5@\"", cardinalityAggregationBuilder1.getName());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertNull(cardinalityAggregationBuilder1.field());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = deleteResponse0.type;
      stringArray1[4] = string0;
      stringArray1[5] = deleteResponse0.type;
      stringArray1[6] = stringArray1[1];
      boolean boolean2 = true;
      XContentBuilder xContentBuilder4 = new XContentBuilder(yamlXContent0, releasableBytesStreamOutput0, stringArray1, boolean2);
      assertNotNull(xContentBuilder4);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertFalse(xContentBuilder4.isPrettyPrint());
      assertFalse(xContentBuilder4.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder4.contentType());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder0));
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder3));
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder2));
      assertFalse(xContentBuilder4.equals((Object)xContentBuilder1));
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(int1 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray1.length);
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder4, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "5@\"";
      long long0 = 14L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string2, string2, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, string0, int0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(154L, deleteResponse0.getVersion());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ValueType valueType0 = ValueType.DOUBLE;
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, noneCircuitBreakerService0, boolean0);
      assertNotNull(bigArrays0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder0 = new CardinalityAggregationBuilder(updateResponse0.id, valueType0);
      assertNotNull(cardinalityAggregationBuilder0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long1 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      PointBuilder pointBuilder0 = new PointBuilder();
      assertNotNull(pointBuilder0);
      assertEquals(ShapeBuilder.GeoShapeType.POINT, pointBuilder0.type());
      assertEquals(0.0, pointBuilder0.longitude(), 0.01);
      assertEquals(0.0, pointBuilder0.latitude(), 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      String[] stringArray0 = new String[6];
      String string3 = "cq?)LP=Dr)6aS8qq+Z";
      stringArray0[0] = string3;
      String string4 = "6fPY5$2";
      stringArray0[1] = string4;
      stringArray0[0] = updateResponse0.id;
      stringArray0[3] = updateResponse0.type;
      String string5 = "sSsEk7<MZK{[T#;Sl";
      stringArray0[4] = string5;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, releasableBytesStreamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      
      String string6 = "PiU";
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(stringArray0[1], updateResponse0.id, string6);
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(long0 == long1);
      assertEquals(6, stringArray0.length);
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(long0 == long1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertEquals(6, stringArray0.length);
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(long0 == long1);
      assertEquals(6, stringArray0.length);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_MapParams0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(long0 == long1);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder2 = cardinalityAggregationBuilder0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder2);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals("PiU", moreLikeThisQueryBuilder_Item0.id());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("5@\"", moreLikeThisQueryBuilder_Item0.type());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(49L, releasableBytesStreamOutput0.position());
      assertEquals(49, releasableBytesStreamOutput0.size());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertNull(cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CardinalityAggregationBuilder cardinalityAggregationBuilder1 = cardinalityAggregationBuilder0.precisionThreshold(long1);
      assertNotNull(cardinalityAggregationBuilder1);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals("cardinality", cardinalityAggregationBuilder0.getWriteableName());
      assertEquals(0L, (long)cardinalityAggregationBuilder0.precisionThreshold());
      assertNull(cardinalityAggregationBuilder0.format());
      assertNull(cardinalityAggregationBuilder0.valueType());
      assertEquals("5@\"", cardinalityAggregationBuilder0.getName());
      assertNull(cardinalityAggregationBuilder0.field());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(14L, updateResponse0.getVersion());
      assertEquals("5@\"", updateResponse0.getType());
      assertEquals(14L, updateResponse0.getSeqNo());
      assertEquals("5@\"", updateResponse0.getId());
      assertNull(cardinalityAggregationBuilder1.valueType());
      assertEquals(0L, (long)cardinalityAggregationBuilder1.precisionThreshold());
      assertEquals("5@\"", cardinalityAggregationBuilder1.getName());
      assertNull(cardinalityAggregationBuilder1.field());
      assertEquals("cardinality", cardinalityAggregationBuilder1.getWriteableName());
      assertNull(cardinalityAggregationBuilder1.format());
      assertEquals(14L, updateResponse0.version);
      assertEquals(14L, updateResponse0.seqNo);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(long0 == long1);
      assertTrue(boolean0 == boolean1);
      assertFalse(long1 == long0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertSame(cardinalityAggregationBuilder0, cardinalityAggregationBuilder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(cardinalityAggregationBuilder1, cardinalityAggregationBuilder0);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = deleteResponse0.type;
      stringArray1[4] = string0;
      stringArray1[5] = deleteResponse0.type;
      stringArray1[6] = stringArray1[1];
      boolean boolean2 = true;
      ToXContent.Params toXContent_Params0 = null;
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string1, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(200, restStatus0.getStatus());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = new DeleteResponse(updateResponse0.shardId, string0, string0, int0, int0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(154L, deleteResponse0.getSeqNo());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("}Xi$,W@][k0#E", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(154L, deleteResponse0.getVersion());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(154L, deleteResponse0.version);
      assertEquals(154L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      long long1 = 0L;
      EvoSuiteFile evoSuiteFile0 = null;
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      String[] stringArray0 = new String[6];
      String string2 = "cq?)LP=Dr)6aS8qq+Z";
      stringArray0[0] = string2;
      String string3 = "6fPY5$2";
      stringArray0[1] = string3;
      stringArray0[2] = updateResponse0.id;
      stringArray0[3] = updateResponse0.type;
      String string4 = "sSsEk7<MZK{[T#;Sl";
      stringArray0[4] = string4;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, releasableBytesStreamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(stringArray0[1], updateResponse0.id, stringArray0[1]);
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertEquals(6, stringArray0.length);
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertEquals(6, stringArray0.length);
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertEquals(6, stringArray0.length);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_MapParams0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId0.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(154L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = deleteResponse0.type;
      stringArray1[4] = string0;
      stringArray1[5] = deleteResponse0.type;
      stringArray1[6] = stringArray1[1];
      ToXContent.Params toXContent_Params0 = null;
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string0 = "_id";
      int int0 = (-258);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258L), updateResponse0.getVersion());
      assertEquals("_id", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-258L), updateResponse0.getSeqNo());
      assertEquals("_id", updateResponse0.getId());
      assertEquals((-258L), updateResponse0.seqNo);
      assertEquals((-258L), updateResponse0.version);
      
      String string1 = updateResponse0.toString();
      assertNotNull(string1);
      assertEquals("UpdateResponse[index=_id,type=_id,id=_id,version=-258,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string1);
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals((-258), shardId0.id());
      assertEquals((-258), shardId0.getId());
      assertEquals((-258L), updateResponse0.getVersion());
      assertEquals("_id", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-258L), updateResponse0.getSeqNo());
      assertEquals("_id", updateResponse0.getId());
      assertEquals((-258L), updateResponse0.seqNo);
      assertEquals((-258L), updateResponse0.version);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)123;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-117);
      byteArray0[3] = byte3;
      byte byte4 = (byte)22;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-81);
      byteArray0[5] = byte5;
      int int1 = 2004318071;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte3, int1);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)123, (byte) (-117), (byte)22, (byte) (-81)}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte5);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -117
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string0 = "}Xi$,W@][k0#E";
      String string1 = "eS5bTckyx>v8=ud";
      int int0 = 154;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string1, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(200, restStatus0.getStatus());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      int int1 = 768;
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int1, bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(int1 == int0);
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      long long1 = 0L;
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      String string2 = "6fPY5$2";
      stringArray0[1] = string2;
      stringArray0[2] = updateResponse0.id;
      stringArray0[3] = updateResponse0.type;
      String string3 = "sSsEk7<MZK{[T#;Sl";
      stringArray0[4] = string3;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = new XContentBuilder(smileXContent0, releasableBytesStreamOutput0, stringArray0);
      assertNotNull(xContentBuilder0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
      
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(stringArray0[1], updateResponse0.id, stringArray0[1]);
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals(6, stringArray0.length);
      
      Map<String, String> map0 = moreLikeThisQueryBuilder_Item0.perFieldAnalyzer();
      assertNull(map0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals(6, stringArray0.length);
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals(6, stringArray0.length);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_MapParams0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
      assertNotNull(xContentBuilder1);
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[4] = string0;
      stringArray1[6] = stringArray1[1];
      ToXContent.Params toXContent_Params0 = null;
      boolean boolean1 = updateResponse0.isCreated();
      assertFalse(boolean1);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154, shardId1.getId());
      assertEquals(154, shardId1.id());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      
      int int2 = 1;
      Fuzziness fuzziness0 = Fuzziness.fromEdits(int2);
      assertNotNull(fuzziness0);
      assertEquals("1", fuzziness0.asString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean2 = false;
      XContentBuilder xContentBuilder2 = fuzziness0.toXContent(xContentBuilder1, (ToXContent.Params) toXContent_MapParams0, boolean2);
      assertNotNull(xContentBuilder2);
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals("1", fuzziness0.asString());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(boolean0 == boolean1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(boolean2 == boolean1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(shardId0, shardId1);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotSame(stringArray0, stringArray1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertEquals(6, stringArray0.length);
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder2, toXContent_Params0);
      assertNotNull(xContentBuilder3);
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(154, shardId0.id());
      assertEquals(154, shardId0.getId());
      assertEquals(154L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("eS5bTckyx>v8=ud", updateResponse0.getType());
      assertEquals("1", fuzziness0.asString());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(74L, releasableBytesStreamOutput0.position());
      assertEquals(74, releasableBytesStreamOutput0.size());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertEquals("eS5bTckyx>v8=ud", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("6fPY5$2", moreLikeThisQueryBuilder_Item0.id());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(154L, updateResponse0.version);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(boolean0 == boolean1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(boolean2 == boolean1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(shardId0, shardId1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertNotSame(stringArray0, stringArray1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      boolean boolean0 = true;
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_version", string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertNotNull(string1);
      assertEquals("_type", string1);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "M'bvP!my";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string1, string2, int0);
      assertNotNull(shardId0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "_version";
      String string4 = "\u000B";
      long long0 = (-2L);
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string3, string4, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getVersion());
      assertEquals("_version", updateResponse0.getType());
      assertEquals("\u000B", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals((-2L), updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotNull(shardId1);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals((-2L), updateResponse0.getVersion());
      assertEquals("_version", updateResponse0.getType());
      assertEquals("\u000B", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(0, shardId1.getId());
      assertEquals(0, shardId1.id());
      assertEquals((-2L), updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(shardId0, shardId1);
      assertNotSame(string3, string4);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(shardId1, shardId0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      boolean boolean0 = false;
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_version", string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      float[] floatArray0 = new float[0];
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string1);
      assertEquals("_version", string1);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertSame(string1, string0);
      
      UpdateRequest updateRequest0 = new UpdateRequest(string0, docWriteResponse_Fields0._SHARD_ID, string0);
      assertNotNull(updateRequest0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_shard_id", updateRequest0.type());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertEquals("_version", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("_version", updateRequest0.index());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      
      String[] stringArray0 = new String[6];
      String string2 = "CZp\"AaNy/Flx@a";
      stringArray0[0] = string2;
      stringArray0[1] = docWriteResponse_Fields0._SHARD_ID;
      stringArray0[2] = docWriteResponse_Fields0._INDEX;
      stringArray0[3] = docWriteResponse_Fields0._SHARD_ID;
      stringArray0[4] = docWriteResponse_Fields0._SEQ_NO;
      stringArray0[5] = docWriteResponse_Fields0._ID;
      boolean boolean1 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0, boolean1);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      
      UpdateRequest updateRequest1 = updateRequest0.doc(xContentBuilder0);
      assertNotNull(updateRequest1);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(updateRequest1.refresh());
      assertEquals("_version", updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertEquals("_version", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.routing());
      assertEquals("_shard_id", updateRequest1.type());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_shard_id", updateRequest0.type());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertEquals("_version", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("_version", updateRequest0.index());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertEquals(6, stringArray0.length);
      
      VersionType versionType0 = VersionType.INTERNAL;
      UpdateRequest updateRequest2 = updateRequest1.versionType(versionType0);
      assertNotNull(updateRequest2);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(updateRequest1.refresh());
      assertEquals("_version", updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertEquals("_version", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.routing());
      assertEquals("_shard_id", updateRequest1.type());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.parent());
      assertEquals("_shard_id", updateRequest2.type());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.scriptLang());
      assertEquals("_version", updateRequest2.id());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("_version", updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_shard_id", updateRequest0.type());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertEquals("_version", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("_version", updateRequest0.index());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertEquals(6, stringArray0.length);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(shardId0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(updateRequest1.refresh());
      assertEquals("_version", updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertEquals("_version", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.routing());
      assertEquals("_shard_id", updateRequest1.type());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.parent());
      assertEquals("_shard_id", updateRequest2.type());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.scriptLang());
      assertEquals("_version", updateRequest2.id());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("_version", updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_shard_id", updateRequest0.type());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertEquals("_version", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("_version", updateRequest0.index());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertEquals(6, stringArray0.length);
      
      String string3 = "%^eVo..TrA&Ac(}cjvo";
      String string4 = "_shard_id";
      long long0 = 356L;
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string3, string4, long0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(updateRequest1.refresh());
      assertEquals("_version", updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertEquals("_version", updateRequest1.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.routing());
      assertEquals("_shard_id", updateRequest1.type());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.parent());
      assertEquals("_shard_id", updateRequest2.type());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.scriptLang());
      assertEquals("_version", updateRequest2.id());
      assertEquals((-3L), updateRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("_version", updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_shard_id", updateRequest0.type());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.refresh());
      assertEquals("_version", updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("_version", updateRequest0.index());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertFalse(updateResponse0.isCreated());
      assertEquals("%^eVo..TrA&Ac(}cjvo", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(356L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(356L, updateResponse0.version);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(6, stringArray0.length);
      
      int int0 = 2133355466;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(pipedInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        updateResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "_seq_no";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals("_seq_no", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNull(shardId0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals("_seq_no", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      String string1 = "";
      String string2 = "";
      long long0 = 1777L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string2, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals("_seq_no", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(1777L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1777L, deleteResponse0.getVersion());
      assertEquals(1777L, deleteResponse0.version);
      assertEquals(1777L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals("_seq_no", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(1777L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(1777L, deleteResponse0.getVersion());
      assertEquals(404, restStatus0.getStatus());
      assertEquals(1777L, deleteResponse0.version);
      assertEquals(1777L, deleteResponse0.seqNo);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      boolean boolean1 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, boolean1);
      assertNotNull(mockPrintStream0);
      
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, mockPrintStream0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=false)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }
}
