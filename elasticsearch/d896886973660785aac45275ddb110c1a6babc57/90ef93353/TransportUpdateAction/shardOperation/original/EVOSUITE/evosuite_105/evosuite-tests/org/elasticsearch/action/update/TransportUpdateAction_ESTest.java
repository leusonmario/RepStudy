/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 12:20:10 GMT 2021
 */

package org.elasticsearch.action.update;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.update.TransportUpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.cluster.metadata.AliasMetaData;
import org.elasticsearch.cluster.metadata.IndexGraveyard;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.index.VersionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportUpdateAction_ESTest extends TransportUpdateAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      UpdateRequest updateRequest0 = new UpdateRequest(metaData0.CONTEXT_MODE_SNAPSHOT, metaData0.CONTEXT_MODE_PARAM, metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertNotNull(updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("global-", updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.refresh());
      assertEquals("SNAPSHOT", updateRequest0.index());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_GATEWAY, updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("global-", updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.refresh());
      assertEquals("SNAPSHOT", updateRequest0.index());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("global-", updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.refresh());
      assertEquals("SNAPSHOT", updateRequest0.index());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.scriptedUpsert());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNotNull(updateRequest0);
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.scriptString());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      
      UpdateRequest updateRequest1 = updateRequest0.routing(metaData0.ALL);
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.scriptString());
      assertEquals("_all", updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.index());
      assertEquals("_all", updateRequest1.routing());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.ALL, updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.scriptString());
      assertEquals("_all", updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.concreteIndex());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.index());
      assertEquals("_all", updateRequest1.routing());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      UpdateRequest updateRequest0 = null;
      // Undeclared exception!
      try { 
        TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, updateRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.update.TransportUpdateAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      String string0 = "=ve2GV!)IsiI=";
      String[] stringArray0 = new String[3];
      stringArray0[0] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[1] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray0[2] = metaData0.ALL;
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      String string1 = "ABooIC|V;,\\$!";
      stringArray1[1] = string1;
      stringArray1[2] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray1[3] = string0;
      stringArray1[4] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray1[5] = string0;
      stringArray1[6] = metaData0.CONTEXT_MODE_PARAM;
      stringArray1[7] = metaData0.CONTEXT_MODE_GATEWAY;
      stringArray1[8] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      ImmutableOpenMap<String, List<AliasMetaData>> immutableOpenMap0 = metaData0.findAliases(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(immutableOpenMap0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      MetaData.Builder metaData_Builder0 = MetaData.builder();
      assertNotNull(metaData_Builder0);
      
      IndexGraveyard indexGraveyard0 = metaData0.custom(string0);
      assertFalse(string0.equals((Object)string1));
      assertNull(indexGraveyard0);
      assertNotSame(string0, string1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      UpdateRequest updateRequest0 = null;
      // Undeclared exception!
      try { 
        TransportUpdateAction.resolveAndValidateRouting(metaData0, string0, updateRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.update.TransportUpdateAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      String string0 = "org.elasticsearch.action.update.TransportUpdateAction$4$1";
      String string1 = "org.elasticsearch.index.cache.request.ShardRequestCache";
      UpdateRequest updateRequest0 = new UpdateRequest(metaData0.ALL, metaData0.CONTEXT_MODE_PARAM, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("org.elasticsearch.index.cache.request.ShardRequestCache", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_all", updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("context_mode", updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, string0, updateRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("org.elasticsearch.index.cache.request.ShardRequestCache", updateRequest0.id());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("_all", updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("context_mode", updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      String string0 = "cancelling existing delayed reroute task";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, metaData0.CONTEXT_MODE_PARAM, metaData0.ALL);
      assertNotNull(updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("cancelling existing delayed reroute task", updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertEquals("_all", updateRequest0.id());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      
      UpdateRequest updateRequest1 = updateRequest0.parent(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("global-", updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("cancelling existing delayed reroute task", updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertEquals("_all", updateRequest0.id());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest1.refresh());
      assertEquals("_all", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("context_mode", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("global-", updateRequest1.parent());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("cancelling existing delayed reroute task", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      
      long long0 = (-8L);
      UpdateRequest updateRequest2 = updateRequest1.version(long0);
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(updateRequest0.detectNoop());
      assertEquals((-8L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("global-", updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("cancelling existing delayed reroute task", updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertEquals("_all", updateRequest0.id());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest1.refresh());
      assertEquals("_all", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("context_mode", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals((-8L), updateRequest1.version());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("global-", updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("cancelling existing delayed reroute task", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.refresh());
      assertEquals((-8L), updateRequest2.version());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("context_mode", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("_all", updateRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertEquals("global-", updateRequest2.parent());
      assertEquals("cancelling existing delayed reroute task", updateRequest2.index());
      assertNull(updateRequest2.scriptString());
      
      boolean boolean0 = true;
      UpdateRequest updateRequest3 = updateRequest2.detectNoop(boolean0);
      assertNotNull(updateRequest3);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest2);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(updateRequest0.detectNoop());
      assertEquals((-8L), updateRequest0.version());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("global-", updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("cancelling existing delayed reroute task", updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertEquals("_all", updateRequest0.id());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest1.refresh());
      assertEquals("_all", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("context_mode", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals((-8L), updateRequest1.version());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("global-", updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("cancelling existing delayed reroute task", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.refresh());
      assertEquals((-8L), updateRequest2.version());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("context_mode", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("_all", updateRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertEquals("global-", updateRequest2.parent());
      assertEquals("cancelling existing delayed reroute task", updateRequest2.index());
      assertNull(updateRequest2.scriptString());
      assertEquals((-8L), updateRequest3.version());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertEquals("context_mode", updateRequest3.type());
      assertNull(updateRequest3.scriptString());
      assertEquals("_all", updateRequest3.id());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.routing());
      assertNull(updateRequest3.concreteIndex());
      assertEquals("global-", updateRequest3.parent());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.scriptLang());
      assertEquals("cancelling existing delayed reroute task", updateRequest3.index());
      assertFalse(updateRequest3.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertFalse(updateRequest3.scriptedUpsert());
      assertFalse(updateRequest3.docAsUpsert());
      
      UpdateRequest updateRequest4 = updateRequest3.docAsUpsert(boolean0);
      assertNotNull(updateRequest4);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest4);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest4);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest4, updateRequest2);
      assertSame(updateRequest4, updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(updateRequest0.docAsUpsert());
      assertTrue(updateRequest0.detectNoop());
      assertEquals((-8L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("global-", updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("cancelling existing delayed reroute task", updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertEquals("_all", updateRequest0.id());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest1.refresh());
      assertEquals("_all", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("context_mode", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals((-8L), updateRequest1.version());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("global-", updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("cancelling existing delayed reroute task", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertFalse(updateRequest2.scriptedUpsert());
      assertTrue(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.refresh());
      assertEquals((-8L), updateRequest2.version());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("context_mode", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("_all", updateRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertEquals("global-", updateRequest2.parent());
      assertEquals("cancelling existing delayed reroute task", updateRequest2.index());
      assertNull(updateRequest2.scriptString());
      assertEquals((-8L), updateRequest3.version());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertEquals("context_mode", updateRequest3.type());
      assertNull(updateRequest3.scriptString());
      assertTrue(updateRequest3.docAsUpsert());
      assertEquals("_all", updateRequest3.id());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.routing());
      assertNull(updateRequest3.concreteIndex());
      assertEquals("global-", updateRequest3.parent());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.scriptLang());
      assertEquals("cancelling existing delayed reroute task", updateRequest3.index());
      assertFalse(updateRequest3.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertNull(updateRequest4.scriptType());
      assertNull(updateRequest4.scriptLang());
      assertEquals("global-", updateRequest4.parent());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertFalse(updateRequest4.scriptedUpsert());
      assertEquals("_all", updateRequest4.id());
      assertNull(updateRequest4.routing());
      assertTrue(updateRequest4.docAsUpsert());
      assertNull(updateRequest4.concreteIndex());
      assertFalse(updateRequest4.refresh());
      assertEquals((-8L), updateRequest4.version());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertTrue(updateRequest4.detectNoop());
      assertNull(updateRequest4.scriptString());
      assertEquals("context_mode", updateRequest4.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertEquals("cancelling existing delayed reroute task", updateRequest4.index());
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_SNAPSHOT, updateRequest4);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest4);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest4);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest4, updateRequest2);
      assertSame(updateRequest4, updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(updateRequest0.docAsUpsert());
      assertTrue(updateRequest0.detectNoop());
      assertEquals((-8L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("global-", updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("global-", updateRequest0.routing());
      assertEquals("cancelling existing delayed reroute task", updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertEquals("_all", updateRequest0.id());
      assertNull(updateRequest0.scriptLang());
      assertEquals("context_mode", updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertEquals("_all", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("context_mode", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals((-8L), updateRequest1.version());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("global-", updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptString());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("cancelling existing delayed reroute task", updateRequest1.index());
      assertEquals("global-", updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.scriptedUpsert());
      assertTrue(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.refresh());
      assertEquals((-8L), updateRequest2.version());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("context_mode", updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("_all", updateRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertEquals("global-", updateRequest2.routing());
      assertEquals("global-", updateRequest2.parent());
      assertEquals("cancelling existing delayed reroute task", updateRequest2.index());
      assertNull(updateRequest2.scriptString());
      assertEquals((-8L), updateRequest3.version());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertEquals("context_mode", updateRequest3.type());
      assertNull(updateRequest3.scriptString());
      assertTrue(updateRequest3.docAsUpsert());
      assertEquals("_all", updateRequest3.id());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.concreteIndex());
      assertEquals("global-", updateRequest3.parent());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.scriptLang());
      assertEquals("cancelling existing delayed reroute task", updateRequest3.index());
      assertEquals("global-", updateRequest3.routing());
      assertFalse(updateRequest3.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertNull(updateRequest4.scriptType());
      assertNull(updateRequest4.scriptLang());
      assertEquals("global-", updateRequest4.parent());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertFalse(updateRequest4.scriptedUpsert());
      assertEquals("_all", updateRequest4.id());
      assertTrue(updateRequest4.docAsUpsert());
      assertNull(updateRequest4.concreteIndex());
      assertFalse(updateRequest4.refresh());
      assertEquals((-8L), updateRequest4.version());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertTrue(updateRequest4.detectNoop());
      assertNull(updateRequest4.scriptString());
      assertEquals("context_mode", updateRequest4.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertEquals("global-", updateRequest4.routing());
      assertEquals("cancelling existing delayed reroute task", updateRequest4.index());
  }
}
